-- Tests for range data types.
set lc_monetary='en_US.UTF-8';
SET
drop type if exists textrange;
psql:sql/rangetypes.sql:3: NOTICE:  type "textrange" does not exist, skipping
DROP TYPE
create type textrange as range (subtype=text, collation="C");
CREATE TYPE
--
-- test input parser
--
-- negative tests; should fail
select ''::textrange;
psql:sql/rangetypes.sql:11: ERROR:  malformed range literal: ""
LINE 1: select ''::textrange;
               ^
DETAIL:  Missing left parenthesis or bracket.
select '-[a,z)'::textrange;
psql:sql/rangetypes.sql:12: ERROR:  malformed range literal: "-[a,z)"
LINE 1: select '-[a,z)'::textrange;
               ^
DETAIL:  Missing left parenthesis or bracket.
select '[a,z) - '::textrange;
psql:sql/rangetypes.sql:13: ERROR:  malformed range literal: "[a,z) - "
LINE 1: select '[a,z) - '::textrange;
               ^
DETAIL:  Junk after right parenthesis or bracket.
select '(",a)'::textrange;
psql:sql/rangetypes.sql:14: ERROR:  malformed range literal: "(",a)"
LINE 1: select '(",a)'::textrange;
               ^
DETAIL:  Unexpected end of input.
select '(,,a)'::textrange;
psql:sql/rangetypes.sql:15: ERROR:  malformed range literal: "(,,a)"
LINE 1: select '(,,a)'::textrange;
               ^
DETAIL:  Too many commas.
select '(),a)'::textrange;
psql:sql/rangetypes.sql:16: ERROR:  malformed range literal: "(),a)"
LINE 1: select '(),a)'::textrange;
               ^
DETAIL:  Missing comma after lower bound.
select '(a,))'::textrange;
psql:sql/rangetypes.sql:17: ERROR:  malformed range literal: "(a,))"
LINE 1: select '(a,))'::textrange;
               ^
DETAIL:  Junk after right parenthesis or bracket.
select '(],a)'::textrange;
psql:sql/rangetypes.sql:18: ERROR:  malformed range literal: "(],a)"
LINE 1: select '(],a)'::textrange;
               ^
DETAIL:  Missing comma after lower bound.
select '(a,])'::textrange;
psql:sql/rangetypes.sql:19: ERROR:  malformed range literal: "(a,])"
LINE 1: select '(a,])'::textrange;
               ^
DETAIL:  Junk after right parenthesis or bracket.
select '[z,a]'::textrange;
psql:sql/rangetypes.sql:20: ERROR:  range lower bound must be less than or equal to range upper bound
LINE 1: select '[z,a]'::textrange;
               ^
-- should succeed
select '  empty  '::textrange;
 textrange 
-----------
 empty
(1 row)

select ' ( empty, empty )  '::textrange;
      textrange       
----------------------
 (" empty"," empty ")
(1 row)

select ' ( " a " " a ", " z " " z " )  '::textrange;
        textrange         
--------------------------
 ("  a   a ","  z   z  ")
(1 row)

select '(,z)'::textrange;
 textrange 
-----------
 (,z)
(1 row)

select '(a,)'::textrange;
 textrange 
-----------
 (a,)
(1 row)

select '[,z]'::textrange;
 textrange 
-----------
 (,z]
(1 row)

select '[a,]'::textrange;
 textrange 
-----------
 [a,)
(1 row)

select '(,)'::textrange;
 textrange 
-----------
 (,)
(1 row)

select '[ , ]'::textrange;
 textrange 
-----------
 [" "," "]
(1 row)

select '["",""]'::textrange;
 textrange 
-----------
 ["",""]
(1 row)

select '[",",","]'::textrange;
 textrange 
-----------
 [",",","]
(1 row)

select '["\\","\\"]'::textrange;
  textrange  
-------------
 ["\\","\\"]
(1 row)

select '(\\,a)'::textrange;
 textrange 
-----------
 ("\\",a)
(1 row)

select '((,z)'::textrange;
 textrange 
-----------
 ("(",z)
(1 row)

select '([,z)'::textrange;
 textrange 
-----------
 ("[",z)
(1 row)

select '(!,()'::textrange;
 textrange 
-----------
 (!,"(")
(1 row)

select '(!,[)'::textrange;
 textrange 
-----------
 (!,"[")
(1 row)

select '[a,a]'::textrange;
 textrange 
-----------
 [a,a]
(1 row)

-- these are allowed but normalize to empty:
select '[a,a)'::textrange;
 textrange 
-----------
 empty
(1 row)

select '(a,a]'::textrange;
 textrange 
-----------
 empty
(1 row)

select '(a,a)'::textrange;
 textrange 
-----------
 empty
(1 row)

select numrange(2.0, 1.0);
psql:sql/rangetypes.sql:46: ERROR:  range lower bound must be less than or equal to range upper bound
select numrange(2.0, 3.0) -|- numrange(3.0, 4.0);
 ?column? 
----------
 t
(1 row)

select range_adjacent(numrange(2.0, 3.0), numrange(3.1, 4.0));
 range_adjacent 
----------------
 f
(1 row)

select range_adjacent(numrange(2.0, 3.0), numrange(3.1, null));
 range_adjacent 
----------------
 f
(1 row)

select numrange(2.0, 3.0, '[]') -|- numrange(3.0, 4.0, '()');
 ?column? 
----------
 t
(1 row)

select numrange(1.0, 2.0) -|- numrange(2.0, 3.0,'[]');
 ?column? 
----------
 t
(1 row)

select range_adjacent(numrange(2.0, 3.0, '(]'), numrange(1.0, 2.0, '(]'));
 range_adjacent 
----------------
 t
(1 row)

select numrange(1.1, 3.3) <@ numrange(0.1,10.1);
 ?column? 
----------
 t
(1 row)

select numrange(0.1, 10.1) <@ numrange(1.1,3.3);
 ?column? 
----------
 f
(1 row)

select numrange(1.1, 2.2) - numrange(2.0, 3.0);
 ?column?  
-----------
 [1.1,2.0)
(1 row)

select numrange(1.1, 2.2) - numrange(2.2, 3.0);
 ?column?  
-----------
 [1.1,2.2)
(1 row)

select numrange(1.1, 2.2,'[]') - numrange(2.0, 3.0);
 ?column?  
-----------
 [1.1,2.0)
(1 row)

select range_minus(numrange(10.1,12.2,'[]'), numrange(110.0,120.2,'(]'));
 range_minus 
-------------
 [10.1,12.2]
(1 row)

select range_minus(numrange(10.1,12.2,'[]'), numrange(0.0,120.2,'(]'));
 range_minus 
-------------
 empty
(1 row)

select numrange(4.5, 5.5, '[]') && numrange(5.5, 6.5);
 ?column? 
----------
 t
(1 row)

select numrange(1.0, 2.0) << numrange(3.0, 4.0);
 ?column? 
----------
 t
(1 row)

select numrange(1.0, 3.0,'[]') << numrange(3.0, 4.0,'[]');
 ?column? 
----------
 f
(1 row)

select numrange(1.0, 3.0,'()') << numrange(3.0, 4.0,'()');
 ?column? 
----------
 t
(1 row)

select numrange(1.0, 2.0) >> numrange(3.0, 4.0);
 ?column? 
----------
 f
(1 row)

select numrange(3.0, 70.0) &< numrange(6.6, 100.0);
 ?column? 
----------
 t
(1 row)

select numrange(1.1, 2.2) < numrange(1.0, 200.2);
 ?column? 
----------
 f
(1 row)

select numrange(1.1, 2.2) < numrange(1.1, 1.2);
 ?column? 
----------
 f
(1 row)

select numrange(1.0, 2.0) + numrange(2.0, 3.0);
 ?column?  
-----------
 [1.0,3.0)
(1 row)

select numrange(1.0, 2.0) + numrange(1.5, 3.0);
 ?column?  
-----------
 [1.0,3.0)
(1 row)

select numrange(1.0, 2.0) + numrange(2.5, 3.0); -- should fail
psql:sql/rangetypes.sql:76: ERROR:  result of range union would not be contiguous
select range_merge(numrange(1.0, 2.0), numrange(2.0, 3.0));
 range_merge 
-------------
 [1.0,3.0)
(1 row)

select range_merge(numrange(1.0, 2.0), numrange(1.5, 3.0));
 range_merge 
-------------
 [1.0,3.0)
(1 row)

select range_merge(numrange(1.0, 2.0), numrange(2.5, 3.0)); -- shouldn't fail
 range_merge 
-------------
 [1.0,3.0)
(1 row)

select numrange(1.0, 2.0) * numrange(2.0, 3.0);
 ?column? 
----------
 empty
(1 row)

select numrange(1.0, 2.0) * numrange(1.5, 3.0);
 ?column?  
-----------
 [1.5,2.0)
(1 row)

select numrange(1.0, 2.0) * numrange(2.5, 3.0);
 ?column? 
----------
 empty
(1 row)

-- test canonical form for int4range
select int4range(1, 10, '[]');
 int4range 
-----------
 [1,11)
(1 row)

select int4range(1, 10, '[)');
 int4range 
-----------
 [1,10)
(1 row)

select int4range(1, 10, '(]');
 int4range 
-----------
 [2,11)
(1 row)

select int4range(1, 10, '()');
 int4range 
-----------
 [2,10)
(1 row)

select int4range(1, 2, '()');
 int4range 
-----------
 empty
(1 row)

-- test canonical form for daterange
select daterange('2000-01-10'::date, '2000-01-20'::date, '[]');
        daterange        
-------------------------
 [2000-01-10,2000-01-21)
(1 row)

select daterange('2000-01-10'::date, '2000-01-20'::date, '[)');
        daterange        
-------------------------
 [2000-01-10,2000-01-20)
(1 row)

select daterange('2000-01-10'::date, '2000-01-20'::date, '(]');
        daterange        
-------------------------
 [2000-01-11,2000-01-21)
(1 row)

select daterange('2000-01-10'::date, '2000-01-20'::date, '()');
        daterange        
-------------------------
 [2000-01-11,2000-01-20)
(1 row)

select daterange('2000-01-10'::date, '2000-01-11'::date, '()');
 daterange 
-----------
 empty
(1 row)

select daterange('2000-01-10'::date, '2000-01-11'::date, '(]');
        daterange        
-------------------------
 [2000-01-11,2000-01-12)
(1 row)

select daterange('-infinity'::date, '2000-01-01'::date, '()');
       daterange        
------------------------
 (-infinity,2000-01-01)
(1 row)

select daterange('-infinity'::date, '2000-01-01'::date, '[)');
       daterange        
------------------------
 [-infinity,2000-01-01)
(1 row)

select daterange('2000-01-01'::date, 'infinity'::date, '[)');
       daterange       
-----------------------
 [2000-01-01,infinity)
(1 row)

select daterange('2000-01-01'::date, 'infinity'::date, '[]');
       daterange       
-----------------------
 [2000-01-01,infinity]
(1 row)

-- test elem <@ range operator
create table test_range_elem(i int4);
CREATE TABLE
create index test_range_elem_idx on test_range_elem (i);
CREATE INDEX
insert into test_range_elem select i from generate_series(1,100) i;
INSERT 0 100
-- select count(*) from test_range_elem where i <@ int4range(10,50);
drop table test_range_elem;
DROP TABLE
-- test bigint ranges
select int8range(10000000000::int8, 20000000000::int8,'(]');
         int8range         
---------------------------
 [10000000001,20000000001)
(1 row)

-- test tstz ranges
set timezone to '-08';
SET
select '[2010-01-01 01:00:00 -05, 2010-01-01 02:00:00 -08)'::tstzrange;
                      tstzrange                      
-----------------------------------------------------
 ["2009-12-31 22:00:00-08","2010-01-01 02:00:00-08")
(1 row)

-- should fail
select '[2010-01-01 01:00:00 -08, 2010-01-01 02:00:00 -05)'::tstzrange;
psql:sql/rangetypes.sql:120: ERROR:  range lower bound must be less than or equal to range upper bound
LINE 1: select '[2010-01-01 01:00:00 -08, 2010-01-01 02:00:00 -05)':...
               ^
set timezone to default;
SET
--
-- Test multiple range types over the same subtype
--
create type textrange1 as range(subtype=text, collation="C");
CREATE TYPE
create type textrange2 as range(subtype=text, collation="C");
CREATE TYPE
select textrange1('a','Z') @> 'b'::text;
psql:sql/rangetypes.sql:130: ERROR:  range lower bound must be less than or equal to range upper bound
select textrange2('a','z') @> 'b'::text;
 ?column? 
----------
 t
(1 row)

drop type textrange1;
DROP TYPE
drop type textrange2;
DROP TYPE
--
-- Test polymorphic type system
--
create function anyarray_anyrange_func(a anyarray, r anyrange)
  returns anyelement as 'select $1[1] + lower($2);' language sql;
CREATE FUNCTION
select anyarray_anyrange_func(ARRAY[1,2], int4range(10,20));
 anyarray_anyrange_func 
------------------------
                     11
(1 row)

-- should fail
select anyarray_anyrange_func(ARRAY[1,2], numrange(10,20));
psql:sql/rangetypes.sql:146: ERROR:  function anyarray_anyrange_func(integer[], numrange) does not exist
LINE 1: select anyarray_anyrange_func(ARRAY[1,2], numrange(10,20));
               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
drop function anyarray_anyrange_func(anyarray, anyrange);
DROP FUNCTION
-- should fail
create function bogus_func(anyelement)
  returns anyrange as 'select int4range(1,10)' language sql;
psql:sql/rangetypes.sql:152: ERROR:  cannot determine result data type
DETAIL:  A function returning "anyrange" must have at least one "anyrange" argument.
-- should fail
create function bogus_func(int)
  returns anyrange as 'select int4range(1,10)' language sql;
psql:sql/rangetypes.sql:156: ERROR:  cannot determine result data type
DETAIL:  A function returning a polymorphic type must have at least one polymorphic argument.
create function range_add_bounds(anyrange)
  returns anyelement as 'select lower($1) + upper($1)' language sql;
CREATE FUNCTION
select range_add_bounds(int4range(1, 17));
 range_add_bounds 
------------------
               18
(1 row)

select range_add_bounds(numrange(1.0001, 123.123));
 range_add_bounds 
------------------
         124.1231
(1 row)

create function rangetypes_sql(q anyrange, b anyarray, out c anyelement)
  as $$ select upper($1) + $2[1] $$
  language sql;
CREATE FUNCTION
select rangetypes_sql(int4range(1,10), ARRAY[2,20]);
 rangetypes_sql 
----------------
             12
(1 row)

select rangetypes_sql(numrange(1,10), ARRAY[2,20]);  -- match failure
psql:sql/rangetypes.sql:169: ERROR:  function rangetypes_sql(numrange, integer[]) does not exist
LINE 1: select rangetypes_sql(numrange(1,10), ARRAY[2,20]);
               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
drop function range_add_bounds(anyrange);
DROP FUNCTION
drop function rangetypes_sql(anyrange, anyarray, anyelement);
psql:sql/rangetypes.sql:172: ERROR:  function rangetypes_sql(anyrange, anyarray, anyelement) does not exist
--
-- Arrays of ranges
--
select ARRAY[numrange(1.1, 1.2), numrange(12.3, 155.5)];
            array             
------------------------------
 {"[1.1,1.2)","[12.3,155.5)"}
(1 row)

--
-- Ranges of arrays
--
create type arrayrange as range (subtype=int4[]);
CREATE TYPE
select arrayrange(ARRAY[1,2], ARRAY[2,1]);
    arrayrange     
-------------------
 ["{1,2}","{2,1}")
(1 row)

select arrayrange(ARRAY[2,1], ARRAY[1,2]);  -- fail
psql:sql/rangetypes.sql:187: ERROR:  range lower bound must be less than or equal to range upper bound
select array[1,1] <@ arrayrange(array[1,2], array[2,1]);
 ?column? 
----------
 f
(1 row)

select array[1,3] <@ arrayrange(array[1,2], array[2,1]);
 ?column? 
----------
 t
(1 row)

drop type arrayrange;
DROP TYPE
--
-- Ranges of composites
--
create type two_ints as (a int, b int);
CREATE TYPE
create type two_ints_range as range (subtype = two_ints);
CREATE TYPE
-- with force_parallel_mode on, this exercises tqueue.c's range remapping
select *, row_to_json(upper(t)) as u from
  (values (two_ints_range(row(1,2), row(3,4))),
          (two_ints_range(row(5,6), row(7,8)))) v(t);  
         t         |       u       
-------------------+---------------
 ["(1,2)","(3,4)") | {"a":3,"b":4}
 ["(5,6)","(7,8)") | {"a":7,"b":8}
(2 rows)

drop type two_ints cascade;
psql:sql/rangetypes.sql:204: NOTICE:  drop cascades to type two_ints_range
DROP TYPE
--
-- Check behavior when subtype lacks a hash function
--
create type cashrange as range (subtype = money);
CREATE TYPE
set enable_sort = off;  -- try to make it pick a hash setop implementation
SET
select '(2,5)'::cashrange except select '(5,6)'::cashrange;
   cashrange   
---------------
 ($2.00,$5.00)
(1 row)

reset enable_sort;
RESET
drop type cashrange;
DROP TYPE
--
-- OUT/INOUT/TABLE functions
--
create function outparam_succeed(i anyrange, out r anyrange, out t text)
  as $$ select $1, 'foo'::text $$ language sql;
CREATE FUNCTION
select * from outparam_succeed(int4range(1,2));
   r   |  t  
-------+-----
 [1,2) | foo
(1 row)

drop function outparam_succeed(anyrange, anyrange, text);
psql:sql/rangetypes.sql:227: ERROR:  function outparam_succeed(anyrange, anyrange, text) does not exist
create function inoutparam_succeed(out i anyelement, inout r anyrange)
  as $$ select upper($1), $1 $$ language sql;
CREATE FUNCTION
select * from inoutparam_succeed(int4range(1,2));
 i |   r   
---+-------
 2 | [1,2)
(1 row)

drop function inoutparam_succeed(anyelement, anyrange);
psql:sql/rangetypes.sql:233: ERROR:  function inoutparam_succeed(anyelement, anyrange) does not exist
create function table_succeed(i anyelement, r anyrange) returns table(i anyelement, r anyrange)
  as $$ select $1, $2 $$ language sql;
CREATE FUNCTION
select * from table_succeed(123, int4range(1,11));
  i  |   r    
-----+--------
 123 | [1,11)
(1 row)

drop function table_succeed(anyelement, anyrange);
DROP FUNCTION
-- should fail
create function outparam_fail(i anyelement, out r anyrange, out t text)
  as $$ select '[1,10]', 'foo' $$ language sql;
psql:sql/rangetypes.sql:243: ERROR:  cannot determine result data type
DETAIL:  A function returning "anyrange" must have at least one "anyrange" argument.
--should fail
create function inoutparam_fail(inout i anyelement, out r anyrange)
  as $$ select $1, '[1,10]' $$ language sql;
psql:sql/rangetypes.sql:247: ERROR:  cannot determine result data type
DETAIL:  A function returning "anyrange" must have at least one "anyrange" argument.
--should fail
create function table_fail(i anyelement) returns table(i anyelement, r anyrange)
  as $$ select $1, '[1,10]' $$ language sql;
psql:sql/rangetypes.sql:251: ERROR:  cannot determine result data type
DETAIL:  A function returning "anyrange" must have at least one "anyrange" argument.
drop type textrange;
DROP TYPE
