--
-- PARTITION_AGGREGATE
-- Test partitionwise aggregation on partitioned tables
--
-- Enable partitionwise aggregate, which by default is disabled.
SET enable_partitionwise_aggregate TO true;
SET
-- Enable partitionwise join, which by default is disabled.
SET enable_partitionwise_join TO true;
SET
-- Disable parallel plans.
SET max_parallel_workers_per_gather TO 0;
SET
--
-- Tests for list partitioned tables.
--
drop table if exists pagg_tab;
psql:sql/partition_aggregate.sql:16: NOTICE:  table "pagg_tab" does not exist, skipping
DROP TABLE
CREATE TABLE pagg_tab (a int, b int, c text, d int) PARTITION BY LIST(c);
CREATE TABLE
CREATE TABLE pagg_tab_p1 PARTITION OF pagg_tab FOR VALUES IN ('0000', '0001', '0002', '0003');
CREATE TABLE
CREATE TABLE pagg_tab_p2 PARTITION OF pagg_tab FOR VALUES IN ('0004', '0005', '0006', '0007');
CREATE TABLE
CREATE TABLE pagg_tab_p3 PARTITION OF pagg_tab FOR VALUES IN ('0008', '0009', '0010', '0011');
CREATE TABLE
INSERT INTO pagg_tab SELECT i % 20, i % 30, to_char(i % 12, 'FM0000'), i % 30 FROM generate_series(0, 2999) i;
INSERT 0 3000
-- When GROUP BY clause matches; full aggregation is performed for each partition.
EXPLAIN (COSTS OFF)
SELECT c, sum(a), avg(b)::numeric(64,4), count(*), min(a), max(b) FROM pagg_tab GROUP BY c HAVING avg(d) < 15 ORDER BY 1, 2, 3;

SELECT c, sum(a), avg(b)::numeric(64,4), count(*), min(a), max(b) FROM pagg_tab GROUP BY c HAVING avg(d) < 15 ORDER BY 1, 2, 3;
  c   | sum  |   avg   | count | min | max 
------+------+---------+-------+-----+-----
 0000 | 2000 | 12.0000 |   250 |   0 |  24
 0001 | 2250 | 13.0000 |   250 |   1 |  25
 0002 | 2500 | 14.0000 |   250 |   2 |  26
 0006 | 2500 | 12.0000 |   250 |   2 |  24
 0007 | 2750 | 13.0000 |   250 |   3 |  25
 0008 | 2000 | 14.0000 |   250 |   0 |  26
(6 rows)

-- When GROUP BY clause does not match; partial aggregation is performed for each partition.
EXPLAIN (COSTS OFF)
SELECT a, sum(b), avg(b), count(*), min(a), max(b) FROM pagg_tab GROUP BY a HAVING avg(d) < 15 ORDER BY 1, 2, 3;

SELECT a, sum(b), avg(b), count(*), min(a), max(b) FROM pagg_tab GROUP BY a HAVING avg(d) < 15 ORDER BY 1, 2, 3;
 a  | sum  |         avg         | count | min | max 
----+------+---------------------+-------+-----+-----
  0 | 1500 | 10.0000000000000000 |   150 |   0 |  20
  1 | 1650 | 11.0000000000000000 |   150 |   1 |  21
  2 | 1800 | 12.0000000000000000 |   150 |   2 |  22
  3 | 1950 | 13.0000000000000000 |   150 |   3 |  23
  4 | 2100 | 14.0000000000000000 |   150 |   4 |  24
 10 | 1500 | 10.0000000000000000 |   150 |  10 |  20
 11 | 1650 | 11.0000000000000000 |   150 |  11 |  21
 12 | 1800 | 12.0000000000000000 |   150 |  12 |  22
 13 | 1950 | 13.0000000000000000 |   150 |  13 |  23
 14 | 2100 | 14.0000000000000000 |   150 |  14 |  24
(10 rows)

-- Check with multiple columns in GROUP BY
EXPLAIN (COSTS OFF)
SELECT a, c, count(*) FROM pagg_tab GROUP BY a, c;

-- Check with multiple columns in GROUP BY, order in GROUP BY is reversed
EXPLAIN (COSTS OFF)
SELECT a, c, count(*) FROM pagg_tab GROUP BY c, a;

-- Check with multiple columns in GROUP BY, order in target-list is reversed
EXPLAIN (COSTS OFF)
SELECT c, a, count(*) FROM pagg_tab GROUP BY a, c;

-- Test when input relation for grouping is dummy
EXPLAIN (COSTS OFF)
SELECT c, sum(a) FROM pagg_tab WHERE 1 = 2 GROUP BY c;

SELECT c, sum(a) FROM pagg_tab WHERE 1 = 2 GROUP BY c;
 c | sum 
---+-----
(0 rows)

EXPLAIN (COSTS OFF)
SELECT c, sum(a) FROM pagg_tab WHERE c = 'x' GROUP BY c;

SELECT c, sum(a) FROM pagg_tab WHERE c = 'x' GROUP BY c;
 c | sum 
---+-----
(0 rows)

-- Test GroupAggregate paths by disabling hash aggregates.
SET enable_hashagg TO false;
SET
-- When GROUP BY clause matches full aggregation is performed for each partition.
EXPLAIN (COSTS OFF)
SELECT c, sum(a), avg(b)::numeric(64,4), count(*) FROM pagg_tab GROUP BY 1 HAVING avg(d) < 15 ORDER BY 1, 2, 3;

SELECT c, sum(a), avg(b)::numeric(64,4), count(*) FROM pagg_tab GROUP BY 1 HAVING avg(d) < 15 ORDER BY 1, 2, 3;
  c   | sum  |   avg   | count 
------+------+---------+-------
 0000 | 2000 | 12.0000 |   250
 0001 | 2250 | 13.0000 |   250
 0002 | 2500 | 14.0000 |   250
 0006 | 2500 | 12.0000 |   250
 0007 | 2750 | 13.0000 |   250
 0008 | 2000 | 14.0000 |   250
(6 rows)

-- When GROUP BY clause does not match; partial aggregation is performed for each partition.
EXPLAIN (COSTS OFF)
SELECT a, sum(b), avg(b), count(*) FROM pagg_tab GROUP BY 1 HAVING avg(d) < 15 ORDER BY 1, 2, 3;

SELECT a, sum(b), avg(b), count(*) FROM pagg_tab GROUP BY 1 HAVING avg(d) < 15 ORDER BY 1, 2, 3;
 a  | sum  |         avg         | count 
----+------+---------------------+-------
  0 | 1500 | 10.0000000000000000 |   150
  1 | 1650 | 11.0000000000000000 |   150
  2 | 1800 | 12.0000000000000000 |   150
  3 | 1950 | 13.0000000000000000 |   150
  4 | 2100 | 14.0000000000000000 |   150
 10 | 1500 | 10.0000000000000000 |   150
 11 | 1650 | 11.0000000000000000 |   150
 12 | 1800 | 12.0000000000000000 |   150
 13 | 1950 | 13.0000000000000000 |   150
 14 | 2100 | 14.0000000000000000 |   150
(10 rows)

-- Test partitionwise grouping without any aggregates
EXPLAIN (COSTS OFF)
SELECT c FROM pagg_tab GROUP BY c ORDER BY 1;

SELECT c FROM pagg_tab GROUP BY c ORDER BY 1;
  c   
------
 0000
 0001
 0002
 0003
 0004
 0005
 0006
 0007
 0008
 0009
 0010
 0011
(12 rows)

EXPLAIN (COSTS OFF)
SELECT a FROM pagg_tab WHERE a < 3 GROUP BY a ORDER BY 1;

SELECT a FROM pagg_tab WHERE a < 3 GROUP BY a ORDER BY 1;
 a 
---
 0
 1
 2
(3 rows)

RESET enable_hashagg;
RESET
-- ROLLUP, partitionwise aggregation does not apply
EXPLAIN (COSTS OFF)
SELECT c, sum(a) FROM pagg_tab GROUP BY rollup(c) ORDER BY 1, 2;

-- ORDERED SET within the aggregate.
-- Full aggregation; since all the rows that belong to the same group come
-- from the same partition, having an ORDER BY within the aggregate doesn't
-- make any difference.
EXPLAIN (COSTS OFF)
SELECT c, sum(b order by a) FROM pagg_tab GROUP BY c ORDER BY 1, 2;

-- Since GROUP BY clause does not match with PARTITION KEY; we need to do
-- partial aggregation. However, ORDERED SET are not partial safe and thus
-- partitionwise aggregation plan is not generated.
EXPLAIN (COSTS OFF)
SELECT a, sum(b order by a) FROM pagg_tab GROUP BY a ORDER BY 1, 2;
psql:sql/partition_aggregate.sql:88: ERROR:  could not find pathkey item to sort
-- JOIN query
drop table if exists pagg_tab1;
psql:sql/partition_aggregate.sql:92: NOTICE:  table "pagg_tab1" does not exist, skipping
DROP TABLE
CREATE TABLE pagg_tab1(x int, y int) PARTITION BY RANGE(x);
CREATE TABLE
CREATE TABLE pagg_tab1_p1 PARTITION OF pagg_tab1 FOR VALUES FROM (0) TO (10);
CREATE TABLE
CREATE TABLE pagg_tab1_p2 PARTITION OF pagg_tab1 FOR VALUES FROM (10) TO (20);
CREATE TABLE
CREATE TABLE pagg_tab1_p3 PARTITION OF pagg_tab1 FOR VALUES FROM (20) TO (30);
CREATE TABLE
drop table if exists pagg_tab2;
psql:sql/partition_aggregate.sql:98: NOTICE:  table "pagg_tab2" does not exist, skipping
DROP TABLE
CREATE TABLE pagg_tab2(x int, y int) PARTITION BY RANGE(y);
CREATE TABLE
CREATE TABLE pagg_tab2_p1 PARTITION OF pagg_tab2 FOR VALUES FROM (0) TO (10);
CREATE TABLE
CREATE TABLE pagg_tab2_p2 PARTITION OF pagg_tab2 FOR VALUES FROM (10) TO (20);
CREATE TABLE
CREATE TABLE pagg_tab2_p3 PARTITION OF pagg_tab2 FOR VALUES FROM (20) TO (30);
CREATE TABLE
INSERT INTO pagg_tab1 SELECT i % 30, i % 20 FROM generate_series(0, 299, 2) i;
INSERT 0 150
INSERT INTO pagg_tab2 SELECT i % 20, i % 30 FROM generate_series(0, 299, 3) i;
INSERT 0 100
-- When GROUP BY clause matches; full aggregation is performed for each partition.
EXPLAIN (COSTS OFF)
SELECT t1.x, sum(t1.y), count(*) FROM pagg_tab1 t1, pagg_tab2 t2 WHERE t1.x = t2.y GROUP BY t1.x ORDER BY 1, 2, 3;

SELECT t1.x, sum(t1.y), count(*) FROM pagg_tab1 t1, pagg_tab2 t2 WHERE t1.x = t2.y GROUP BY t1.x ORDER BY 1, 2, 3;
 x  | sum  | count 
----+------+-------
  0 |  500 |   100
  6 | 1100 |   100
 12 |  700 |   100
 18 | 1300 |   100
 24 |  900 |   100
(5 rows)

-- Check with whole-row reference; partitionwise aggregation does not apply
EXPLAIN (COSTS OFF)
SELECT t1.x, sum(t1.y), count(t1) FROM pagg_tab1 t1, pagg_tab2 t2 WHERE t1.x = t2.y GROUP BY t1.x ORDER BY 1, 2, 3;

SELECT t1.x, sum(t1.y), count(t1) FROM pagg_tab1 t1, pagg_tab2 t2 WHERE t1.x = t2.y GROUP BY t1.x ORDER BY 1, 2, 3;
 x  | sum  | count 
----+------+-------
  0 |  500 |   100
  6 | 1100 |   100
 12 |  700 |   100
 18 | 1300 |   100
 24 |  900 |   100
(5 rows)

-- GROUP BY having other matching key
EXPLAIN (COSTS OFF)
SELECT t2.y, sum(t1.y), count(*) FROM pagg_tab1 t1, pagg_tab2 t2 WHERE t1.x = t2.y GROUP BY t2.y ORDER BY 1, 2, 3;

-- When GROUP BY clause does not match; partial aggregation is performed for each partition.
-- Also test GroupAggregate paths by disabling hash aggregates.
SET enable_hashagg TO false;
SET
EXPLAIN (COSTS OFF)
SELECT t1.y, sum(t1.x), count(*) FROM pagg_tab1 t1, pagg_tab2 t2 WHERE t1.x = t2.y GROUP BY t1.y HAVING avg(t1.x) > 10 ORDER BY 1, 2, 3;

SELECT t1.y, sum(t1.x), count(*) FROM pagg_tab1 t1, pagg_tab2 t2 WHERE t1.x = t2.y GROUP BY t1.y HAVING avg(t1.x) > 10 ORDER BY 1, 2, 3;
 y  | sum  | count 
----+------+-------
  2 |  600 |    50
  4 | 1200 |    50
  8 |  900 |    50
 12 |  600 |    50
 14 | 1200 |    50
 18 |  900 |    50
(6 rows)

RESET enable_hashagg;
RESET
-- Check with LEFT/RIGHT/FULL OUTER JOINs which produces NULL values for
-- aggregation
-- LEFT JOIN, should produce partial partitionwise aggregation plan as
-- GROUP BY is on nullable column
EXPLAIN (COSTS OFF)
SELECT b.y, sum(a.y) FROM pagg_tab1 a LEFT JOIN pagg_tab2 b ON a.x = b.y GROUP BY b.y ORDER BY 1 NULLS LAST;

SELECT b.y, sum(a.y) FROM pagg_tab1 a LEFT JOIN pagg_tab2 b ON a.x = b.y GROUP BY b.y ORDER BY 1 NULLS LAST;
 y  | sum  
----+------
  0 |  500
  6 | 1100
 12 |  700
 18 | 1300
 24 |  900
    |  900
(6 rows)

-- RIGHT JOIN, should produce full partitionwise aggregation plan as
-- GROUP BY is on non-nullable column
EXPLAIN (COSTS OFF)
SELECT b.y, sum(a.y) FROM pagg_tab1 a RIGHT JOIN pagg_tab2 b ON a.x = b.y GROUP BY b.y ORDER BY 1 NULLS LAST;

SELECT b.y, sum(a.y) FROM pagg_tab1 a RIGHT JOIN pagg_tab2 b ON a.x = b.y GROUP BY b.y ORDER BY 1 NULLS LAST;
 y  | sum  
----+------
  0 |  500
  3 |     
  6 | 1100
  9 |     
 12 |  700
 15 |     
 18 | 1300
 21 |     
 24 |  900
 27 |     
(10 rows)

-- FULL JOIN, should produce partial partitionwise aggregation plan as
-- GROUP BY is on nullable column
EXPLAIN (COSTS OFF)
SELECT a.x, sum(b.x) FROM pagg_tab1 a FULL OUTER JOIN pagg_tab2 b ON a.x = b.y GROUP BY a.x ORDER BY 1 NULLS LAST;

SELECT a.x, sum(b.x) FROM pagg_tab1 a FULL OUTER JOIN pagg_tab2 b ON a.x = b.y GROUP BY a.x ORDER BY 1 NULLS LAST;
 x  | sum  
----+------
  0 |  500
  2 |     
  4 |     
  6 | 1100
  8 |     
 10 |     
 12 |  700
 14 |     
 16 |     
 18 | 1300
 20 |     
 22 |     
 24 |  900
 26 |     
 28 |     
    |  500
(16 rows)

-- LEFT JOIN, with dummy relation on right side, ideally
-- should produce full partitionwise aggregation plan as GROUP BY is on
-- non-nullable columns.
-- But right now we are unable to do partitionwise join in this case.
EXPLAIN (COSTS OFF)
SELECT a.x, b.y, count(*) FROM (SELECT * FROM pagg_tab1 WHERE x < 20) a LEFT JOIN (SELECT * FROM pagg_tab2 WHERE y > 10) b ON a.x = b.y WHERE a.x > 5 or b.y < 20  GROUP BY a.x, b.y ORDER BY 1, 2;

-- will crash: SELECT a.x, b.y, count(*) FROM (SELECT * FROM pagg_tab1 WHERE x < 20) a LEFT JOIN (SELECT * FROM pagg_tab2 WHERE y > 10) b ON a.x = b.y WHERE a.x > 5 or b.y < 20  GROUP BY a.x, b.y ORDER BY 1, 2;
-- FULL JOIN, with dummy relations on both sides, ideally
-- should produce partial partitionwise aggregation plan as GROUP BY is on
-- nullable columns.
-- But right now we are unable to do partitionwise join in this case.
EXPLAIN (COSTS OFF)
SELECT a.x, b.y, count(*) FROM (SELECT * FROM pagg_tab1 WHERE x < 20) a FULL JOIN (SELECT * FROM pagg_tab2 WHERE y > 10) b ON a.x = b.y WHERE a.x > 5 or b.y < 20  GROUP BY a.x, b.y ORDER BY 1, 2;

SELECT a.x, b.y, count(*) FROM (SELECT * FROM pagg_tab1 WHERE x < 20) a FULL JOIN (SELECT * FROM pagg_tab2 WHERE y > 10) b ON a.x = b.y WHERE a.x > 5 or b.y < 20 GROUP BY a.x, b.y ORDER BY 1, 2;
 x  | y  | count 
----+----+-------
  6 |    |    10
  8 |    |    10
 10 |    |    10
 12 | 12 |   100
 14 |    |    10
 16 |    |    10
 18 | 18 |   100
    | 15 |    10
(8 rows)

-- Empty join relation because of empty outer side, no partitionwise agg plan
EXPLAIN (COSTS OFF)
SELECT a.x, a.y, count(*) FROM (SELECT * FROM pagg_tab1 WHERE x = 1 AND x = 2) a LEFT JOIN pagg_tab2 b ON a.x = b.y GROUP BY a.x, a.y ORDER BY 1, 2;

SELECT a.x, a.y, count(*) FROM (SELECT * FROM pagg_tab1 WHERE x = 1 AND x = 2) a LEFT JOIN pagg_tab2 b ON a.x = b.y GROUP BY a.x, a.y ORDER BY 1, 2;
 x | y | count 
---+---+-------
(0 rows)

-- Partition by multiple columns
drop table if exists pagg_tab_m;
psql:sql/partition_aggregate.sql:174: NOTICE:  table "pagg_tab_m" does not exist, skipping
DROP TABLE
CREATE TABLE pagg_tab_m (a int, b int, c int) PARTITION BY RANGE(a, ((a+b)/2));
CREATE TABLE
CREATE TABLE pagg_tab_m_p1 PARTITION OF pagg_tab_m FOR VALUES FROM (0, 0) TO (10, 10);
CREATE TABLE
CREATE TABLE pagg_tab_m_p2 PARTITION OF pagg_tab_m FOR VALUES FROM (10, 10) TO (20, 20);
CREATE TABLE
CREATE TABLE pagg_tab_m_p3 PARTITION OF pagg_tab_m FOR VALUES FROM (20, 20) TO (30, 30);
CREATE TABLE
INSERT INTO pagg_tab_m SELECT i % 30, i % 40, i % 50 FROM generate_series(0, 2999) i;
INSERT 0 3000
-- Partial aggregation as GROUP BY clause does not match with PARTITION KEY
EXPLAIN (COSTS OFF)
SELECT a, sum(b), avg(c), count(*) FROM pagg_tab_m GROUP BY a HAVING avg(c) < 22 ORDER BY 1, 2, 3;

SELECT a, sum(b), avg(c), count(*) FROM pagg_tab_m GROUP BY a HAVING avg(c) < 22 ORDER BY 1, 2, 3;
 a  | sum  |         avg         | count 
----+------+---------------------+-------
  0 | 1500 | 20.0000000000000000 |   100
  1 | 1600 | 21.0000000000000000 |   100
 10 | 1500 | 20.0000000000000000 |   100
 11 | 1600 | 21.0000000000000000 |   100
 20 | 1500 | 20.0000000000000000 |   100
 21 | 1600 | 21.0000000000000000 |   100
(6 rows)

-- Full aggregation as GROUP BY clause matches with PARTITION KEY
-- EXPLAIN (COSTS OFF) [#69]
-- SELECT a, sum(b), avg(c), count(*) FROM pagg_tab_m GROUP BY a, (a+b)/2 HAVING sum(b) < 50 ORDER BY 1, 2, 3;
SELECT a, sum(b), avg(c)::numeric(64,4), count(*) FROM pagg_tab_m GROUP BY a, (a+b)/2 HAVING sum(b) < 50 ORDER BY 1, 2, 3;
 a  | sum |   avg   | count 
----+-----+---------+-------
  0 |   0 | 20.0000 |    25
  1 |  25 | 21.0000 |    25
 10 |   0 | 20.0000 |    25
 11 |  25 | 21.0000 |    25
 20 |   0 | 20.0000 |    25
 21 |  25 | 21.0000 |    25
(6 rows)

-- Full aggregation as PARTITION KEY is part of GROUP BY clause
--EXPLAIN (COSTS OFF) [#69]
--SELECT a, c, sum(b), avg(c), count(*) FROM pagg_tab_m GROUP BY (a+b)/2, 2, 1 HAVING sum(b) = 50 AND avg(c) > 25 ORDER BY 1, 2, 3;
SELECT a, c, sum(b), avg(c)::numeric(64,4), count(*) FROM pagg_tab_m GROUP BY (a+b)/2, 2, 1 HAVING sum(b) = 50 AND avg(c) > 25 ORDER BY 1, 2, 3;
 a  | c  | sum |   avg   | count 
----+----+-----+---------+-------
  0 | 30 |  50 | 30.0000 |     5
  0 | 40 |  50 | 40.0000 |     5
 10 | 30 |  50 | 30.0000 |     5
 10 | 40 |  50 | 40.0000 |     5
 20 | 30 |  50 | 30.0000 |     5
 20 | 40 |  50 | 40.0000 |     5
(6 rows)

-- Test with multi-level partitioning scheme
drop table if exists pagg_tab_ml;
psql:sql/partition_aggregate.sql:199: NOTICE:  table "pagg_tab_ml" does not exist, skipping
DROP TABLE
CREATE TABLE pagg_tab_ml (a int, b int, c text) PARTITION BY RANGE(a);
CREATE TABLE
CREATE TABLE pagg_tab_ml_p1 PARTITION OF pagg_tab_ml FOR VALUES FROM (0) TO (10);
CREATE TABLE
CREATE TABLE pagg_tab_ml_p2 PARTITION OF pagg_tab_ml FOR VALUES FROM (10) TO (20) PARTITION BY LIST (c);
CREATE TABLE
CREATE TABLE pagg_tab_ml_p2_s1 PARTITION OF pagg_tab_ml_p2 FOR VALUES IN ('0000', '0001');
CREATE TABLE
CREATE TABLE pagg_tab_ml_p2_s2 PARTITION OF pagg_tab_ml_p2 FOR VALUES IN ('0002', '0003');
CREATE TABLE
-- This level of partitioning has different column positions than the parent
CREATE TABLE pagg_tab_ml_p3 PARTITION OF pagg_tab_ml FOR VALUES FROM (20) TO (30) PARTITION BY RANGE (b);
CREATE TABLE
CREATE TABLE pagg_tab_ml_p3_s1 PARTITION OF pagg_tab_ml_p3 FOR VALUES FROM (0) TO (0);
psql:sql/partition_aggregate.sql:208: ERROR:  empty range bound specified for partition "pagg_tab_ml_p3_s1"
DETAIL:  Specified lower bound (0) is greater than or equal to upper bound (0).
CREATE TABLE pagg_tab_ml_p3_s2 PARTITION OF pagg_tab_ml_p3 FOR VALUES FROM (5) TO (10);
CREATE TABLE
INSERT INTO pagg_tab_ml SELECT i % 30, i % 10, to_char(i % 4, 'FM0000') FROM generate_series(0, 29999) i;
psql:sql/partition_aggregate.sql:211: ERROR:  no partition of relation "pagg_tab_ml_p3" found for row
DETAIL:  Partition key of the failing row contains (b) = (0).
-- For Parallel Append
SET max_parallel_workers_per_gather TO 2;
SET
-- Full aggregation at level 1 as GROUP BY clause matches with PARTITION KEY
-- for level 1 only. For subpartitions, GROUP BY clause does not match with
-- PARTITION KEY, but still we do not see a partial aggregation as array_agg()
-- is not partial agg safe.
EXPLAIN (COSTS OFF)
SELECT a, sum(b), array_agg(distinct c), count(*) FROM pagg_tab_ml GROUP BY a HAVING avg(b) < 3 ORDER BY 1, 2, 3;

SELECT a, sum(b), array_agg(distinct c), count(*) FROM pagg_tab_ml GROUP BY a HAVING avg(b) < 3 ORDER BY 1, 2, 3;
 a | sum | array_agg | count 
---+-----+-----------+-------
(0 rows)

-- Without ORDER BY clause, to test Gather at top-most path
EXPLAIN (COSTS OFF)
SELECT a, sum(b), array_agg(distinct c), count(*) FROM pagg_tab_ml GROUP BY a HAVING avg(b) < 3;

-- Full aggregation at level 1 as GROUP BY clause matches with PARTITION KEY
-- for level 1 only. For subpartitions, GROUP BY clause does not match with
-- PARTITION KEY, thus we will have a partial aggregation for them.
EXPLAIN (COSTS OFF)
SELECT a, sum(b), count(*) FROM pagg_tab_ml GROUP BY a HAVING avg(b) < 3 ORDER BY 1, 2, 3;

SELECT a, sum(b), count(*) FROM pagg_tab_ml GROUP BY a HAVING avg(b) < 3 ORDER BY 1, 2, 3;
 a | sum | count 
---+-----+-------
(0 rows)

-- Partial aggregation at all levels as GROUP BY clause does not match with
-- PARTITION KEY
EXPLAIN (COSTS OFF)
SELECT b, sum(a), count(*) FROM pagg_tab_ml GROUP BY b ORDER BY 1, 2, 3;

SELECT b, sum(a), count(*) FROM pagg_tab_ml GROUP BY b HAVING avg(a) < 15 ORDER BY 1, 2, 3;
 b | sum | count 
---+-----+-------
(0 rows)

-- Full aggregation at all levels as GROUP BY clause matches with PARTITION KEY
EXPLAIN (COSTS OFF)
SELECT a, sum(b), count(*) FROM pagg_tab_ml GROUP BY a, b, c HAVING avg(b) > 7 ORDER BY 1, 2, 3;

SELECT a, sum(b), count(*) FROM pagg_tab_ml GROUP BY a, b, c HAVING avg(b) > 7 ORDER BY 1, 2, 3;
 a | sum | count 
---+-----+-------
(0 rows)

-- Parallelism within partitionwise aggregates
SET min_parallel_table_scan_size TO '8kB';
SET
SET parallel_setup_cost TO 0;
SET
-- Full aggregation at level 1 as GROUP BY clause matches with PARTITION KEY
-- for level 1 only. For subpartitions, GROUP BY clause does not match with
-- PARTITION KEY, thus we will have a partial aggregation for them.
EXPLAIN (COSTS OFF)
SELECT a, sum(b), count(*) FROM pagg_tab_ml GROUP BY a HAVING avg(b) < 3 ORDER BY 1, 2, 3;

SELECT a, sum(b), count(*) FROM pagg_tab_ml GROUP BY a HAVING avg(b) < 3 ORDER BY 1, 2, 3;
 a | sum | count 
---+-----+-------
(0 rows)

-- Partial aggregation at all levels as GROUP BY clause does not match with
-- PARTITION KEY
EXPLAIN (COSTS OFF)
SELECT b, sum(a), count(*) FROM pagg_tab_ml GROUP BY b ORDER BY 1, 2, 3;

SELECT b, sum(a), count(*) FROM pagg_tab_ml GROUP BY b HAVING avg(a) < 15 ORDER BY 1, 2, 3;
 b | sum | count 
---+-----+-------
(0 rows)

-- Full aggregation at all levels as GROUP BY clause matches with PARTITION KEY
EXPLAIN (COSTS OFF)
SELECT a, sum(b), count(*) FROM pagg_tab_ml GROUP BY a, b, c HAVING avg(b) > 7 ORDER BY 1, 2, 3;

SELECT a, sum(b), count(*) FROM pagg_tab_ml GROUP BY a, b, c HAVING avg(b) > 7 ORDER BY 1, 2, 3;
 a | sum | count 
---+-----+-------
(0 rows)

-- Parallelism within partitionwise aggregates (single level)
-- Add few parallel setup cost, so that we will see a plan which gathers
-- partially created paths even for full aggregation and sticks a single Gather
-- followed by finalization step.
-- Without this, the cost of doing partial aggregation + Gather + finalization
-- for each partition and then Append over it turns out to be same and this
-- wins as we add it first. This parallel_setup_cost plays a vital role in
-- costing such plans.
SET parallel_setup_cost TO 10;
SET
drop table if exists pagg_tab_para;
psql:sql/partition_aggregate.sql:281: NOTICE:  table "pagg_tab_para" does not exist, skipping
DROP TABLE
CREATE TABLE pagg_tab_para(x int, y int) PARTITION BY RANGE(x);
CREATE TABLE
CREATE TABLE pagg_tab_para_p1 PARTITION OF pagg_tab_para FOR VALUES FROM (0) TO (10);
CREATE TABLE
CREATE TABLE pagg_tab_para_p2 PARTITION OF pagg_tab_para FOR VALUES FROM (10) TO (20);
CREATE TABLE
CREATE TABLE pagg_tab_para_p3 PARTITION OF pagg_tab_para FOR VALUES FROM (20) TO (30);
CREATE TABLE
INSERT INTO pagg_tab_para SELECT i % 30, i % 20 FROM generate_series(0, 29999) i;
INSERT 0 30000
-- When GROUP BY clause matches; full aggregation is performed for each partition.
EXPLAIN (COSTS OFF)
SELECT x, sum(y), avg(y)::numeric(64,4), count(*) FROM pagg_tab_para GROUP BY x HAVING avg(y) < 7 ORDER BY 1, 2, 3;

SELECT x, sum(y), avg(y)::numeric(64,4), count(*) FROM pagg_tab_para GROUP BY x HAVING avg(y) < 7 ORDER BY 1, 2, 3;
 x  | sum  |  avg   | count 
----+------+--------+-------
  0 | 5000 | 5.0000 |  1000
  1 | 6000 | 6.0000 |  1000
 10 | 5000 | 5.0000 |  1000
 11 | 6000 | 6.0000 |  1000
 20 | 5000 | 5.0000 |  1000
 21 | 6000 | 6.0000 |  1000
(6 rows)

-- When GROUP BY clause does not match; partial aggregation is performed for each partition.
EXPLAIN (COSTS OFF)
SELECT y, sum(x), avg(x), count(*) FROM pagg_tab_para GROUP BY y HAVING avg(x) < 12 ORDER BY 1, 2, 3;

SELECT y, sum(x), avg(x), count(*) FROM pagg_tab_para GROUP BY y HAVING avg(x) < 12 ORDER BY 1, 2, 3;
 y  |  sum  |         avg         | count 
----+-------+---------------------+-------
  0 | 15000 | 10.0000000000000000 |  1500
  1 | 16500 | 11.0000000000000000 |  1500
 10 | 15000 | 10.0000000000000000 |  1500
 11 | 16500 | 11.0000000000000000 |  1500
(4 rows)

EXPLAIN (COSTS OFF)
SELECT x, sum(y), avg(y)::numeric(64,4), count(*) FROM pagg_tab_para GROUP BY x HAVING avg(y) < 7 ORDER BY 1, 2, 3;

SELECT x, sum(y), avg(y)::numeric(64,4), count(*) FROM pagg_tab_para GROUP BY x HAVING avg(y) < 7 ORDER BY 1, 2, 3;
 x  | sum  |  avg   | count 
----+------+--------+-------
  0 | 5000 | 5.0000 |  1000
  1 | 6000 | 6.0000 |  1000
 10 | 5000 | 5.0000 |  1000
 11 | 6000 | 6.0000 |  1000
 20 | 5000 | 5.0000 |  1000
 21 | 6000 | 6.0000 |  1000
(6 rows)

EXPLAIN (COSTS OFF)
SELECT x, sum(y), avg(y)::numeric(64,4), count(*) FROM pagg_tab_para GROUP BY x HAVING avg(y) < 7 ORDER BY 1, 2, 3;

SELECT x, sum(y), avg(y)::numeric(64,4), count(*) FROM pagg_tab_para GROUP BY x HAVING avg(y) < 7 ORDER BY 1, 2, 3;
 x  | sum  |  avg   | count 
----+------+--------+-------
  0 | 5000 | 5.0000 |  1000
  1 | 6000 | 6.0000 |  1000
 10 | 5000 | 5.0000 |  1000
 11 | 6000 | 6.0000 |  1000
 20 | 5000 | 5.0000 |  1000
 21 | 6000 | 6.0000 |  1000
(6 rows)

-- Reset parallelism parameters to get partitionwise aggregation plan.
RESET min_parallel_table_scan_size;
RESET
RESET parallel_setup_cost;
RESET
EXPLAIN (COSTS OFF)
SELECT x, sum(y), avg(y)::numeric(64,4), count(*) FROM pagg_tab_para GROUP BY x HAVING avg(y) < 7 ORDER BY 1, 2, 3;

SELECT x, sum(y), avg(y)::numeric(64,4), count(*) FROM pagg_tab_para GROUP BY x HAVING avg(y) < 7 ORDER BY 1, 2, 3;
 x  | sum  |  avg   | count 
----+------+--------+-------
  0 | 5000 | 5.0000 |  1000
  1 | 6000 | 6.0000 |  1000
 10 | 5000 | 5.0000 |  1000
 11 | 6000 | 6.0000 |  1000
 20 | 5000 | 5.0000 |  1000
 21 | 6000 | 6.0000 |  1000
(6 rows)

--Crash when select count(*) from a partition table #439
drop table if exists t1;
psql:sql/partition_aggregate.sql:318: NOTICE:  table "t1" does not exist, skipping
DROP TABLE
create table t1(a int, b int) partition by list(a);
CREATE TABLE
create table t11 partition of t1 for values in (1,2,3,4);
CREATE TABLE
create table t12 partition of t1 for values in (5,6,7,8);
CREATE TABLE
select count(*) from t1;
 count 
-------
     0
(1 row)

select count(*) from t11;
 count 
-------
     0
(1 row)

select count(*) from t12;
 count 
-------
     0
(1 row)

drop table if exists t1;
DROP TABLE
create table t1(a int, b int) partition by list(a);
CREATE TABLE
create table t11 partition of t1 for values in (1,2,3,4);
CREATE TABLE
create table t12 partition of t1 for values in (5,6,7,8);
CREATE TABLE
insert into t1 select generate_series(1,8);
INSERT 0 8
select count(*) from t1;
 count 
-------
     8
(1 row)

select count(*) from t11;
 count 
-------
     4
(1 row)

select count(*) from t12;
 count 
-------
     4
(1 row)

