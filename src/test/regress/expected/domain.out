--
-- Test domains.
--
-- Test Comment / Drop
create domain domaindroptest int4;
CREATE DOMAIN
comment on domain domaindroptest is 'About to drop this..';
COMMENT
create domain dependenttypetest domaindroptest;
CREATE DOMAIN
-- fail because of dependent type
drop domain domaindroptest;
psql:sql/domain.sql:12: ERROR:  cannot drop type domaindroptest because other objects depend on it
DETAIL:  type dependenttypetest depends on type domaindroptest
HINT:  Use DROP ... CASCADE to drop the dependent objects too.
drop domain domaindroptest cascade;
psql:sql/domain.sql:14: NOTICE:  drop cascades to type dependenttypetest
DROP DOMAIN
-- this should fail because already gone
drop domain domaindroptest cascade;
psql:sql/domain.sql:17: ERROR:  type "domaindroptest" does not exist
-- Test domain input.
-- Note: the point of checking both INSERT and COPY FROM is that INSERT
-- exercises CoerceToDomain while COPY exercises domain_in.
create domain domainvarchar varchar(5);
CREATE DOMAIN
create domain domainnumeric numeric(8,2);
CREATE DOMAIN
create domain domainint4 int4;
CREATE DOMAIN
create domain domaintext text;
CREATE DOMAIN
-- Test explicit coercions --- these should succeed (and truncate)
SELECT cast('123456' as domainvarchar);
 domainvarchar 
---------------
 12345
(1 row)

SELECT cast('12345' as domainvarchar);
 domainvarchar 
---------------
 12345
(1 row)

-- Test tables using domains
create table basictest
           ( testint4 domainint4
           , testtext domaintext
           , testvarchar domainvarchar
           , testnumeric domainnumeric
           );
CREATE TABLE
INSERT INTO basictest values ('88', 'haha', 'short', '123.12');      -- Good
INSERT 0 1
INSERT INTO basictest values ('88', 'haha', 'short text', '123.12'); -- Bad varchar
psql:sql/domain.sql:43: ERROR:  value too long for type character varying(5)
INSERT INTO basictest values ('88', 'haha', 'short', '123.1212');    -- Truncate numeric
INSERT 0 1
-- Test copy
COPY basictest (testvarchar) FROM stdin; -- fail
psql:sql/domain.sql:49: ERROR:  value too long for type character varying(5)
CONTEXT:  COPY basictest, line 1, column testvarchar: "notsoshorttext"
COPY basictest (testvarchar) FROM stdin;
COPY 1
select * from basictest;
 testint4 | testtext | testvarchar | testnumeric 
----------+----------+-------------+-------------
       88 | haha     | short       |      123.12
       88 | haha     | short       |      123.12
          |          | short       |            
(3 rows)

-- check that domains inherit operations from base types
select testtext || testvarchar as concat, testnumeric + 42 as sum
from basictest;
  concat   |  sum   
-----------+--------
 hahashort | 165.12
 hahashort | 165.12
           |       
(3 rows)

-- check that union/case/coalesce type resolution handles domains properly
select coalesce(4::domainint4, 7) is of (int4) as t;
 t 
---
 t
(1 row)

select coalesce(4::domainint4, 7) is of (domainint4) as f;
 f 
---
 f
(1 row)

select coalesce(4::domainint4, 7::domainint4) is of (domainint4) as t;
 t 
---
 t
(1 row)

drop table basictest;
DROP TABLE
drop domain domainvarchar restrict;
DROP DOMAIN
drop domain domainnumeric restrict;
DROP DOMAIN
drop domain domainint4 restrict;
DROP DOMAIN
drop domain domaintext;
DROP DOMAIN
create domain dia as int[];
CREATE DOMAIN
select '{1,2,3}'::dia;
   dia   
---------
 {1,2,3}
(1 row)

select array_dims('{1,2,3}'::dia);
 array_dims 
------------
 [1:3]
(1 row)

select pg_typeof('{1,2,3}'::dia);
 pg_typeof 
-----------
 dia
(1 row)

select pg_typeof('{1,2,3}'::dia || 42); -- should be int[] not dia
 pg_typeof 
-----------
 integer[]
(1 row)

drop domain dia;
DROP DOMAIN
-- check altering and dropping columns used by domain constraints
create type comptype as (r float8, i float8);
CREATE TYPE
create domain dcomptype as comptype;
CREATE DOMAIN
alter domain dcomptype add constraint c1 check ((value).r > 0);
ALTER DOMAIN
comment on constraint c1 on domain dcomptype is 'random commentary';
COMMENT
select row(0,1)::dcomptype;  -- fail
psql:sql/domain.sql:89: ERROR:  value for domain dcomptype violates check constraint "c1"
alter type comptype alter attribute r type varchar;  -- fail
psql:sql/domain.sql:91: ERROR:  operator does not exist: character varying > double precision
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
alter type comptype alter attribute r type bigint;
ALTER TYPE
alter type comptype drop attribute r;  -- fail
psql:sql/domain.sql:94: ERROR:  cannot drop column r of composite type comptype because other objects depend on it
DETAIL:  constraint c1 depends on column r of composite type comptype
HINT:  Use DROP ... CASCADE to drop the dependent objects too.
alter type comptype drop attribute i;
ALTER TYPE
select conname, obj_description(oid, 'pg_constraint') from pg_constraint
  where contypid = 'dcomptype'::regtype;  -- check comment is still there
 conname |  obj_description  
---------+-------------------
 c1      | random commentary
(1 row)

  
drop type comptype cascade;
psql:sql/domain.sql:100: NOTICE:  drop cascades to type dcomptype
DROP TYPE
-- Test not-null restrictions
create domain dnotnull varchar(15) NOT NULL;
CREATE DOMAIN
create domain dnull    varchar(15);
CREATE DOMAIN
create domain dcheck   varchar(15) NOT NULL CHECK (VALUE = 'a' OR VALUE = 'c' OR VALUE = 'd');
CREATE DOMAIN
create table nulltest
           ( col1 dnotnull
           , col2 dnotnull NULL  -- NOT NULL in the domain cannot be overridden
           , col3 dnull    NOT NULL
           , col4 dnull
           , col5 dcheck CHECK (col5 IN ('c', 'd'))
           );
CREATE TABLE
INSERT INTO nulltest DEFAULT VALUES;
psql:sql/domain.sql:116: ERROR:  domain dnotnull does not allow null values
INSERT INTO nulltest values ('a', 'b', 'c', 'd', 'c');  -- Good
INSERT 0 1
insert into nulltest values ('a', 'b', 'c', 'd', NULL);
psql:sql/domain.sql:118: ERROR:  domain dcheck does not allow null values
insert into nulltest values ('a', 'b', 'c', 'd', 'a');
psql:sql/domain.sql:119: ERROR:  new row for relation "nulltest" violates check constraint "nulltest_col5_check"
DETAIL:  Failing row contains (a, b, c, d, a).
INSERT INTO nulltest values (NULL, 'b', 'c', 'd', 'd');
psql:sql/domain.sql:120: ERROR:  domain dnotnull does not allow null values
INSERT INTO nulltest values ('a', NULL, 'c', 'd', 'c');
psql:sql/domain.sql:121: ERROR:  domain dnotnull does not allow null values
INSERT INTO nulltest values ('a', 'b', NULL, 'd', 'c');
psql:sql/domain.sql:122: ERROR:  null value in column "col3" violates not-null constraint
DETAIL:  Failing row contains (a, b, null, d, c).
INSERT INTO nulltest values ('a', 'b', 'c', NULL, 'd'); -- Good
INSERT 0 1
-- Test copy
COPY nulltest FROM stdin; --fail
psql:sql/domain.sql:128: ERROR:  null value in column "col3" violates not-null constraint
DETAIL:  Failing row contains (a, b, null, d, d).
CONTEXT:  COPY nulltest, line 1: "a	b	\N	d	d"
COPY nulltest FROM stdin; --fail
psql:sql/domain.sql:132: ERROR:  domain dcheck does not allow null values
CONTEXT:  COPY nulltest, line 1, column col5: null input
-- Last row is bad
COPY nulltest FROM stdin;
psql:sql/domain.sql:139: ERROR:  new row for relation "nulltest" violates check constraint "nulltest_col5_check"
DETAIL:  Failing row contains (a, b, c, null, a).
CONTEXT:  COPY nulltest, line 3: "a	b	c	\N	a"
select * from nulltest;
 col1 | col2 | col3 | col4 | col5 
------+------+------+------+------
 a    | b    | c    | d    | c
 a    | b    | c    |      | d
(2 rows)

-- Test out coerced (casted) constraints
SELECT cast('1' as dnotnull);
 dnotnull 
----------
 1
(1 row)

SELECT cast(NULL as dnotnull); -- fail
psql:sql/domain.sql:145: ERROR:  domain dnotnull does not allow null values
SELECT cast(cast(NULL as dnull) as dnotnull); -- fail
psql:sql/domain.sql:146: ERROR:  domain dnotnull does not allow null values
SELECT cast(col4 as dnotnull) from nulltest; -- fail
psql:sql/domain.sql:147: ERROR:  domain dnotnull does not allow null values
-- cleanup
drop table nulltest;
DROP TABLE
drop domain dnotnull restrict;
DROP DOMAIN
drop domain dnull restrict;
DROP DOMAIN
drop domain dcheck restrict;
DROP DOMAIN
create domain ddef1 int4 DEFAULT 3;
CREATE DOMAIN
create domain ddef2 oid DEFAULT '12';
CREATE DOMAIN
-- Type mixing, function returns int8
create domain ddef3 text DEFAULT 5;
CREATE DOMAIN
create sequence ddef4_seq;
CREATE SEQUENCE
create domain ddef4 int4 DEFAULT nextval('ddef4_seq');
CREATE DOMAIN
create domain ddef5 numeric(8,2) NOT NULL DEFAULT '12.12';
CREATE DOMAIN
create table defaulttest
            ( col1 ddef1
            , col2 ddef2
            , col3 ddef3
            , col4 ddef4 PRIMARY KEY
            , col5 ddef1 NOT NULL DEFAULT NULL
            , col6 ddef2 DEFAULT '88'
            , col7 ddef4 DEFAULT 8000
            , col8 ddef5
            );
CREATE TABLE
insert into defaulttest(col4) values(0); -- fails, col5 defaults to null
psql:sql/domain.sql:174: ERROR:  null value in column "col5" violates not-null constraint
DETAIL:  Failing row contains (3, 12, 5, 0, null, 88, 8000, 12.12).
alter table defaulttest alter column col5 drop default;
ALTER TABLE
insert into defaulttest default values; -- succeeds, inserts domain default
INSERT 0 1
-- We used to treat SET DEFAULT NULL as equivalent to DROP DEFAULT; wrong
alter table defaulttest alter column col5 set default null;
ALTER TABLE
insert into defaulttest(col4) values(0); -- fails
psql:sql/domain.sql:179: ERROR:  null value in column "col5" violates not-null constraint
DETAIL:  Failing row contains (3, 12, 5, 0, null, 88, 8000, 12.12).
alter table defaulttest alter column col5 drop default;
ALTER TABLE
insert into defaulttest default values;
INSERT 0 1
insert into defaulttest default values;
INSERT 0 1
-- Test defaults with copy
COPY defaulttest(col5) FROM stdin;
COPY 1
select * from defaulttest;
 col1 | col2 | col3 | col4 | col5 | col6 | col7 | col8  
------+------+------+------+------+------+------+-------
    3 |   12 | 5    |    1 |    3 |   88 | 8000 | 12.12
    3 |   12 | 5    |    2 |    3 |   88 | 8000 | 12.12
    3 |   12 | 5    |    3 |    3 |   88 | 8000 | 12.12
    3 |   12 | 5    |    4 |   42 |   88 | 8000 | 12.12
(4 rows)

drop table defaulttest cascade;
DROP TABLE
-- Test ALTER DOMAIN .. NOT NULL
create domain dnotnulltest integer;
CREATE DOMAIN
create table domnotnull
( col1 dnotnulltest
, col2 dnotnulltest
);
CREATE TABLE
insert into domnotnull default values;
INSERT 0 1
alter domain dnotnulltest set not null; -- fails
psql:sql/domain.sql:201: WARNING:  generated check sql: SET enable_replica_read = false; SELECT EXISTS(SELECT * FROM public.domnotnull WHERE col1 IS  NULL OR col2 IS  NULL)
psql:sql/domain.sql:201: ERROR:  check constraint of relation "domnotnull" is violated by some row
update domnotnull set col1 = 5;
UPDATE 1
alter domain dnotnulltest set not null; -- fails
psql:sql/domain.sql:204: WARNING:  generated check sql: SET enable_replica_read = false; SELECT EXISTS(SELECT * FROM public.domnotnull WHERE col1 IS  NULL OR col2 IS  NULL)
psql:sql/domain.sql:204: ERROR:  check constraint of relation "domnotnull" is violated by some row
update domnotnull set col2 = 6;
UPDATE 1
alter domain dnotnulltest set not null;
psql:sql/domain.sql:207: WARNING:  generated check sql: SET enable_replica_read = false; SELECT EXISTS(SELECT * FROM public.domnotnull WHERE col1 IS  NULL OR col2 IS  NULL)
ALTER DOMAIN
update domnotnull set col1 = null; -- fails
psql:sql/domain.sql:209: ERROR:  Kunlun-db: MySQL storage node (1, 1) returned error: 1644, new row violates check constraint.
alter domain dnotnulltest drop not null;
ALTER DOMAIN
update domnotnull set col1 = null;
UPDATE 1
drop domain dnotnulltest cascade;
psql:sql/domain.sql:215: NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to column col1 of table domnotnull
drop cascades to column col2 of table domnotnull
DROP DOMAIN
-- Test ALTER DOMAIN .. DEFAULT ..
create table domdeftest (col1 ddef1);
CREATE TABLE
insert into domdeftest default values;
INSERT 0 1
select * from domdeftest;
 col1 
------
    3
(1 row)

alter domain ddef1 set default '42';
ALTER DOMAIN
insert into domdeftest default values;
INSERT 0 1
select * from domdeftest;
 col1 
------
    3
   42
(2 rows)

alter domain ddef1 drop default;
ALTER DOMAIN
insert into domdeftest default values;
INSERT 0 1
select * from domdeftest;
 col1 
------
    3
   42
     
(3 rows)

drop table domdeftest;
DROP TABLE
-- Test ALTER DOMAIN .. CONSTRAINT ..
create domain con as integer;
CREATE DOMAIN
create table domcontest (col1 con);
CREATE TABLE
insert into domcontest values (1);
INSERT 0 1
insert into domcontest values (2);
INSERT 0 1
alter domain con add constraint t check (VALUE < 1); -- fails
psql:sql/domain.sql:239: WARNING:  generated check sql: SET enable_replica_read = false; SELECT EXISTS(SELECT * FROM public.domcontest WHERE  NOT (((col1)::integer < 1)))
psql:sql/domain.sql:239: ERROR:  check constraint of relation "domcontest" is violated by some row
alter domain con add constraint t check (VALUE < 34);
psql:sql/domain.sql:241: WARNING:  generated check sql: SET enable_replica_read = false; SELECT EXISTS(SELECT * FROM public.domcontest WHERE  NOT (((col1)::integer < 34)))
ALTER DOMAIN
alter domain con add check (VALUE > 0);
psql:sql/domain.sql:242: WARNING:  generated check sql: SET enable_replica_read = false; SELECT EXISTS(SELECT * FROM public.domcontest WHERE  NOT (((col1)::integer > 0)))
ALTER DOMAIN
insert into domcontest values (-5); -- fails
psql:sql/domain.sql:244: ERROR:  value for domain con violates check constraint "con_check"
insert into domcontest values (42); -- fails
psql:sql/domain.sql:245: ERROR:  value for domain con violates check constraint "t"
insert into domcontest values (5);
INSERT 0 1
alter domain con drop constraint t;
ALTER DOMAIN
insert into domcontest values (-5); --fails
psql:sql/domain.sql:249: ERROR:  value for domain con violates check constraint "con_check"
insert into domcontest values (42);
INSERT 0 1
alter domain con drop constraint nonexistent;
psql:sql/domain.sql:252: ERROR:  constraint "nonexistent" of domain "con" does not exist
alter domain con drop constraint if exists nonexistent;
psql:sql/domain.sql:253: NOTICE:  constraint "nonexistent" of domain "con" does not exist, skipping
ALTER DOMAIN
-- Test ALTER DOMAIN .. CONSTRAINT .. NOT VALID
create domain things AS INT;
CREATE DOMAIN
CREATE TABLE thethings (stuff things);
CREATE TABLE
INSERT INTO thethings (stuff) VALUES (55);
INSERT 0 1
ALTER DOMAIN things ADD CONSTRAINT meow CHECK (VALUE < 11);
psql:sql/domain.sql:259: WARNING:  generated check sql: SET enable_replica_read = false; SELECT EXISTS(SELECT * FROM public.thethings WHERE  NOT (((stuff)::integer < 11)))
psql:sql/domain.sql:259: ERROR:  check constraint of relation "thethings" is violated by some row
ALTER DOMAIN things ADD CONSTRAINT meow CHECK (VALUE < 11) NOT VALID;
ALTER DOMAIN
ALTER DOMAIN things VALIDATE CONSTRAINT meow;
psql:sql/domain.sql:261: ERROR:  bogus! expect CHECK CONSTRAINT to be validated.
UPDATE thethings SET stuff = 10;
UPDATE 1
ALTER DOMAIN things VALIDATE CONSTRAINT meow;
psql:sql/domain.sql:263: ERROR:  bogus! expect CHECK CONSTRAINT to be validated.
-- Confirm ALTER DOMAIN with RULES.
create table domtab (col1 integer);
CREATE TABLE
create domain dom as integer;
CREATE DOMAIN
create view domview as select cast(col1 as dom) from domtab;
CREATE VIEW
insert into domtab (col1) values (null);
INSERT 0 1
insert into domtab (col1) values (5);
INSERT 0 1
select * from domview;
 col1 
------
     
    5
(2 rows)

alter domain dom set not null;
psql:sql/domain.sql:273: WARNING:  Shard 0 was not found while looking for its current master node.
psql:sql/domain.sql:273: ERROR:  kunlun-db: Lookup master node of shard (0) failed
select * from domview; -- fail
 col1 
------
     
    5
(2 rows)

alter domain dom drop not null;
ALTER DOMAIN
select * from domview;
 col1 
------
     
    5
(2 rows)

alter domain dom add constraint domchkgt6 check(value > 6);
ALTER DOMAIN
select * from domview; --fail
psql:sql/domain.sql:280: ERROR:  Kunlun-db: MySQL storage node (1, 1) returned error: 1644, new row violates check constraint.
alter domain dom drop constraint domchkgt6 restrict;
ALTER DOMAIN
select * from domview;
 col1 
------
     
    5
(2 rows)

-- cleanup
drop domain ddef1 restrict;
DROP DOMAIN
drop domain ddef2 restrict;
DROP DOMAIN
drop domain ddef3 restrict;
DROP DOMAIN
drop domain ddef4 restrict;
DROP DOMAIN
drop domain ddef5 restrict;
DROP DOMAIN
drop sequence ddef4_seq;
DROP SEQUENCE
-- Test domains over domains
create domain vchar4 varchar(4);
CREATE DOMAIN
create domain dinter vchar4 check (substring(VALUE, 1, 1) = 'x');
CREATE DOMAIN
create domain dtop dinter check (substring(VALUE, 2, 1) = '1');
CREATE DOMAIN
select 'x123'::dtop;
 dtop 
------
 x123
(1 row)

select 'x1234'::dtop; -- explicit coercion should truncate
 dtop 
------
 x123
(1 row)

select 'y1234'::dtop; -- fail
psql:sql/domain.sql:300: ERROR:  value for domain dtop violates check constraint "dinter_check"
select 'y123'::dtop; -- fail
psql:sql/domain.sql:301: ERROR:  value for domain dtop violates check constraint "dinter_check"
select 'yz23'::dtop; -- fail
psql:sql/domain.sql:302: ERROR:  value for domain dtop violates check constraint "dinter_check"
select 'xz23'::dtop; -- fail
psql:sql/domain.sql:303: ERROR:  value for domain dtop violates check constraint "dtop_check"
create temp table dtest(f1 dtop);
CREATE TABLE
insert into dtest values('x123');
INSERT 0 1
insert into dtest values('x1234'); -- fail, implicit coercion
psql:sql/domain.sql:308: ERROR:  value too long for type character varying(4)
insert into dtest values('y1234'); -- fail, implicit coercion
psql:sql/domain.sql:309: ERROR:  value too long for type character varying(4)
insert into dtest values('y123'); -- fail
psql:sql/domain.sql:310: ERROR:  value for domain dtop violates check constraint "dinter_check"
insert into dtest values('yz23'); -- fail
psql:sql/domain.sql:311: ERROR:  value for domain dtop violates check constraint "dinter_check"
insert into dtest values('xz23'); -- fail
psql:sql/domain.sql:312: ERROR:  value for domain dtop violates check constraint "dtop_check"
drop table dtest;
DROP TABLE
drop domain vchar4 cascade;
psql:sql/domain.sql:315: NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to type dinter
drop cascades to type dtop
DROP DOMAIN
-- Make sure that constraints of newly-added domain columns are
-- enforced correctly, even if there's no default value for the new
-- column. Per bug #1433
create domain str_domain as text not null;
CREATE DOMAIN
create table domain_test (a int, b int);
CREATE TABLE
insert into domain_test values (1, 2);
INSERT 0 1
insert into domain_test values (1, 2);
INSERT 0 1
-- should fail
alter table domain_test add column c str_domain;
ALTER TABLE
create domain str_domain2 as text check (value <> 'foo') default 'foo';
CREATE DOMAIN
-- should fail
alter table domain_test add column d str_domain2;
ALTER TABLE
-- Check that domain constraints on prepared statement parameters of
-- unknown type are enforced correctly.
create domain pos_int as int4 check (value > 0) not null;
CREATE DOMAIN
prepare s1 as select $1::pos_int = 10 as "is_ten";
PREPARE
execute s1(10);
 is_ten 
--------
 t
(1 row)

execute s1(0); -- should fail
psql:sql/domain.sql:341: ERROR:  value for domain pos_int violates check constraint "pos_int_check"
execute s1(NULL); -- should fail
psql:sql/domain.sql:342: ERROR:  domain pos_int does not allow null values
-- Check that domain constraints on plpgsql function parameters, results,
-- and local variables are enforced correctly.
create function doubledecrement(p1 pos_int) returns pos_int as $$
declare v pos_int;
begin
    return p1;
end$$ language plpgsql;
CREATE FUNCTION
select doubledecrement(3); -- fail because of implicit null assignment
psql:sql/domain.sql:353: ERROR:  domain pos_int does not allow null values
CONTEXT:  PL/pgSQL function doubledecrement(pos_int) line 3 during statement block local variable initialization
create or replace function doubledecrement(p1 pos_int) returns pos_int as $$
declare v pos_int = 0;
begin
    return p1;
end$$ language plpgsql;
CREATE FUNCTION
select doubledecrement(3); -- fail at initialization assignment
psql:sql/domain.sql:361: ERROR:  value for domain pos_int violates check constraint "pos_int_check"
CONTEXT:  PL/pgSQL function doubledecrement(pos_int) line 3 during statement block local variable initialization
create or replace function doubledecrement(p1 pos_int) returns pos_int as $$
declare v pos_int = 1;
begin
    v = p1 - 1;
    return v - 1;
end$$ language plpgsql;
CREATE FUNCTION
select doubledecrement(null); -- fail before call
psql:sql/domain.sql:370: ERROR:  domain pos_int does not allow null values
select doubledecrement(0); -- fail before call
psql:sql/domain.sql:371: ERROR:  value for domain pos_int violates check constraint "pos_int_check"
select doubledecrement(1); -- fail at assignment to v
psql:sql/domain.sql:372: ERROR:  value for domain pos_int violates check constraint "pos_int_check"
CONTEXT:  PL/pgSQL function doubledecrement(pos_int) line 4 at assignment
select doubledecrement(2); -- fail at return
psql:sql/domain.sql:373: ERROR:  value for domain pos_int violates check constraint "pos_int_check"
CONTEXT:  PL/pgSQL function doubledecrement(pos_int) while casting return value to function's return type
select doubledecrement(3); -- good
 doubledecrement 
-----------------
               1
(1 row)

-- Check that ALTER DOMAIN tests columns of derived types
create domain posint as int4;
CREATE DOMAIN
-- Currently, this doesn't work for composite types, but verify it complains
create type ddtest1 as (f1 posint);
CREATE TYPE
create table ddtest2(f1 ddtest1);
psql:sql/domain.sql:382: ERROR:  Kunlun-db: Not supported type (23696).
insert into ddtest2 values(row(-1));
psql:sql/domain.sql:383: ERROR:  relation "ddtest2" does not exist
LINE 1: insert into ddtest2 values(row(-1));
                    ^
alter domain posint add constraint c1 check(value >= 0);
ALTER DOMAIN
drop table ddtest2;
psql:sql/domain.sql:385: ERROR:  table "ddtest2" does not exist
-- Likewise for domains within arrays of composite
create table ddtest2(f1 ddtest1[]);
psql:sql/domain.sql:388: ERROR:  Kunlun-db: Not supported type (23695).
insert into ddtest2 values('{(-1)}');
psql:sql/domain.sql:389: ERROR:  relation "ddtest2" does not exist
LINE 1: insert into ddtest2 values('{(-1)}');
                    ^
alter domain posint add constraint c1 check(value >= 0);
psql:sql/domain.sql:390: ERROR:  constraint "c1" for domain "posint" already exists
drop table ddtest2;
psql:sql/domain.sql:391: ERROR:  table "ddtest2" does not exist
-- Likewise for domains within domains over composite
create domain ddtest1d as ddtest1;
CREATE DOMAIN
create table ddtest2(f1 ddtest1d);
psql:sql/domain.sql:395: ERROR:  Kunlun-db: Not supported type (23696).
insert into ddtest2 values('(-1)');
psql:sql/domain.sql:396: ERROR:  relation "ddtest2" does not exist
LINE 1: insert into ddtest2 values('(-1)');
                    ^
alter domain posint add constraint c1 check(value >= 0);
psql:sql/domain.sql:397: ERROR:  constraint "c1" for domain "posint" already exists
drop table ddtest2;
psql:sql/domain.sql:398: ERROR:  table "ddtest2" does not exist
drop domain ddtest1d;
DROP DOMAIN
-- Likewise for domains within domains over array of composite
create domain ddtest1d as ddtest1[];
CREATE DOMAIN
create table ddtest2(f1 ddtest1d);
psql:sql/domain.sql:403: ERROR:  Kunlun-db: Not supported type (23695).
insert into ddtest2 values('{(-1)}');
psql:sql/domain.sql:404: ERROR:  relation "ddtest2" does not exist
LINE 1: insert into ddtest2 values('{(-1)}');
                    ^
alter domain posint add constraint c1 check(value >= 0);
psql:sql/domain.sql:405: ERROR:  constraint "c1" for domain "posint" already exists
drop table ddtest2;
psql:sql/domain.sql:406: ERROR:  table "ddtest2" does not exist
drop domain ddtest1d;
DROP DOMAIN
-- Doesn't work for ranges, either
create type rposint as range (subtype = posint);
CREATE TYPE
create table ddtest2(f1 rposint);
psql:sql/domain.sql:411: ERROR:  Kunlun-db: Not supported type (23714).
insert into ddtest2 values('(-1,3]');
psql:sql/domain.sql:412: ERROR:  relation "ddtest2" does not exist
LINE 1: insert into ddtest2 values('(-1,3]');
                    ^
alter domain posint add constraint c1 check(value >= 0);
psql:sql/domain.sql:413: ERROR:  constraint "c1" for domain "posint" already exists
drop table ddtest2;
psql:sql/domain.sql:414: ERROR:  table "ddtest2" does not exist
drop type rposint;
DROP TYPE
alter domain posint add constraint c1 check(value >= 0);
psql:sql/domain.sql:417: ERROR:  constraint "c1" for domain "posint" already exists
create domain posint2 as posint check (value % 2 = 0);
CREATE DOMAIN
create table ddtest2(f1 posint2);
CREATE TABLE
insert into ddtest2 values(11); -- fail
psql:sql/domain.sql:421: ERROR:  value for domain posint2 violates check constraint "posint2_check"
insert into ddtest2 values(-2); -- fail
psql:sql/domain.sql:422: ERROR:  value for domain posint2 violates check constraint "c1"
insert into ddtest2 values(2);
INSERT 0 1
alter domain posint add constraint c2 check(value >= 10); -- fail
psql:sql/domain.sql:425: WARNING:  generated check sql: SET enable_replica_read = false; SELECT EXISTS(SELECT * FROM public.ddtest2 WHERE  NOT (((f1)::integer >= 10)))
psql:sql/domain.sql:425: ERROR:  check constraint of relation "ddtest2" is violated by some row
alter domain posint add constraint c2 check(value > 0); -- OK
psql:sql/domain.sql:426: WARNING:  generated check sql: SET enable_replica_read = false; SELECT EXISTS(SELECT * FROM public.ddtest2 WHERE  NOT (((f1)::integer > 0)))
ALTER DOMAIN
drop table ddtest2;
DROP TABLE
drop type ddtest1;
DROP TYPE
drop domain posint cascade;
psql:sql/domain.sql:430: NOTICE:  drop cascades to type posint2
DROP DOMAIN
--
-- Check enforcement of domain-related typmod in plpgsql (bug #5717)
--
create or replace function array_elem_check(numeric) returns numeric as $$
declare
  x numeric(4,2)[1];
begin
  x[1] = $1;
  return x[1];
end$$ language plpgsql;
CREATE FUNCTION
select array_elem_check(121.00);
psql:sql/domain.sql:444: ERROR:  numeric field overflow
DETAIL:  A field with precision 4, scale 2 must round to an absolute value less than 10^2.
CONTEXT:  PL/pgSQL function array_elem_check(numeric) line 5 at assignment
select array_elem_check(1.23456);
 array_elem_check 
------------------
             1.23
(1 row)

create domain mynums as numeric(4,2)[1];
CREATE DOMAIN
create or replace function array_elem_check(numeric) returns numeric as $$
declare
  x mynums;
begin
  x[1] = $1;
  return x[1];
end$$ language plpgsql;
CREATE FUNCTION
select array_elem_check(121.00);
psql:sql/domain.sql:457: ERROR:  numeric field overflow
DETAIL:  A field with precision 4, scale 2 must round to an absolute value less than 10^2.
CONTEXT:  PL/pgSQL function array_elem_check(numeric) line 5 at assignment
select array_elem_check(1.23456);
 array_elem_check 
------------------
             1.23
(1 row)

create domain mynums2 as mynums;
CREATE DOMAIN
create or replace function array_elem_check(numeric) returns numeric as $$
declare
  x mynums2;
begin
  x[1] = $1;
  return x[1];
end$$ language plpgsql;
CREATE FUNCTION
select array_elem_check(121.00);
psql:sql/domain.sql:470: ERROR:  numeric field overflow
DETAIL:  A field with precision 4, scale 2 must round to an absolute value less than 10^2.
CONTEXT:  PL/pgSQL function array_elem_check(numeric) line 5 at assignment
select array_elem_check(1.23456);
 array_elem_check 
------------------
             1.23
(1 row)

drop function array_elem_check(numeric);
DROP FUNCTION
--
-- Check enforcement of array-level domain constraints
--
create domain orderedpair as int[2] check (value[1] < value[2]);
CREATE DOMAIN
select array[1,2]::orderedpair;
 array 
-------
 {1,2}
(1 row)

select array[2,1]::orderedpair;  -- fail
psql:sql/domain.sql:482: ERROR:  value for domain orderedpair violates check constraint "orderedpair_check"
create temp table op (f1 orderedpair);
CREATE TABLE
insert into op values (array[1,2]);
INSERT 0 1
insert into op values (array[2,1]);  -- fail
psql:sql/domain.sql:486: ERROR:  value for domain orderedpair violates check constraint "orderedpair_check"
update op set f1[2] = 3;
UPDATE 1
update op set f1[2] = 0;  -- fail
psql:sql/domain.sql:489: ERROR:  value for domain orderedpair violates check constraint "orderedpair_check"
select * from op;
  f1   
-------
 {1,3}
(1 row)

create or replace function array_elem_check(int) returns int as $$
declare
  x orderedpair = '{1,2}';
begin
  x[2] = $1;
  return x[2];
end$$ language plpgsql;
CREATE FUNCTION
select array_elem_check(3);
 array_elem_check 
------------------
                3
(1 row)

select array_elem_check(-1);
psql:sql/domain.sql:501: ERROR:  value for domain orderedpair violates check constraint "orderedpair_check"
CONTEXT:  PL/pgSQL function array_elem_check(integer) line 5 at assignment
drop function array_elem_check(int);
DROP FUNCTION
--
-- Check enforcement of changing constraints in plpgsql
--
create domain di as int;
CREATE DOMAIN
create function dom_check(int) returns di as $$
declare d di;
begin
  d = $1;
  return d;
end
$$ language plpgsql immutable;
CREATE FUNCTION
select dom_check(0);
 dom_check 
-----------
         0
(1 row)

alter domain di add constraint pos check (value > 0);
ALTER DOMAIN
select dom_check(0); -- fail
psql:sql/domain.sql:523: ERROR:  value for domain di violates check constraint "pos"
CONTEXT:  PL/pgSQL function dom_check(integer) line 4 at assignment
alter domain di drop constraint pos;
ALTER DOMAIN
select dom_check(0);
 dom_check 
-----------
         0
(1 row)

drop function dom_check(int);
DROP FUNCTION
drop domain di;
DROP DOMAIN
--
-- Check use of a (non-inline-able) SQL function in a domain constraint;
-- this has caused issues in the past
--
create function sql_is_distinct_from(anyelement, anyelement)
returns boolean language sql
as 'select $1 is distinct from $2 limit 1';
CREATE FUNCTION
create domain inotnull int
  check (sql_is_distinct_from(value, null));
CREATE DOMAIN
select 1::inotnull;
 inotnull 
----------
        1
(1 row)

select null::inotnull;
psql:sql/domain.sql:546: ERROR:  value for domain inotnull violates check constraint "inotnull_check"
create table dom_table (x inotnull);
CREATE TABLE
insert into dom_table values ('1');
INSERT 0 1
insert into dom_table values (1);
INSERT 0 1
insert into dom_table values (null);
psql:sql/domain.sql:551: ERROR:  value for domain inotnull violates check constraint "inotnull_check"
drop table dom_table;
DROP TABLE
drop domain inotnull;
DROP DOMAIN
drop function sql_is_distinct_from(anyelement, anyelement);
DROP FUNCTION
--
-- Renaming
--
create domain testdomain1 as int;
CREATE DOMAIN
alter domain testdomain1 rename to testdomain2;
ALTER DOMAIN
alter type testdomain2 rename to testdomain3;  -- alter type also works
ALTER TYPE
drop domain testdomain3;
DROP DOMAIN
--
-- Renaming domain constraints
--
create domain testdomain1 as int constraint unsigned check (value > 0);
CREATE DOMAIN
alter domain testdomain1 rename constraint unsigned to unsigned_foo;
ALTER DOMAIN
alter domain testdomain1 drop constraint unsigned_foo;
ALTER DOMAIN
drop domain testdomain1;
DROP DOMAIN
