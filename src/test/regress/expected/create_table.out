--
-- CREATE_TABLE
--
--
-- CLASS DEFINITIONS
--
drop table if exists hobbies_r;
psql:sql/create_table.sql:8: NOTICE:  table "hobbies_r" does not exist, skipping
DROP TABLE
CREATE TABLE hobbies_r (
	name		text,
	person 		text
);
CREATE TABLE
drop table if exists equipment_r;
psql:sql/create_table.sql:14: NOTICE:  table "equipment_r" does not exist, skipping
DROP TABLE
CREATE TABLE equipment_r (
	name 		text,
	hobby		text
);
CREATE TABLE
drop table if exists onek;
psql:sql/create_table.sql:20: NOTICE:  table "onek" does not exist, skipping
DROP TABLE
CREATE TABLE onek (
	unique1		int4,
	unique2		int4,
	two			int4,
	four		int4,
	ten			int4,
	twenty		int4,
	hundred		int4,
	thousand	int4,
	twothousand	int4,
	fivethous	int4,
	tenthous	int4,
	odd			int4,
	even		int4,
	stringu1	name,
	stringu2	name,
	string4		name
);
CREATE TABLE
drop table if exists tenk1;
psql:sql/create_table.sql:40: NOTICE:  table "tenk1" does not exist, skipping
DROP TABLE
CREATE TABLE tenk1 (
	unique1		int4,
	unique2		int4,
	two			int4,
	four		int4,
	ten			int4,
	twenty		int4,
	hundred		int4,
	thousand	int4,
	twothousand	int4,
	fivethous	int4,
	tenthous	int4,
	odd			int4,
	even		int4,
	stringu1	name,
	stringu2	name,
	string4		name
);
CREATE TABLE
drop table if exists tenk2;
psql:sql/create_table.sql:60: NOTICE:  table "tenk2" does not exist, skipping
DROP TABLE
CREATE TABLE tenk2 (
	unique1 	int4,
	unique2 	int4,
	two 	 	int4,
	four 		int4,
	ten			int4,
	twenty 		int4,
	hundred 	int4,
	thousand 	int4,
	twothousand int4,
	fivethous 	int4,
	tenthous	int4,
	odd			int4,
	even		int4,
	stringu1	name,
	stringu2	name,
	string4		name
);
CREATE TABLE
drop table if exists person;
psql:sql/create_table.sql:81: NOTICE:  table "person" does not exist, skipping
DROP TABLE
CREATE TABLE person (
	name 		text,
	age			int4
);
CREATE TABLE
drop table if exists emp;
psql:sql/create_table.sql:87: NOTICE:  table "emp" does not exist, skipping
DROP TABLE
CREATE TABLE emp (
	name 		text,
	age			int4,
	salary 		int4,
	manager 	name
);
CREATE TABLE
drop table if exists student;
psql:sql/create_table.sql:95: NOTICE:  table "student" does not exist, skipping
DROP TABLE
CREATE TABLE student (
	name 		text,
	age			int4,
	gpa 		float8
) ;
CREATE TABLE
drop table if exists stud_emp;
psql:sql/create_table.sql:102: NOTICE:  table "stud_emp" does not exist, skipping
DROP TABLE
CREATE TABLE stud_emp (
	name 		text,
	age			int4,
	salary 		int4,
	manager 	name,
	gpa 		float8,
	percent 	int4
);
CREATE TABLE
drop table if exists dept;
psql:sql/create_table.sql:112: NOTICE:  table "dept" does not exist, skipping
DROP TABLE
CREATE TABLE dept (
	dname		name,
	mgrname 	text
);
CREATE TABLE
--
-- test the "star" operators a bit more thoroughly -- this time,
-- throw in lots of NULL fields...
--
-- a is the type root
-- b and c inherit from a (one-level single inheritance)
-- d inherits from b and c (two-level multiple inheritance)
-- e inherits from c (two-level single inheritance)
-- f inherits from e (three-level single inheritance)
--
drop table if exists a_star;
psql:sql/create_table.sql:128: NOTICE:  table "a_star" does not exist, skipping
DROP TABLE
CREATE TABLE a_star (
	class		char,
	a 			int4
);
CREATE TABLE
drop table if exists aggtest;
psql:sql/create_table.sql:134: NOTICE:  table "aggtest" does not exist, skipping
DROP TABLE
CREATE TABLE aggtest (
	a 			int2,
	b			float4
);
CREATE TABLE
drop table if exists hash_i4_heap;
psql:sql/create_table.sql:140: NOTICE:  table "hash_i4_heap" does not exist, skipping
DROP TABLE
CREATE TABLE hash_i4_heap (
	seqno 		int4,
	random 		int4
);
CREATE TABLE
drop table if exists hash_name_heap;
psql:sql/create_table.sql:146: NOTICE:  table "hash_name_heap" does not exist, skipping
DROP TABLE
CREATE TABLE hash_name_heap (
	seqno 		int4,
	random 		name
);
CREATE TABLE
drop table if exists hash_txt_heap;
psql:sql/create_table.sql:152: NOTICE:  table "hash_txt_heap" does not exist, skipping
DROP TABLE
CREATE TABLE hash_txt_heap (
	seqno 		int4,
	random 		text
);
CREATE TABLE
drop table if exists hash_f8_heap;
psql:sql/create_table.sql:158: NOTICE:  table "hash_f8_heap" does not exist, skipping
DROP TABLE
CREATE TABLE hash_f8_heap (
	seqno		int4,
	random 		float8
);
CREATE TABLE
-- don't include the hash_ovfl_heap stuff in the distribution
-- the data set is too large for what it's worth
--
-- CREATE TABLE hash_ovfl_heap (
--	x			int4,
--	y			int4
-- );
drop table if exists bt_i4_heap;
psql:sql/create_table.sql:171: NOTICE:  table "bt_i4_heap" does not exist, skipping
DROP TABLE
CREATE TABLE bt_i4_heap (
	seqno 		int4,
	random 		int4
);
CREATE TABLE
drop table if exists bt_name_heap;
psql:sql/create_table.sql:177: NOTICE:  table "bt_name_heap" does not exist, skipping
DROP TABLE
CREATE TABLE bt_name_heap (
	seqno 		name,
	random 		int4
);
CREATE TABLE
drop table if exists bt_txt_heap;
psql:sql/create_table.sql:183: NOTICE:  table "bt_txt_heap" does not exist, skipping
DROP TABLE
CREATE TABLE bt_txt_heap (
	seqno 		text,
	random 		int4
);
CREATE TABLE
drop table if exists bt_f8_heap;
psql:sql/create_table.sql:189: NOTICE:  table "bt_f8_heap" does not exist, skipping
DROP TABLE
CREATE TABLE bt_f8_heap (
	seqno 		float8,
	random 		int4
);
CREATE TABLE
drop table if exists testjsonb;
psql:sql/create_table.sql:195: NOTICE:  table "testjsonb" does not exist, skipping
DROP TABLE
CREATE TABLE testjsonb (
       j jsonb
);
CREATE TABLE
CREATE TABLE unknowntab (
	u unknown    -- fail
);
psql:sql/create_table.sql:202: ERROR:  column "u" has pseudo-type unknown
CREATE TYPE unknown_comptype AS (
	u unknown    -- fail
);
psql:sql/create_table.sql:206: ERROR:  column "u" has pseudo-type unknown
-- invalid: non-lowercase quoted reloptions identifiers
-- CREATE TABLE tas_case WITH ("Fillfactor" = 10) AS SELECT 1 a;
drop table if exists tas_case;
psql:sql/create_table.sql:211: NOTICE:  table "tas_case" does not exist, skipping
DROP TABLE
CREATE TABLE tas_case (a text);
CREATE TABLE
-- CREATE UNLOGGED TABLE unlogged1 (a int primary key);			-- OK
CREATE TEMPORARY TABLE unlogged2 (a int primary key);			-- OK
CREATE TABLE
SELECT relname, relkind, relpersistence FROM pg_class WHERE relname ~ '^unlogged\d' ORDER BY relname;
    relname     | relkind | relpersistence 
----------------+---------+----------------
 unlogged2      | r       | t
 unlogged2_pkey | i       | t
(2 rows)

-- REINDEX INDEX unlogged1_pkey;
-- REINDEX INDEX unlogged2_pkey;
SELECT relname, relkind, relpersistence FROM pg_class WHERE relname ~ '^unlogged\d' ORDER BY relname;
    relname     | relkind | relpersistence 
----------------+---------+----------------
 unlogged2      | r       | t
 unlogged2_pkey | i       | t
(2 rows)

DROP TABLE unlogged2;
DROP TABLE
-- INSERT INTO unlogged1 VALUES (42);
-- REATE UNLOGGED TABLE public.unlogged2 (a int primary key);		-- also OK
-- CREATE UNLOGGED TABLE pg_temp.unlogged3 (a int primary key);	-- not OK
CREATE TABLE pg_temp.implicitly_temp (a int primary key);		-- OK
CREATE TABLE
CREATE TEMP TABLE explicitly_temp (a int primary key);			-- also OK
CREATE TABLE
CREATE TEMP TABLE pg_temp.doubly_temp (a int primary key);		-- also OK
CREATE TABLE
CREATE TEMP TABLE public.temp_to_perm (a int primary key);		-- not OK
psql:sql/create_table.sql:227: ERROR:  cannot create temporary relation in non-temporary schema
LINE 1: CREATE TEMP TABLE public.temp_to_perm (a int primary key);
                          ^
-- DROP TABLE unlogged1;
-- DROP TABLE public.unlogged2;
--
-- Partitioned tables
--
-- cannot use more than 1 column as partition key for list partitioned table
drop table if exists partitioned;
psql:sql/create_table.sql:236: NOTICE:  table "partitioned" does not exist, skipping
DROP TABLE
CREATE TABLE partitioned (
	a1 int,
	a2 int
) PARTITION BY LIST (a1, a2);	-- fail
psql:sql/create_table.sql:240: ERROR:  cannot use "list" partition strategy with more than one column
-- prevent using prohibited expressions in the key
drop function if exists retset(int);
psql:sql/create_table.sql:243: NOTICE:  function retset(pg_catalog.int4) does not exist, skipping
DROP FUNCTION
CREATE FUNCTION retset (a int) RETURNS SETOF int AS $$ SELECT 1; $$ LANGUAGE SQL IMMUTABLE;
CREATE FUNCTION
CREATE TABLE partitioned (
	a int
) PARTITION BY RANGE (retset(a));
psql:sql/create_table.sql:247: ERROR:  set-returning functions are not allowed in partition key expressions
DROP FUNCTION retset(int);
DROP FUNCTION
CREATE TABLE partitioned (
	a int
) PARTITION BY RANGE ((avg(a)));
psql:sql/create_table.sql:252: ERROR:  aggregate functions are not allowed in partition key expressions
CREATE TABLE partitioned (
	a int,
	b int
) PARTITION BY RANGE ((avg(a) OVER (PARTITION BY b)));
psql:sql/create_table.sql:257: ERROR:  window functions are not allowed in partition key expressions
CREATE TABLE partitioned (
	a int
) PARTITION BY LIST ((a LIKE (SELECT 1)));
psql:sql/create_table.sql:261: ERROR:  cannot use subquery in partition key expression
CREATE TABLE partitioned (
	a int
) PARTITION BY RANGE (('a'));
psql:sql/create_table.sql:265: ERROR:  cannot use constant expression as partition key
drop function if exists const_func ();
psql:sql/create_table.sql:267: NOTICE:  function const_func() does not exist, skipping
DROP FUNCTION
CREATE FUNCTION const_func () RETURNS int AS $$ SELECT 1; $$ LANGUAGE SQL IMMUTABLE;
CREATE FUNCTION
CREATE TABLE partitioned (
	a int
) PARTITION BY RANGE (const_func());
psql:sql/create_table.sql:271: ERROR:  cannot use constant expression as partition key
DROP FUNCTION const_func();
DROP FUNCTION
-- only accept valid partitioning strategy
CREATE TABLE partitioned (
    a int
) PARTITION BY MAGIC (a);
psql:sql/create_table.sql:277: ERROR:  unrecognized partitioning strategy "magic"
-- specified column must be present in the table
CREATE TABLE partitioned (
	a int
) PARTITION BY RANGE (b);
psql:sql/create_table.sql:282: ERROR:  column "b" named in partition key does not exist
-- cannot use system columns in partition key
CREATE TABLE partitioned (
	a int
) PARTITION BY RANGE (xmin);
psql:sql/create_table.sql:287: ERROR:  cannot use system column "xmin" in partition key
-- functions in key must be immutable
drop function if exists immut_func(int);
psql:sql/create_table.sql:290: NOTICE:  function immut_func(pg_catalog.int4) does not exist, skipping
DROP FUNCTION
CREATE FUNCTION immut_func (a int) RETURNS int AS $$ SELECT a + random()::int; $$ LANGUAGE SQL;
CREATE FUNCTION
CREATE TABLE partitioned (
	a int
) PARTITION BY RANGE (immut_func(a));
psql:sql/create_table.sql:294: ERROR:  functions in partition key expression must be marked IMMUTABLE
DROP FUNCTION immut_func(int);
DROP FUNCTION
-- cannot contain whole-row references
CREATE TABLE partitioned (
	a	int
) PARTITION BY RANGE ((partitioned));
psql:sql/create_table.sql:300: ERROR:  partition key expressions cannot contain whole-row references
-- some checks after successful creation of a partitioned table
drop function if exists plusone(int);
psql:sql/create_table.sql:303: NOTICE:  function plusone(pg_catalog.int4) does not exist, skipping
DROP FUNCTION
CREATE FUNCTION plusone(a int) RETURNS INT AS $$ SELECT a+1; $$ LANGUAGE SQL;
CREATE FUNCTION
CREATE TABLE partitioned (
	a int,
	b int,
	c text,
	d text
) PARTITION BY RANGE (a oid_ops, plusone(b), c collate "default", d collate "C");
CREATE TABLE
-- check relkind
SELECT relkind FROM pg_class WHERE relname = 'partitioned';
 relkind 
---------
 p
(1 row)

-- prevent a function referenced in partition key from being dropped
DROP FUNCTION plusone(int);
psql:sql/create_table.sql:317: ERROR:  cannot drop function plusone(integer) because other objects depend on it
DETAIL:  table partitioned depends on function plusone(integer)
HINT:  Use DROP ... CASCADE to drop the dependent objects too.
-- partitioned table cannot participate in regular inheritance
drop table if exists partitioned2;
psql:sql/create_table.sql:320: NOTICE:  table "partitioned2" does not exist, skipping
DROP TABLE
CREATE TABLE partitioned2 (
	a int,
	b text
) PARTITION BY RANGE ((a+1), substr(b, 1, 5));
CREATE TABLE
-- Partition key in describe output
\d partitioned
            Table "public.partitioned"
 Column |  Type   | Collation | Nullable | Default 
--------+---------+-----------+----------+---------
 a      | integer |           |          | 
 b      | integer |           |          | 
 c      | text    |           |          | 
 d      | text    |           |          | 
Partition key: RANGE (a oid_ops, plusone(b), c, d COLLATE "C")
Number of partitions: 0

\d+ partitioned2
                                Table "public.partitioned2"
 Column |  Type   | Collation | Nullable | Default | Storage  | Stats target | Description 
--------+---------+-----------+----------+---------+----------+--------------+-------------
 a      | integer |           |          |         | plain    |              | 
 b      | text    |           |          |         | extended |              | 
Partition key: RANGE (((a + 1)), substr(b, 1, 5))
Number of partitions: 0

INSERT INTO partitioned2 VALUES (1, 'hello');
psql:sql/create_table.sql:330: ERROR:  no partition of relation "partitioned2" found for row
DETAIL:  Partition key of the failing row contains ((a + 1), substr(b, 1, 5)) = (2, hello).
CREATE TABLE part2_1 PARTITION OF partitioned2 FOR VALUES FROM (-1, 'aaaaa') TO (100, 'ccccc');
CREATE TABLE
\d+ part2_1
                                  Table "public.part2_1"
 Column |  Type   | Collation | Nullable | Default | Storage  | Stats target | Description 
--------+---------+-----------+----------+---------+----------+--------------+-------------
 a      | integer |           |          |         | plain    |              | 
 b      | text    |           |          |         | extended |              | 
Partition of: partitioned2 FOR VALUES FROM ('-1', 'aaaaa') TO (100, 'ccccc')
Partition constraint: (((a + 1) IS NOT NULL) AND (substr(b, 1, 5) IS NOT NULL) AND (((a + 1) > '-1'::integer) OR (((a + 1) = '-1'::integer) AND (substr(b, 1, 5) >= 'aaaaa'::text))) AND (((a + 1) < 100) OR (((a + 1) = 100) AND (substr(b, 1, 5) < 'ccccc'::text))))
Options: shard=1

DROP TABLE partitioned;
DROP TABLE
DROP TABLE partitioned2;
DROP TABLE
--
-- Partitions
--
-- check partition bound syntax
drop table if exists list_parted;
psql:sql/create_table.sql:343: NOTICE:  table "list_parted" does not exist, skipping
DROP TABLE
CREATE TABLE list_parted (
	a int
) PARTITION BY LIST (a);
CREATE TABLE
-- syntax allows only string literal, numeric literal and null to be
-- specified for a partition bound value
CREATE TABLE part_1 PARTITION OF list_parted FOR VALUES IN ('1');
CREATE TABLE
CREATE TABLE part_2 PARTITION OF list_parted FOR VALUES IN (2);
CREATE TABLE
CREATE TABLE part_null PARTITION OF list_parted FOR VALUES IN (null);
CREATE TABLE
CREATE TABLE fail_part PARTITION OF list_parted FOR VALUES IN (int '1');
psql:sql/create_table.sql:352: ERROR:  syntax error at or near "int"
LINE 1: ... fail_part PARTITION OF list_parted FOR VALUES IN (int '1');
                                                              ^
CREATE TABLE fail_part PARTITION OF list_parted FOR VALUES IN ('1'::int);
psql:sql/create_table.sql:353: ERROR:  syntax error at or near "::"
LINE 1: ...fail_part PARTITION OF list_parted FOR VALUES IN ('1'::int);
                                                                ^
-- syntax does not allow empty list of values for list partitions
CREATE TABLE fail_part PARTITION OF list_parted FOR VALUES IN ();
psql:sql/create_table.sql:356: ERROR:  syntax error at or near ")"
LINE 1: ...E TABLE fail_part PARTITION OF list_parted FOR VALUES IN ();
                                                                     ^
-- trying to specify range for list partitioned table
CREATE TABLE fail_part PARTITION OF list_parted FOR VALUES FROM (1) TO (2);
psql:sql/create_table.sql:358: ERROR:  invalid bound specification for a list partition
LINE 1: ...BLE fail_part PARTITION OF list_parted FOR VALUES FROM (1) T...
                                                             ^
-- trying to specify modulus and remainder for list partitioned table
CREATE TABLE fail_part PARTITION OF list_parted FOR VALUES WITH (MODULUS 10, REMAINDER 1);
psql:sql/create_table.sql:360: ERROR:  invalid bound specification for a list partition
LINE 1: ...BLE fail_part PARTITION OF list_parted FOR VALUES WITH (MODU...
                                                             ^
-- check default partition cannot be created more than once
--CREATE TABLE part_default PARTITION OF list_parted DEFAULT;
--CREATE TABLE fail_default_part PARTITION OF list_parted DEFAULT;
-- specified literal can't be cast to the partition column data type
drop table if exists bools;
psql:sql/create_table.sql:367: NOTICE:  table "bools" does not exist, skipping
DROP TABLE
CREATE TABLE bools (
	a bool
) PARTITION BY LIST (a);
CREATE TABLE
CREATE TABLE bools_true PARTITION OF bools FOR VALUES IN (1);
psql:sql/create_table.sql:371: ERROR:  specified value cannot be cast to type boolean for column "a"
LINE 1: ...REATE TABLE bools_true PARTITION OF bools FOR VALUES IN (1);
                                                                    ^
DROP TABLE bools;
DROP TABLE
-- specified literal can be cast, but cast isn't immutable
drop table if exists moneyp;
psql:sql/create_table.sql:375: NOTICE:  table "moneyp" does not exist, skipping
DROP TABLE
CREATE TABLE moneyp (
	a money
) PARTITION BY LIST (a);
CREATE TABLE
CREATE TABLE moneyp_10 PARTITION OF moneyp FOR VALUES IN (10);
psql:sql/create_table.sql:379: ERROR:  specified value cannot be cast to type money for column "a"
LINE 1: ...EATE TABLE moneyp_10 PARTITION OF moneyp FOR VALUES IN (10);
                                                                   ^
DETAIL:  The cast requires a non-immutable conversion.
HINT:  Try putting the literal value in single quotes.
CREATE TABLE moneyp_10 PARTITION OF moneyp FOR VALUES IN ('10');
CREATE TABLE
DROP TABLE moneyp;
DROP TABLE
-- immutable cast should work, though
CREATE TABLE bigintp (
	a bigint
) PARTITION BY LIST (a);
CREATE TABLE
CREATE TABLE bigintp_10 PARTITION OF bigintp FOR VALUES IN (10);
CREATE TABLE
-- fails due to overlap:
CREATE TABLE bigintp_10_2 PARTITION OF bigintp FOR VALUES IN ('10');
psql:sql/create_table.sql:389: ERROR:  partition "bigintp_10_2" would overlap partition "bigintp_10"
DROP TABLE bigintp;
DROP TABLE
CREATE TABLE range_parted (
	a date
) PARTITION BY RANGE (a);
CREATE TABLE
-- trying to specify list for range partitioned table
CREATE TABLE fail_part PARTITION OF range_parted FOR VALUES IN ('a');
psql:sql/create_table.sql:397: ERROR:  invalid bound specification for a range partition
LINE 1: ...BLE fail_part PARTITION OF range_parted FOR VALUES IN ('a');
                                                              ^
-- trying to specify modulus and remainder for range partitioned table
CREATE TABLE fail_part PARTITION OF range_parted FOR VALUES WITH (MODULUS 10, REMAINDER 1);
psql:sql/create_table.sql:399: ERROR:  invalid bound specification for a range partition
LINE 1: ...LE fail_part PARTITION OF range_parted FOR VALUES WITH (MODU...
                                                             ^
-- each of start and end bounds must have same number of values as the
-- length of the partition key
CREATE TABLE fail_part PARTITION OF range_parted FOR VALUES FROM ('a', 1) TO ('z');
psql:sql/create_table.sql:402: ERROR:  FROM must specify exactly one value per partitioning column
CREATE TABLE fail_part PARTITION OF range_parted FOR VALUES FROM ('a') TO ('z', 1);
psql:sql/create_table.sql:403: ERROR:  TO must specify exactly one value per partitioning column
-- cannot specify null values in range bounds
CREATE TABLE fail_part PARTITION OF range_parted FOR VALUES FROM (null) TO (maxvalue);
psql:sql/create_table.sql:406: ERROR:  cannot specify NULL in range bound
-- trying to specify modulus and remainder for range partitioned table
CREATE TABLE fail_part PARTITION OF range_parted FOR VALUES WITH (MODULUS 10, REMAINDER 1);
psql:sql/create_table.sql:409: ERROR:  invalid bound specification for a range partition
LINE 1: ...LE fail_part PARTITION OF range_parted FOR VALUES WITH (MODU...
                                                             ^
-- check partition bound syntax for the hash partition
dropt table if exists hash_parted;
psql:sql/create_table.sql:412: ERROR:  syntax error at or near "dropt"
LINE 1: dropt table if exists hash_parted;
        ^
CREATE TABLE hash_parted (
	a int
) PARTITION BY HASH (a);
CREATE TABLE
CREATE TABLE hpart_1 PARTITION OF hash_parted FOR VALUES WITH (MODULUS 10, REMAINDER 0);
CREATE TABLE
CREATE TABLE hpart_2 PARTITION OF hash_parted FOR VALUES WITH (MODULUS 50, REMAINDER 1);
CREATE TABLE
CREATE TABLE hpart_3 PARTITION OF hash_parted FOR VALUES WITH (MODULUS 200, REMAINDER 2);
CREATE TABLE
-- modulus 25 is factor of modulus of 50 but 10 is not factor of 25.
CREATE TABLE fail_part PARTITION OF hash_parted FOR VALUES WITH (MODULUS 25, REMAINDER 3);
psql:sql/create_table.sql:420: ERROR:  every hash partition modulus must be a factor of the next larger modulus
-- previous modulus 50 is factor of 150 but this modulus is not factor of next modulus 200.
CREATE TABLE fail_part PARTITION OF hash_parted FOR VALUES WITH (MODULUS 150, REMAINDER 3);
psql:sql/create_table.sql:422: ERROR:  every hash partition modulus must be a factor of the next larger modulus
-- trying to specify range for the hash partitioned table
CREATE TABLE fail_part PARTITION OF hash_parted FOR VALUES FROM ('a', 1) TO ('z');
psql:sql/create_table.sql:424: ERROR:  invalid bound specification for a hash partition
LINE 1: ...BLE fail_part PARTITION OF hash_parted FOR VALUES FROM ('a',...
                                                             ^
-- trying to specify list value for the hash partitioned table
CREATE TABLE fail_part PARTITION OF hash_parted FOR VALUES IN (1000);
psql:sql/create_table.sql:426: ERROR:  invalid bound specification for a hash partition
LINE 1: ...BLE fail_part PARTITION OF hash_parted FOR VALUES IN (1000);
                                                             ^
-- trying to create default partition for the hash partitioned table
--CREATE TABLE fail_default_part PARTITION OF hash_parted DEFAULT;
-- check if compatible with the specified parent
-- cannot create as partition of a non-partitioned table
CREATE TABLE unparted (
	a int
);
CREATE TABLE
CREATE TABLE fail_part PARTITION OF unparted FOR VALUES IN ('a');
psql:sql/create_table.sql:437: ERROR:  "unparted" is not partitioned
CREATE TABLE fail_part PARTITION OF unparted FOR VALUES WITH (MODULUS 2, REMAINDER 1);
psql:sql/create_table.sql:438: ERROR:  "unparted" is not partitioned
DROP TABLE unparted;
DROP TABLE
-- cannot create a permanent rel as partition of a temp rel
CREATE TEMP TABLE temp_parted (
	a int
) PARTITION BY LIST (a);
CREATE TABLE
CREATE TABLE fail_part PARTITION OF temp_parted FOR VALUES IN ('a');
psql:sql/create_table.sql:445: ERROR:  cannot create a permanent relation as partition of temporary relation "temp_parted"
DROP TABLE temp_parted;
DROP TABLE
-- cannot create a table with oids as partition of table without oids
CREATE TABLE no_oids_parted (
	a int
) PARTITION BY RANGE (a) WITHOUT OIDS;
CREATE TABLE
CREATE TABLE fail_part PARTITION OF no_oids_parted FOR VALUES FROM (1) TO (10);
CREATE TABLE
DROP TABLE no_oids_parted;
DROP TABLE
-- If the partitioned table has oids, then the partition must have them.
-- If the WITHOUT OIDS option is specified for partition, it is overridden.
CREATE TABLE oids_parted (
	a int
) PARTITION BY RANGE (a);
CREATE TABLE
CREATE TABLE part_forced_oids PARTITION OF oids_parted FOR VALUES FROM (1) TO (10) WITHOUT OIDS;
CREATE TABLE
\d+ part_forced_oids
                             Table "public.part_forced_oids"
 Column |  Type   | Collation | Nullable | Default | Storage | Stats target | Description 
--------+---------+-----------+----------+---------+---------+--------------+-------------
 a      | integer |           |          |         | plain   |              | 
Partition of: oids_parted FOR VALUES FROM (1) TO (10)
Partition constraint: ((a IS NOT NULL) AND (a >= 1) AND (a < 10))
Options: shard=1

DROP TABLE oids_parted;
DROP TABLE
DROP TABLE part_forced_oids;
psql:sql/create_table.sql:463: ERROR:  table "part_forced_oids" does not exist
-- check for partition bound overlap and other invalid specifications
CREATE TABLE list_parted2 (
	a varchar
) PARTITION BY LIST (a);
CREATE TABLE
CREATE TABLE part_null_z PARTITION OF list_parted2 FOR VALUES IN (null, 'z');
CREATE TABLE
CREATE TABLE part_ab PARTITION OF list_parted2 FOR VALUES IN ('a', 'b');
CREATE TABLE
--CREATE TABLE list_parted2_def PARTITION OF list_parted2 DEFAULT;
CREATE TABLE fail_part PARTITION OF list_parted2 FOR VALUES IN (null);
psql:sql/create_table.sql:474: ERROR:  partition "fail_part" would overlap partition "part_null_z"
CREATE TABLE fail_part PARTITION OF list_parted2 FOR VALUES IN ('b', 'c');
psql:sql/create_table.sql:475: ERROR:  partition "fail_part" would overlap partition "part_ab"
-- check default partition overlap
INSERT INTO list_parted2 VALUES('X');
psql:sql/create_table.sql:477: ERROR:  no partition of relation "list_parted2" found for row
DETAIL:  Partition key of the failing row contains (a) = (X).
CREATE TABLE fail_part PARTITION OF list_parted2 FOR VALUES IN ('W', 'X', 'Y');
CREATE TABLE
CREATE TABLE range_parted2 (
	a int
) PARTITION BY RANGE (a);
CREATE TABLE
-- trying to create range partition with empty range
CREATE TABLE fail_part PARTITION OF range_parted2 FOR VALUES FROM (1) TO (0);
psql:sql/create_table.sql:485: ERROR:  relation "fail_part" already exists
-- note that the range '[1, 1)' has no elements
CREATE TABLE fail_part PARTITION OF range_parted2 FOR VALUES FROM (1) TO (1);
psql:sql/create_table.sql:487: ERROR:  relation "fail_part" already exists
CREATE TABLE part0 PARTITION OF range_parted2 FOR VALUES FROM (minvalue) TO (1);
CREATE TABLE
CREATE TABLE fail_part PARTITION OF range_parted2 FOR VALUES FROM (minvalue) TO (2);
psql:sql/create_table.sql:490: ERROR:  relation "fail_part" already exists
CREATE TABLE part1 PARTITION OF range_parted2 FOR VALUES FROM (1) TO (10);
CREATE TABLE
CREATE TABLE fail_part PARTITION OF range_parted2 FOR VALUES FROM (9) TO (maxvalue);
psql:sql/create_table.sql:492: ERROR:  relation "fail_part" already exists
CREATE TABLE part2 PARTITION OF range_parted2 FOR VALUES FROM (20) TO (30);
CREATE TABLE
CREATE TABLE part3 PARTITION OF range_parted2 FOR VALUES FROM (30) TO (40);
CREATE TABLE
CREATE TABLE fail_part PARTITION OF range_parted2 FOR VALUES FROM (10) TO (30);
psql:sql/create_table.sql:495: ERROR:  relation "fail_part" already exists
CREATE TABLE fail_part PARTITION OF range_parted2 FOR VALUES FROM (10) TO (50);
psql:sql/create_table.sql:496: ERROR:  relation "fail_part" already exists
-- Create a default partition for range partitioned table
--CREATE TABLE range2_default PARTITION OF range_parted2 DEFAULT;
-- More than one default partition is not allowed, so this should give error
--CREATE TABLE fail_default_part PARTITION OF range_parted2 DEFAULT;
-- Check if the range for default partitions overlap
INSERT INTO range_parted2 VALUES (85);
psql:sql/create_table.sql:505: ERROR:  no partition of relation "range_parted2" found for row
DETAIL:  Partition key of the failing row contains (a) = (85).
CREATE TABLE fail_part PARTITION OF range_parted2 FOR VALUES FROM (80) TO (90);
psql:sql/create_table.sql:506: ERROR:  relation "fail_part" already exists
CREATE TABLE part4 PARTITION OF range_parted2 FOR VALUES FROM (90) TO (100);
CREATE TABLE
-- now check for multi-column range partition key
CREATE TABLE range_parted3 (
	a int,
	b int
) PARTITION BY RANGE (a, (b+1));
CREATE TABLE
CREATE TABLE part00 PARTITION OF range_parted3 FOR VALUES FROM (0, minvalue) TO (0, maxvalue);
CREATE TABLE
CREATE TABLE fail_part PARTITION OF range_parted3 FOR VALUES FROM (0, minvalue) TO (0, 1);
psql:sql/create_table.sql:515: ERROR:  relation "fail_part" already exists
CREATE TABLE part10 PARTITION OF range_parted3 FOR VALUES FROM (1, minvalue) TO (1, 1);
CREATE TABLE
CREATE TABLE part11 PARTITION OF range_parted3 FOR VALUES FROM (1, 1) TO (1, 10);
CREATE TABLE
CREATE TABLE part12 PARTITION OF range_parted3 FOR VALUES FROM (1, 10) TO (1, maxvalue);
CREATE TABLE
CREATE TABLE fail_part PARTITION OF range_parted3 FOR VALUES FROM (1, 10) TO (1, 20);
psql:sql/create_table.sql:520: ERROR:  relation "fail_part" already exists
--CREATE TABLE range3_default PARTITION OF range_parted3 DEFAULT;
-- cannot create a partition that says column b is allowed to range
-- from -infinity to +infinity, while there exist partitions that have
-- more specific ranges
CREATE TABLE fail_part PARTITION OF range_parted3 FOR VALUES FROM (1, minvalue) TO (1, maxvalue);
psql:sql/create_table.sql:526: ERROR:  relation "fail_part" already exists
-- check for partition bound overlap and other invalid specifications for the hash partition
CREATE TABLE hash_parted2 (
	a varchar
) PARTITION BY HASH (a);
CREATE TABLE
CREATE TABLE h2part_1 PARTITION OF hash_parted2 FOR VALUES WITH (MODULUS 4, REMAINDER 2);
CREATE TABLE
CREATE TABLE h2part_2 PARTITION OF hash_parted2 FOR VALUES WITH (MODULUS 8, REMAINDER 0);
CREATE TABLE
CREATE TABLE h2part_3 PARTITION OF hash_parted2 FOR VALUES WITH (MODULUS 8, REMAINDER 4);
CREATE TABLE
CREATE TABLE h2part_4 PARTITION OF hash_parted2 FOR VALUES WITH (MODULUS 8, REMAINDER 5);
CREATE TABLE
-- overlap with part_4
CREATE TABLE fail_part PARTITION OF hash_parted2 FOR VALUES WITH (MODULUS 2, REMAINDER 1);
psql:sql/create_table.sql:537: ERROR:  relation "fail_part" already exists
-- modulus must be greater than zero
CREATE TABLE fail_part PARTITION OF hash_parted2 FOR VALUES WITH (MODULUS 0, REMAINDER 1);
psql:sql/create_table.sql:539: ERROR:  relation "fail_part" already exists
-- remainder must be greater than or equal to zero and less than modulus
CREATE TABLE fail_part PARTITION OF hash_parted2 FOR VALUES WITH (MODULUS 8, REMAINDER 8);
psql:sql/create_table.sql:541: ERROR:  relation "fail_part" already exists
-- check schema propagation from parent
CREATE TABLE parted (
	a text,
	b int NOT NULL DEFAULT 0
) PARTITION BY LIST (a);
CREATE TABLE
CREATE TABLE part_a PARTITION OF parted FOR VALUES IN ('a');
CREATE TABLE
-- only inherited attributes (never local ones)
SELECT attname, attislocal, attinhcount FROM pg_attribute
  WHERE attrelid = 'part_a'::regclass and attnum > 0
  ORDER BY attnum;
 attname | attislocal | attinhcount 
---------+------------+-------------
 a       | f          |           1
 b       | f          |           1
(2 rows)

-- able to specify column default, column constraint, and table constraint
-- first check the "column specified more than once" error
CREATE TABLE part_b PARTITION OF parted (
	b NOT NULL,
	b DEFAULT 1
) FOR VALUES IN ('b');
psql:sql/create_table.sql:563: ERROR:  column "b" specified more than once
CREATE TABLE part_b PARTITION OF parted (
	b NOT NULL DEFAULT 1
) FOR VALUES IN ('b');
CREATE TABLE
-- conislocal should be false for any merged constraints
SELECT conislocal, coninhcount FROM pg_constraint WHERE conrelid = 'part_b'::regclass AND conname = 'check_a';
 conislocal | coninhcount 
------------+-------------
(0 rows)

-- specify PARTITION BY for a partition
CREATE TABLE fail_part_col_not_found PARTITION OF parted FOR VALUES IN ('c') PARTITION BY RANGE (c);
psql:sql/create_table.sql:572: ERROR:  column "c" named in partition key does not exist
CREATE TABLE part_c PARTITION OF parted (b WITH OPTIONS NOT NULL DEFAULT 0) FOR VALUES IN ('c') PARTITION BY RANGE ((b));
CREATE TABLE
-- create a level-2 partition
CREATE TABLE part_c_1_10 PARTITION OF part_c FOR VALUES FROM (1) TO (10);
CREATE TABLE
-- check that NOT NULL and default value are inherited correctly
create table parted_notnull_inh_test (a int default 1, b int not null default 0) partition by list (a);
CREATE TABLE
create table parted_notnull_inh_test1 partition of parted_notnull_inh_test (a not null, b default 1) for values in (1);
CREATE TABLE
insert into parted_notnull_inh_test (b) values (null);
psql:sql/create_table.sql:581: ERROR:  null value in column "b" violates not-null constraint
DETAIL:  Failing row contains (1, null).
-- note that while b's default is overriden, a's default is preserved
\d parted_notnull_inh_test1
      Table "public.parted_notnull_inh_test1"
 Column |  Type   | Collation | Nullable | Default 
--------+---------+-----------+----------+---------
 a      | integer |           | not null | 1
 b      | integer |           | not null | 1
Partition of: parted_notnull_inh_test FOR VALUES IN (1)

drop table parted_notnull_inh_test;
DROP TABLE
-- check for a conflicting COLLATE clause
create table parted_collate_must_match (a text collate "C", b text collate "C")
  partition by range (a);
CREATE TABLE
-- on the partition key
create table parted_collate_must_match1 partition of parted_collate_must_match
  (a collate "POSIX") for values from ('a') to ('m');
CREATE TABLE
-- on another column
create table parted_collate_must_match2 partition of parted_collate_must_match
  (b collate "POSIX") for values from ('m') to ('z');
CREATE TABLE
drop table parted_collate_must_match;
DROP TABLE
-- Partition bound in describe output
\d+ part_b
                                   Table "public.part_b"
 Column |  Type   | Collation | Nullable | Default | Storage  | Stats target | Description 
--------+---------+-----------+----------+---------+----------+--------------+-------------
 a      | text    |           |          |         | extended |              | 
 b      | integer |           | not null | 1       | plain    |              | 
Partition of: parted FOR VALUES IN ('b')
Partition constraint: ((a IS NOT NULL) AND (a = 'b'::text))
Options: shard=1

-- Both partition bound and partition key in describe output
\d+ part_c
                                   Table "public.part_c"
 Column |  Type   | Collation | Nullable | Default | Storage  | Stats target | Description 
--------+---------+-----------+----------+---------+----------+--------------+-------------
 a      | text    |           |          |         | extended |              | 
 b      | integer |           | not null | 0       | plain    |              | 
Partition of: parted FOR VALUES IN ('c')
Partition constraint: ((a IS NOT NULL) AND (a = 'c'::text))
Partition key: RANGE (b)
Partitions: part_c_1_10 FOR VALUES FROM (1) TO (10)

-- a level-2 partition's constraint will include the parent's expressions
\d+ part_c_1_10
                                Table "public.part_c_1_10"
 Column |  Type   | Collation | Nullable | Default | Storage  | Stats target | Description 
--------+---------+-----------+----------+---------+----------+--------------+-------------
 a      | text    |           |          |         | extended |              | 
 b      | integer |           | not null | 0       | plain    |              | 
Partition of: part_c FOR VALUES FROM (1) TO (10)
Partition constraint: ((a IS NOT NULL) AND (a = 'c'::text) AND (b IS NOT NULL) AND (b >= 1) AND (b < 10))
Options: shard=1

-- Show partition count in the parent's describe output
-- Tempted to include \d+ output listing partitions with bound info but
-- output could vary depending on the order in which partition oids are
-- returned.
\d parted
               Table "public.parted"
 Column |  Type   | Collation | Nullable | Default 
--------+---------+-----------+----------+---------
 a      | text    |           |          | 
 b      | integer |           | not null | 0
Partition key: LIST (a)
Number of partitions: 3 (Use \d+ to list them.)

\d hash_parted
            Table "public.hash_parted"
 Column |  Type   | Collation | Nullable | Default 
--------+---------+-----------+----------+---------
 a      | integer |           |          | 
Partition key: HASH (a)
Number of partitions: 3 (Use \d+ to list them.)

-- check that we get the expected partition constraints
CREATE TABLE range_parted4 (a int, b int, c int) PARTITION BY RANGE (abs(a), abs(b), c);
CREATE TABLE
CREATE TABLE unbounded_range_part PARTITION OF range_parted4 FOR VALUES FROM (MINVALUE, MINVALUE, MINVALUE) TO (MAXVALUE, MAXVALUE, MAXVALUE);
CREATE TABLE
\d+ unbounded_range_part
                           Table "public.unbounded_range_part"
 Column |  Type   | Collation | Nullable | Default | Storage | Stats target | Description 
--------+---------+-----------+----------+---------+---------+--------------+-------------
 a      | integer |           |          |         | plain   |              | 
 b      | integer |           |          |         | plain   |              | 
 c      | integer |           |          |         | plain   |              | 
Partition of: range_parted4 FOR VALUES FROM (MINVALUE, MINVALUE, MINVALUE) TO (MAXVALUE, MAXVALUE, MAXVALUE)
Partition constraint: ((abs(a) IS NOT NULL) AND (abs(b) IS NOT NULL) AND (c IS NOT NULL))
Options: shard=1

DROP TABLE unbounded_range_part;
DROP TABLE
CREATE TABLE range_parted4_1 PARTITION OF range_parted4 FOR VALUES FROM (MINVALUE, MINVALUE, MINVALUE) TO (1, MAXVALUE, MAXVALUE);
CREATE TABLE
\d+ range_parted4_1
                              Table "public.range_parted4_1"
 Column |  Type   | Collation | Nullable | Default | Storage | Stats target | Description 
--------+---------+-----------+----------+---------+---------+--------------+-------------
 a      | integer |           |          |         | plain   |              | 
 b      | integer |           |          |         | plain   |              | 
 c      | integer |           |          |         | plain   |              | 
Partition of: range_parted4 FOR VALUES FROM (MINVALUE, MINVALUE, MINVALUE) TO (1, MAXVALUE, MAXVALUE)
Partition constraint: ((abs(a) IS NOT NULL) AND (abs(b) IS NOT NULL) AND (c IS NOT NULL) AND (abs(a) <= 1))
Options: shard=1

CREATE TABLE range_parted4_2 PARTITION OF range_parted4 FOR VALUES FROM (3, 4, 5) TO (6, 7, MAXVALUE);
CREATE TABLE
\d+ range_parted4_2
                              Table "public.range_parted4_2"
 Column |  Type   | Collation | Nullable | Default | Storage | Stats target | Description 
--------+---------+-----------+----------+---------+---------+--------------+-------------
 a      | integer |           |          |         | plain   |              | 
 b      | integer |           |          |         | plain   |              | 
 c      | integer |           |          |         | plain   |              | 
Partition of: range_parted4 FOR VALUES FROM (3, 4, 5) TO (6, 7, MAXVALUE)
Partition constraint: ((abs(a) IS NOT NULL) AND (abs(b) IS NOT NULL) AND (c IS NOT NULL) AND ((abs(a) > 3) OR ((abs(a) = 3) AND (abs(b) > 4)) OR ((abs(a) = 3) AND (abs(b) = 4) AND (c >= 5))) AND ((abs(a) < 6) OR ((abs(a) = 6) AND (abs(b) <= 7))))
Options: shard=1

CREATE TABLE range_parted4_3 PARTITION OF range_parted4 FOR VALUES FROM (6, 8, MINVALUE) TO (9, MAXVALUE, MAXVALUE);
CREATE TABLE
\d+ range_parted4_3
                              Table "public.range_parted4_3"
 Column |  Type   | Collation | Nullable | Default | Storage | Stats target | Description 
--------+---------+-----------+----------+---------+---------+--------------+-------------
 a      | integer |           |          |         | plain   |              | 
 b      | integer |           |          |         | plain   |              | 
 c      | integer |           |          |         | plain   |              | 
Partition of: range_parted4 FOR VALUES FROM (6, 8, MINVALUE) TO (9, MAXVALUE, MAXVALUE)
Partition constraint: ((abs(a) IS NOT NULL) AND (abs(b) IS NOT NULL) AND (c IS NOT NULL) AND ((abs(a) > 6) OR ((abs(a) = 6) AND (abs(b) >= 8))) AND (abs(a) <= 9))
Options: shard=1

DROP TABLE range_parted4;
DROP TABLE
-- user-defined operator class in partition key
CREATE FUNCTION my_int4_sort(int4,int4) RETURNS int LANGUAGE sql
  AS $$ SELECT CASE WHEN $1 = $2 THEN 0 WHEN $1 > $2 THEN 1 ELSE -1 END; $$;
CREATE FUNCTION
CREATE OPERATOR CLASS test_int4_ops FOR TYPE int4 USING btree AS
  OPERATOR 1 < (int4,int4), OPERATOR 2 <= (int4,int4),
  OPERATOR 3 = (int4,int4), OPERATOR 4 >= (int4,int4),
  OPERATOR 5 > (int4,int4), FUNCTION 1 my_int4_sort(int4,int4);
CREATE OPERATOR CLASS
CREATE TABLE partkey_t (a int4) PARTITION BY RANGE (a test_int4_ops);
CREATE TABLE
CREATE TABLE partkey_t_1 PARTITION OF partkey_t FOR VALUES FROM (0) TO (1000);
CREATE TABLE
INSERT INTO partkey_t VALUES (100);
INSERT 0 1
INSERT INTO partkey_t VALUES (200);
INSERT 0 1
-- cleanup
DROP TABLE parted;
DROP TABLE
DROP TABLE list_parted;
DROP TABLE
DROP TABLE range_parted;
DROP TABLE
DROP TABLE list_parted2;
DROP TABLE
DROP TABLE range_parted2;
DROP TABLE
DROP TABLE range_parted3;
DROP TABLE
DROP TABLE partkey_t;
DROP TABLE
DROP TABLE hash_parted;
DROP TABLE
DROP TABLE hash_parted2;
DROP TABLE
DROP OPERATOR CLASS test_int4_ops USING btree;
DROP OPERATOR CLASS
DROP FUNCTION my_int4_sort(int4,int4);
DROP FUNCTION
-- comments on partitioned tables columns
CREATE TABLE parted_col_comment (a int, b text) PARTITION BY LIST (a);
CREATE TABLE
COMMENT ON TABLE parted_col_comment IS 'Am partitioned table';
COMMENT
COMMENT ON COLUMN parted_col_comment.a IS 'Partition key';
COMMENT
SELECT obj_description('parted_col_comment'::regclass);
   obj_description    
----------------------
 Am partitioned table
(1 row)

\d+ parted_col_comment
                              Table "public.parted_col_comment"
 Column |  Type   | Collation | Nullable | Default | Storage  | Stats target |  Description  
--------+---------+-----------+----------+---------+----------+--------------+---------------
 a      | integer |           |          |         | plain    |              | Partition key
 b      | text    |           |          |         | extended |              | 
Partition key: LIST (a)
Number of partitions: 0

DROP TABLE parted_col_comment;
DROP TABLE
-- partition on boolean column
create table boolspart (a bool) partition by list (a);
CREATE TABLE
create table boolspart_t partition of boolspart for values in (true);
CREATE TABLE
create table boolspart_f partition of boolspart for values in (false);
CREATE TABLE
\d+ boolspart
                                 Table "public.boolspart"
 Column |  Type   | Collation | Nullable | Default | Storage | Stats target | Description 
--------+---------+-----------+----------+---------+---------+--------------+-------------
 a      | boolean |           |          |         | plain   |              | 
Partition key: LIST (a)
Partitions: boolspart_f FOR VALUES IN (false),
            boolspart_t FOR VALUES IN (true)

drop table boolspart;
DROP TABLE
