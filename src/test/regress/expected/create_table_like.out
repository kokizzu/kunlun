/* Test inheritance of structure (LIKE) */
DROP TABLE if exists inhx;
psql:sql/create_table_like.sql:2: NOTICE:  table "inhx" does not exist, skipping
DROP TABLE
CREATE TABLE inhx (xx text DEFAULT 'text');
CREATE TABLE
CREATE TABLE ctla (aa TEXT);
CREATE TABLE
CREATE TABLE ctlb (bb TEXT) INHERITS (ctla);
CREATE TABLE
CREATE TABLE foo (LIKE nonexistent);
psql:sql/create_table_like.sql:7: ERROR:  relation "nonexistent" does not exist
LINE 1: CREATE TABLE foo (LIKE nonexistent);
                               ^
CREATE TABLE inhe (ee text, LIKE inhx) inherits (ctlb);
CREATE TABLE
INSERT INTO inhe VALUES ('ee-col1', 'ee-col2', DEFAULT, 'ee-col4');
INSERT 0 1
SELECT * FROM inhe; /* Columns aa, bb, xx value NULL, ee */
   aa    |   bb    | ee |   xx    
---------+---------+----+---------
 ee-col1 | ee-col2 |    | ee-col4
(1 row)

SELECT * FROM inhx; /* Empty set since LIKE inherits structure only */
 xx 
----
(0 rows)

SELECT * FROM ctlb; /* Has ee entry */
   aa    |   bb    
---------+---------
 ee-col1 | ee-col2
(1 row)

SELECT * FROM ctla; /* Has ee entry */
   aa    
---------
 ee-col1
(1 row)

CREATE TABLE inhf (LIKE inhx, LIKE inhx); /* Throw error */
psql:sql/create_table_like.sql:16: ERROR:  column "xx" specified more than once
CREATE TABLE inhf (LIKE inhx INCLUDING DEFAULTS INCLUDING CONSTRAINTS);
CREATE TABLE
INSERT INTO inhf DEFAULT VALUES;
INSERT 0 1
SELECT * FROM inhf; /* Single entry with value 'text' */
  xx  
------
 text
(1 row)

ALTER TABLE inhx add constraint foo CHECK (xx = 'text');
ALTER TABLE
ALTER TABLE inhx ADD PRIMARY KEY (xx);
ALTER TABLE
CREATE TABLE inhg (LIKE inhx); /* Doesn't copy constraint */
CREATE TABLE
INSERT INTO inhg VALUES ('foo');
INSERT 0 1
DROP TABLE inhg;
DROP TABLE
CREATE TABLE inhg (x text, LIKE inhx INCLUDING CONSTRAINTS, y text); /* Copies constraints */
CREATE TABLE
INSERT INTO inhg VALUES ('x', 'text', 'y'); /* Succeeds */
INSERT 0 1
INSERT INTO inhg VALUES ('x', 'text', 'y'); /* Succeeds -- Unique constraints not copied */
INSERT 0 1
INSERT INTO inhg VALUES ('x', 'foo',  'y');  /* fails due to constraint */
psql:sql/create_table_like.sql:29: ERROR:  new row for relation "inhg" violates check constraint "foo"
DETAIL:  Failing row contains (x, foo, y).
SELECT * FROM inhg; /* Two records with three columns in order x=x, xx=text, y=y */
 x |  xx  | y 
---+------+---
 x | text | y
 x | text | y
(2 rows)

DROP TABLE inhg;
DROP TABLE
CREATE TABLE test_like_id_1 (a bigint GENERATED ALWAYS AS IDENTITY, b text);
CREATE TABLE
\d test_like_id_1
                        Table "public.test_like_id_1"
 Column |  Type  |    Collation     | Nullable |           Default            
--------+--------+------------------+----------+------------------------------
 a      | bigint |                  | not null | generated always as identity
 b      | text   | utf8mb4_0900_bin |          | 

INSERT INTO test_like_id_1 (b) VALUES ('b1');
INSERT 0 1
SELECT * FROM test_like_id_1;
 a | b  
---+----
 1 | b1
(1 row)

CREATE TABLE test_like_id_2 (LIKE test_like_id_1);
CREATE TABLE
\d test_like_id_2
              Table "public.test_like_id_2"
 Column |  Type  |    Collation     | Nullable | Default 
--------+--------+------------------+----------+---------
 a      | bigint |                  | not null | 
 b      | text   | utf8mb4_0900_bin |          | 

INSERT INTO test_like_id_2 (b) VALUES ('b2');
psql:sql/create_table_like.sql:39: ERROR:  null value in column "a" violates not-null constraint
DETAIL:  Failing row contains (null, b2).
SELECT * FROM test_like_id_2;  -- identity was not copied
 a | b 
---+---
(0 rows)

CREATE TABLE test_like_id_3 (LIKE test_like_id_1 INCLUDING IDENTITY);
CREATE TABLE
\d test_like_id_3
                        Table "public.test_like_id_3"
 Column |  Type  |    Collation     | Nullable |           Default            
--------+--------+------------------+----------+------------------------------
 a      | bigint |                  | not null | generated always as identity
 b      | text   | utf8mb4_0900_bin |          | 

INSERT INTO test_like_id_3 (b) VALUES ('b3');
INSERT 0 1
SELECT * FROM test_like_id_3;  -- identity was copied and applied
 a | b  
---+----
 1 | b3
(1 row)

DROP TABLE test_like_id_1;
DROP TABLE
DROP TABLE test_like_id_2;
DROP TABLE
DROP TABLE test_like_id_3;
DROP TABLE
CREATE TABLE inhg (x text, LIKE inhx INCLUDING INDEXES, y text); /* copies indexes */
CREATE TABLE
INSERT INTO inhg VALUES (5, 10);
INSERT 0 1
INSERT INTO inhg VALUES (20, 10); -- should fail
psql:sql/create_table_like.sql:51: ERROR:  Kunlun-db: MySQL storage node (1, 1) returned error: 1062, Duplicate entry '10' for key 'inhg.PRIMARY'.
DROP TABLE inhg;
DROP TABLE
/* Multiple primary keys creation should fail */
CREATE TABLE inhg (x text, LIKE inhx INCLUDING INDEXES, PRIMARY KEY(x)); /* fails */
psql:sql/create_table_like.sql:54: ERROR:  multiple primary keys for table "inhg" are not allowed
CREATE TABLE inhz (xx text DEFAULT 'text', yy int UNIQUE);
CREATE TABLE
--CREATE UNIQUE INDEX inhz_xx_idx on inhz (xx) WHERE xx <> 'test';
CREATE UNIQUE INDEX inhz_xx_idx on inhz (xx);
CREATE INDEX
/* Ok to create multiple unique indexes */
CREATE TABLE inhg (x text UNIQUE, LIKE inhz INCLUDING INDEXES);
CREATE TABLE
INSERT INTO inhg (xx, yy, x) VALUES ('test', 5, 10);
INSERT 0 1
INSERT INTO inhg (xx, yy, x) VALUES ('test', 10, 15);
psql:sql/create_table_like.sql:61: ERROR:  Kunlun-db: MySQL storage node (1, 1) returned error: 1062, Duplicate entry 'test' for key 'inhg.inhg_xx_idx'.
INSERT INTO inhg (xx, yy, x) VALUES ('foo', 10, 15); -- should fail
INSERT 0 1
DROP TABLE inhg;
DROP TABLE
DROP TABLE inhz;
DROP TABLE
DROP TABLE inhx;
DROP TABLE
-- including storage and comments
CREATE TABLE ctlt1 (a text CHECK (length(a) > 2) PRIMARY KEY, b text);
CREATE TABLE
CREATE INDEX ctlt1_b_key ON ctlt1 (b);
CREATE INDEX
--CREATE INDEX ctlt1_fnidx ON ctlt1 ((a || b));
--CREATE STATISTICS ctlt1_a_b_stat ON a,b FROM ctlt1;
--COMMENT ON STATISTICS ctlt1_a_b_stat IS 'ab stats';
COMMENT ON COLUMN ctlt1.a IS 'A';
COMMENT
COMMENT ON COLUMN ctlt1.b IS 'B';
COMMENT
COMMENT ON CONSTRAINT ctlt1_a_check ON ctlt1 IS 't1_a_check';
COMMENT
COMMENT ON INDEX ctlt1_pkey IS 'index pkey';
COMMENT
COMMENT ON INDEX ctlt1_b_key IS 'index b_key';
COMMENT
--ALTER TABLE ctlt1 ALTER COLUMN a SET STORAGE MAIN;
CREATE TABLE ctlt2 (c text);
CREATE TABLE
--ALTER TABLE ctlt2 ALTER COLUMN c SET STORAGE EXTERNAL;
COMMENT ON COLUMN ctlt2.c IS 'C';
COMMENT
CREATE TABLE ctlt3 (a text CHECK (length(a) < 5), c text);
CREATE TABLE
--ALTER TABLE ctlt3 ALTER COLUMN c SET STORAGE EXTERNAL;
--ALTER TABLE ctlt3 ALTER COLUMN a SET STORAGE MAIN;
COMMENT ON COLUMN ctlt3.a IS 'A3';
COMMENT
COMMENT ON COLUMN ctlt3.c IS 'C';
COMMENT
COMMENT ON CONSTRAINT ctlt3_a_check ON ctlt3 IS 't3_a_check';
COMMENT
CREATE TABLE ctlt4 (a text, c text);
CREATE TABLE
--ALTER TABLE ctlt4 ALTER COLUMN c SET STORAGE EXTERNAL;
CREATE TABLE ctlt12_storage (LIKE ctlt1 INCLUDING STORAGE, LIKE ctlt2 INCLUDING STORAGE);
CREATE TABLE
CREATE TABLE ctlt12_comments (LIKE ctlt1 INCLUDING COMMENTS, LIKE ctlt2 INCLUDING COMMENTS);
CREATE TABLE
CREATE TABLE ctlt_all (LIKE ctlt1 INCLUDING ALL);
CREATE TABLE
\d+ ctlt_all
                                    Table "public.ctlt_all"
 Column | Type |    Collation     | Nullable | Default | Storage  | Stats target | Description 
--------+------+------------------+----------+---------+----------+--------------+-------------
 a      | text | utf8mb4_0900_bin | not null |         | extended |              | A
 b      | text | utf8mb4_0900_bin |          |         | extended |              | B
Indexes:
    "ctlt_all_pkey" PRIMARY KEY, btree (a NULLS FIRST)
    "ctlt_all_b_idx" btree (b NULLS FIRST)
Check constraints:
    "ctlt1_a_check" CHECK (length(a) > 2)
Options: shard=1

SELECT c.relname, objsubid, description FROM pg_description, pg_index i, pg_class c WHERE classoid = 'pg_class'::regclass AND objoid = i.indexrelid AND c.oid = i.indexrelid AND i.indrelid = 'ctlt_all'::regclass ORDER BY c.relname, objsubid;
    relname     | objsubid | description 
----------------+----------+-------------
 ctlt_all_b_idx |        0 | index b_key
 ctlt_all_pkey  |        0 | index pkey
(2 rows)

SELECT s.stxname, objsubid, description FROM pg_description, pg_statistic_ext s WHERE classoid = 'pg_statistic_ext'::regclass AND objoid = s.oid AND s.stxrelid = 'ctlt_all'::regclass ORDER BY s.stxname, objsubid;
 stxname | objsubid | description 
---------+----------+-------------
(0 rows)

DROP TABLE ctlt1 CASCADE;
DROP TABLE
DROP TABLE ctlt2 CASCADE;
DROP TABLE
DROP TABLE ctlt3 CASCADE;
DROP TABLE
DROP TABLE ctlt4 CASCADE;
DROP TABLE
DROP TABLE ctlt12_storage CASCADE;
DROP TABLE
DROP TABLE ctlt12_comments CASCADE;
DROP TABLE
DROP TABLE ctlt_all CASCADE;
DROP TABLE
/* LIKE with other relation kinds */
CREATE TABLE ctlt4 (a int, b text);
CREATE TABLE
CREATE SEQUENCE ctlseq1;
CREATE SEQUENCE
CREATE TABLE ctlt10 (LIKE ctlseq1);  -- fail
psql:sql/create_table_like.sql:115: ERROR:  "ctlseq1" is not a table, view, materialized view, composite type, or foreign table
LINE 1: CREATE TABLE ctlt10 (LIKE ctlseq1);
                                  ^
CREATE VIEW ctlv1 AS SELECT * FROM ctlt4;
CREATE VIEW
CREATE TABLE ctlt11 (LIKE ctlv1);
CREATE TABLE
CREATE TABLE ctlt11a (LIKE ctlv1 INCLUDING ALL);
CREATE TABLE
CREATE TYPE ctlty1 AS (a int, b text);
CREATE TYPE
CREATE TABLE ctlt12 (LIKE ctlty1);
CREATE TABLE
DROP SEQUENCE ctlseq1;
DROP SEQUENCE
DROP TYPE ctlty1;
DROP TYPE
DROP VIEW ctlv1;
DROP VIEW
DROP TABLE IF EXISTS ctlt4;
DROP TABLE
DROP TABLE IF EXISTS ctlt10;
psql:sql/create_table_like.sql:128: NOTICE:  table "ctlt10" does not exist, skipping
DROP TABLE
DROP TABLE IF EXISTS ctlt11;
DROP TABLE
DROP TABLE IF EXISTS ctlt11a;
DROP TABLE
DROP TABLE IF EXISTS ctlt12;
DROP TABLE
/* LIKE WITH OIDS */
CREATE TABLE no_oid (y INTEGER);
CREATE TABLE
CREATE TABLE like_test2 (z INTEGER, LIKE no_oid);
CREATE TABLE
SELECT oid FROM like_test2; -- fail
psql:sql/create_table_like.sql:136: ERROR:  column "oid" does not exist
LINE 1: SELECT oid FROM like_test2;
               ^
DROP TABLE no_oid;
DROP TABLE
DROP TABLE like_test2;
DROP TABLE
