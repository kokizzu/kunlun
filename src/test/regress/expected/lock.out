--
-- Test the LOCK statement
--
-- Setup
CREATE SCHEMA lock_schema1;
CREATE SCHEMA
SET search_path = lock_schema1;
SET
CREATE TABLE lock_tbl1 (a BIGINT);
CREATE TABLE
CREATE TABLE lock_tbl1a (a BIGINT);
CREATE TABLE
CREATE VIEW lock_view1 AS SELECT * FROM lock_tbl1;
CREATE VIEW
CREATE VIEW lock_view2(a,b) AS SELECT * FROM lock_tbl1, lock_tbl1a;
CREATE VIEW
CREATE VIEW lock_view3 AS SELECT * from lock_view2;
CREATE VIEW
CREATE VIEW lock_view4 AS SELECT (select a from lock_tbl1a limit 1) from lock_tbl1;
CREATE VIEW
CREATE VIEW lock_view5 AS SELECT * from lock_tbl1 where a in (select * from lock_tbl1a);
CREATE VIEW
CREATE VIEW lock_view6 AS SELECT * from (select * from lock_tbl1) sub;
CREATE VIEW
CREATE ROLE regress_rol_lock1;
CREATE ROLE
ALTER ROLE regress_rol_lock1 SET search_path = lock_schema1;
ALTER ROLE
GRANT USAGE ON SCHEMA lock_schema1 TO regress_rol_lock1;
GRANT
-- Try all valid lock options; also try omitting the optional TABLE keyword.
BEGIN TRANSACTION;
BEGIN
LOCK TABLE lock_tbl1 IN ACCESS SHARE MODE;
LOCK TABLE
LOCK lock_tbl1 IN ROW SHARE MODE;
LOCK TABLE
LOCK TABLE lock_tbl1 IN ROW EXCLUSIVE MODE;
LOCK TABLE
LOCK TABLE lock_tbl1 IN SHARE UPDATE EXCLUSIVE MODE;
LOCK TABLE
LOCK TABLE lock_tbl1 IN SHARE MODE;
LOCK TABLE
LOCK lock_tbl1 IN SHARE ROW EXCLUSIVE MODE;
LOCK TABLE
LOCK TABLE lock_tbl1 IN EXCLUSIVE MODE;
LOCK TABLE
LOCK TABLE lock_tbl1 IN ACCESS EXCLUSIVE MODE;
LOCK TABLE
ROLLBACK;
ROLLBACK
-- Try using NOWAIT along with valid options.
BEGIN TRANSACTION;
BEGIN
LOCK TABLE lock_tbl1 IN ACCESS SHARE MODE NOWAIT;
LOCK TABLE
LOCK TABLE lock_tbl1 IN ROW SHARE MODE NOWAIT;
LOCK TABLE
LOCK TABLE lock_tbl1 IN ROW EXCLUSIVE MODE NOWAIT;
LOCK TABLE
LOCK TABLE lock_tbl1 IN SHARE UPDATE EXCLUSIVE MODE NOWAIT;
LOCK TABLE
LOCK TABLE lock_tbl1 IN SHARE MODE NOWAIT;
LOCK TABLE
LOCK TABLE lock_tbl1 IN SHARE ROW EXCLUSIVE MODE NOWAIT;
LOCK TABLE
LOCK TABLE lock_tbl1 IN EXCLUSIVE MODE NOWAIT;
LOCK TABLE
LOCK TABLE lock_tbl1 IN ACCESS EXCLUSIVE MODE NOWAIT;
LOCK TABLE
ROLLBACK;
ROLLBACK
-- Verify that we can lock views.
BEGIN TRANSACTION;
BEGIN
LOCK TABLE lock_view1 IN EXCLUSIVE MODE;
LOCK TABLE
-- lock_view1 and lock_tbl1 are locked.
select relname from pg_locks l, pg_class c
 where l.relation = c.oid and relname like '%lock_%' and mode = 'ExclusiveLock'
 order by relname;
  relname   
------------
 lock_tbl1
 lock_view1
(2 rows)

ROLLBACK;
ROLLBACK
BEGIN TRANSACTION;
BEGIN
LOCK TABLE lock_view2 IN EXCLUSIVE MODE;
LOCK TABLE
-- lock_view1, lock_tbl1, and lock_tbl1a are locked.
select relname from pg_locks l, pg_class c
 where l.relation = c.oid and relname like '%lock_%' and mode = 'ExclusiveLock'
 order by relname;
  relname   
------------
 lock_tbl1
 lock_tbl1a
 lock_view2
(3 rows)

ROLLBACK;
ROLLBACK
BEGIN TRANSACTION;
BEGIN
LOCK TABLE lock_view3 IN EXCLUSIVE MODE;
LOCK TABLE
-- lock_view3, lock_view2, lock_tbl1, and lock_tbl1a are locked recursively.
select relname from pg_locks l, pg_class c
 where l.relation = c.oid and relname like '%lock_%' and mode = 'ExclusiveLock'
 order by relname;
  relname   
------------
 lock_tbl1
 lock_tbl1a
 lock_view2
 lock_view3
(4 rows)

ROLLBACK;
ROLLBACK
BEGIN TRANSACTION;
BEGIN
LOCK TABLE lock_view4 IN EXCLUSIVE MODE;
LOCK TABLE
-- lock_view4, lock_tbl1, and lock_tbl1a are locked.
select relname from pg_locks l, pg_class c
 where l.relation = c.oid and relname like '%lock_%' and mode = 'ExclusiveLock'
 order by relname;
  relname   
------------
 lock_tbl1
 lock_tbl1a
 lock_view4
(3 rows)

ROLLBACK;
ROLLBACK
BEGIN TRANSACTION;
BEGIN
LOCK TABLE lock_view5 IN EXCLUSIVE MODE;
LOCK TABLE
-- lock_view5, lock_tbl1, and lock_tbl1a are locked.
select relname from pg_locks l, pg_class c
 where l.relation = c.oid and relname like '%lock_%' and mode = 'ExclusiveLock'
 order by relname;
  relname   
------------
 lock_tbl1
 lock_tbl1a
 lock_view5
(3 rows)

ROLLBACK;
ROLLBACK
BEGIN TRANSACTION;
BEGIN
LOCK TABLE lock_view6 IN EXCLUSIVE MODE;
LOCK TABLE
-- lock_view6 an lock_tbl1 are locked.
select relname from pg_locks l, pg_class c
 where l.relation = c.oid and relname like '%lock_%' and mode = 'ExclusiveLock'
 order by relname;
  relname   
------------
 lock_tbl1
 lock_view6
(2 rows)

ROLLBACK;
ROLLBACK
-- detecting infinite recursions in view definitions
--CREATE OR REPLACE VIEW lock_view2 AS SELECT * from lock_view3;
--BEGIN TRANSACTION;
--LOCK TABLE lock_view2 IN EXCLUSIVE MODE;
--ROLLBACK;
--CREATE VIEW lock_view7 AS SELECT * from lock_view2;
--BEGIN TRANSACTION;
--LOCK TABLE lock_view7 IN EXCLUSIVE MODE;
--ROLLBACK;
-- Verify that we can lock a table with inheritance children.
CREATE TABLE lock_tbl2 (b BIGINT) INHERITS (lock_tbl1);
CREATE TABLE
CREATE TABLE lock_tbl3 () INHERITS (lock_tbl2);
CREATE TABLE
BEGIN TRANSACTION;
BEGIN
LOCK TABLE lock_tbl1 * IN ACCESS EXCLUSIVE MODE;
LOCK TABLE
ROLLBACK;
ROLLBACK
-- Verify that we can't lock a child table just because we have permission
-- on the parent, but that we can lock the parent only.
GRANT UPDATE ON TABLE lock_tbl1 TO regress_rol_lock1;
GRANT
SET ROLE regress_rol_lock1;
SET
BEGIN;
BEGIN
LOCK TABLE lock_tbl1 * IN ACCESS EXCLUSIVE MODE;
psql:sql/lock.sql:109: ERROR:  permission denied for table lock_tbl2
ROLLBACK;
ROLLBACK
BEGIN;
BEGIN
LOCK TABLE ONLY lock_tbl1;
LOCK TABLE
ROLLBACK;
ROLLBACK
RESET ROLE;
RESET
--
-- Clean up
--
DROP VIEW lock_view7;
psql:sql/lock.sql:119: ERROR:  view "lock_view7" does not exist
DROP VIEW lock_view6;
DROP VIEW
DROP VIEW lock_view5;
DROP VIEW
DROP VIEW lock_view4;
DROP VIEW
DROP VIEW lock_view3 CASCADE;
DROP VIEW
DROP VIEW lock_view1;
DROP VIEW
DROP TABLE lock_tbl3;
DROP TABLE
DROP TABLE lock_tbl2;
DROP TABLE
DROP TABLE lock_tbl1 cascade;
psql:sql/lock.sql:127: NOTICE:  drop cascades to view lock_view2
DROP TABLE
DROP TABLE lock_tbl1a cascade;
DROP TABLE
DROP SCHEMA lock_schema1 CASCADE;
DROP SCHEMA
DROP ROLE regress_rol_lock1;
DROP ROLE
-- atomic ops tests
RESET search_path;
RESET
SELECT test_atomic_ops();
psql:sql/lock.sql:135: ERROR:  function test_atomic_ops() does not exist
LINE 1: SELECT test_atomic_ops();
               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
