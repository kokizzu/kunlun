--
-- BIT types
--
--
-- Build tables for testing
--
CREATE TABLE BIT_TABLE(b BIT(11));
CREATE TABLE
INSERT INTO BIT_TABLE VALUES (B'10'); -- too short
psql:sql/bit.sql:11: ERROR:  bit string length 2 does not match type bit(11)
INSERT INTO BIT_TABLE VALUES (B'00000000000');
INSERT 0 1
INSERT INTO BIT_TABLE VALUES (B'11011000000');
INSERT 0 1
INSERT INTO BIT_TABLE VALUES (B'01010101010');
INSERT 0 1
INSERT INTO BIT_TABLE VALUES (B'101011111010'); -- too long
psql:sql/bit.sql:15: ERROR:  bit string length 12 does not match type bit(11)
--INSERT INTO BIT_TABLE VALUES ('X554');
--INSERT INTO BIT_TABLE VALUES ('X555');
SELECT * FROM BIT_TABLE;
      b      
-------------
 00000000000
 11011000000
 01010101010
(3 rows)

CREATE TABLE VARBIT_TABLE(v BIT VARYING(11));
CREATE TABLE
INSERT INTO VARBIT_TABLE VALUES (B'');
INSERT 0 1
INSERT INTO VARBIT_TABLE VALUES (B'0');
INSERT 0 1
INSERT INTO VARBIT_TABLE VALUES (B'010101');
INSERT 0 1
INSERT INTO VARBIT_TABLE VALUES (B'01010101010');
INSERT 0 1
INSERT INTO VARBIT_TABLE VALUES (B'101011111010'); -- too long
psql:sql/bit.sql:27: ERROR:  bit string too long for type bit varying(11)
--INSERT INTO VARBIT_TABLE VALUES ('X554');
--INSERT INTO VARBIT_TABLE VALUES ('X555');
SELECT * FROM VARBIT_TABLE;
      v      
-------------
 00000000000
 00000000000
 00000010101
 01010101010
(4 rows)

-- Concatenation
SELECT v, b, (v || b) AS concat
       FROM BIT_TABLE, VARBIT_TABLE
       ORDER BY 3;
      v      |      b      |         concat         
-------------+-------------+------------------------
 00000000000 | 00000000000 | 0000000000000000000000
 00000000000 | 00000000000 | 0000000000000000000000
 00000000000 | 01010101010 | 0000000000001010101010
 00000000000 | 01010101010 | 0000000000001010101010
 00000000000 | 11011000000 | 0000000000011011000000
 00000000000 | 11011000000 | 0000000000011011000000
 00000010101 | 00000000000 | 0000001010100000000000
 00000010101 | 01010101010 | 0000001010101010101010
 00000010101 | 11011000000 | 0000001010111011000000
 01010101010 | 00000000000 | 0101010101000000000000
 01010101010 | 01010101010 | 0101010101001010101010
 01010101010 | 11011000000 | 0101010101011011000000
(12 rows)

-- Length
SELECT b, length(b) AS lb
       FROM BIT_TABLE;
      b      | lb 
-------------+----
 00000000000 |  2
 11011000000 |  2
 01010101010 |  2
(3 rows)

SELECT v, length(v) AS lv
       FROM VARBIT_TABLE;
      v      | lv 
-------------+----
 00000000000 |  2
 00000000000 |  2
 00000010101 |  2
 01010101010 |  2
(4 rows)

-- Substring
SELECT b,
       SUBSTRING(b FROM 2 FOR 4) AS sub_2_4,
       SUBSTRING(b FROM 7 FOR 13) AS sub_7_13,
       SUBSTRING(b FROM 6) AS sub_6
       FROM BIT_TABLE;
      b      | sub_2_4 | sub_7_13 | sub_6  
-------------+---------+----------+--------
 00000000000 | 0000    | 00000    | 000000
 11011000000 | 1011    | 00000    | 000000
 01010101010 | 1010    | 01010    | 101010
(3 rows)

SELECT v,
       SUBSTRING(v FROM 2 FOR 4) AS sub_2_4,
       SUBSTRING(v FROM 7 FOR 13) AS sub_7_13,
       SUBSTRING(v FROM 6) AS sub_6
       FROM VARBIT_TABLE;
      v      | sub_2_4 | sub_7_13 | sub_6  
-------------+---------+----------+--------
 00000000000 | 0000    | 00000    | 000000
 00000000000 | 0000    | 00000    | 000000
 00000010101 | 0000    | 10101    | 010101
 01010101010 | 1010    | 01010    | 101010
(4 rows)

--- Bit operations
DROP TABLE varbit_table;
DROP TABLE
CREATE TABLE varbit_table (a BIT VARYING(16), b BIT VARYING(16));
CREATE TABLE
COPY varbit_table FROM stdin;
COPY 10
SELECT a, b, ~a AS "~ a", a & b AS "a & b",
       a | b AS "a | b", a # b AS "a # b" FROM varbit_table;
psql:sql/bit.sql:73: ERROR:  "~" is not a valid binary digit
SELECT a,b,a<b AS "a<b",a<=b AS "a<=b",a=b AS "a=b",
        a>=b AS "a>=b",a>b AS "a>b",a<>b AS "a<>b" FROM varbit_table;
     a     |     b     | a<b | a<=b | a=b | a>=b | a>b | a<>b 
-----------+-----------+-----+------+-----+------+-----+------
 000001111 | 000010000 | t   | t    | f   | f    | f   | t
 000011111 | 000010001 | f   | f    | f   | t    | t   | t
 000101111 | 000010010 | f   | f    | f   | t    | t   | t
 000111111 | 000010011 | f   | f    | f   | t    | t   | t
 010001111 | 000000100 | f   | f    | f   | t    | t   | t
 000001111 | 000010000 | t   | t    | f   | f    | f   | t
 000100011 | 011111111 | t   | t    | f   | f    | f   | t
 001101000 | 001101000 | f   | t    | t   | t    | f   | f
 001010000 | 010101111 | f   | f    | f   | t    | t   | t
 000110100 | 011110101 | t   | t    | f   | f    | f   | t
(10 rows)

SELECT a,a<<4 AS "a<<4",b,b>>2 AS "b>>2" FROM varbit_table;
psql:sql/bit.sql:76: ERROR:  "~" is not a valid binary digit
DROP TABLE varbit_table;
DROP TABLE
--- Bit operations
DROP TABLE bit_table;
DROP TABLE
CREATE TABLE bit_table (a BIT(16), b BIT(16));
CREATE TABLE
COPY bit_table FROM stdin;
COPY 10
SELECT a,b,~a AS "~ a",a & b AS "a & b",
	a|b AS "a | b", a # b AS "a # b" FROM bit_table;
psql:sql/bit.sql:97: ERROR:  bit string length 9 does not match type bit(16)
SELECT a,b,a<b AS "a<b",a<=b AS "a<=b",a=b AS "a=b",
        a>=b AS "a>=b",a>b AS "a>b",a<>b AS "a<>b" FROM bit_table;
psql:sql/bit.sql:99: ERROR:  bit string length 9 does not match type bit(16)
SELECT a,a<<4 AS "a<<4",b,b>>2 AS "b>>2" FROM bit_table;
psql:sql/bit.sql:100: ERROR:  bit string length 9 does not match type bit(16)
DROP TABLE bit_table;
DROP TABLE
-- The following should fail
select B'001' & B'10';
psql:sql/bit.sql:106: ERROR:  cannot AND bit strings of different sizes
select B'0111' | B'011';
psql:sql/bit.sql:107: ERROR:  cannot OR bit strings of different sizes
select B'0010' # B'011101';
psql:sql/bit.sql:108: ERROR:  cannot XOR bit strings of different sizes
-- More position tests, checking all the boundary cases
SELECT POSITION(B'1010' IN B'0000101');   -- 0
 position 
----------
        0
(1 row)

SELECT POSITION(B'1010' IN B'00001010');  -- 5
 position 
----------
        5
(1 row)

SELECT POSITION(B'1010' IN B'00000101');  -- 0
 position 
----------
        0
(1 row)

SELECT POSITION(B'1010' IN B'000001010');  -- 6
 position 
----------
        6
(1 row)

SELECT POSITION(B'' IN B'00001010');  -- 1
 position 
----------
        1
(1 row)

SELECT POSITION(B'0' IN B'');  -- 0
 position 
----------
        0
(1 row)

SELECT POSITION(B'' IN B'');  -- 0
 position 
----------
        0
(1 row)

SELECT POSITION(B'101101' IN B'001011011011011000');  -- 3
 position 
----------
        3
(1 row)

SELECT POSITION(B'10110110' IN B'001011011011010');  -- 3
 position 
----------
        3
(1 row)

SELECT POSITION(B'1011011011011' IN B'001011011011011');  -- 3
 position 
----------
        3
(1 row)

SELECT POSITION(B'1011011011011' IN B'00001011011011011');  -- 5
 position 
----------
        5
(1 row)

SELECT POSITION(B'11101011' IN B'11101011'); -- 1
 position 
----------
        1
(1 row)

SELECT POSITION(B'11101011' IN B'011101011'); -- 2
 position 
----------
        2
(1 row)

SELECT POSITION(B'11101011' IN B'00011101011'); -- 4
 position 
----------
        4
(1 row)

SELECT POSITION(B'11101011' IN B'0000011101011'); -- 6
 position 
----------
        6
(1 row)

SELECT POSITION(B'111010110' IN B'111010110'); -- 1
 position 
----------
        1
(1 row)

SELECT POSITION(B'111010110' IN B'0111010110'); -- 2
 position 
----------
        2
(1 row)

SELECT POSITION(B'111010110' IN B'000111010110'); -- 4
 position 
----------
        4
(1 row)

SELECT POSITION(B'111010110' IN B'00000111010110'); -- 6
 position 
----------
        6
(1 row)

SELECT POSITION(B'111010110' IN B'11101011'); -- 0
 position 
----------
        0
(1 row)

SELECT POSITION(B'111010110' IN B'011101011'); -- 0
 position 
----------
        0
(1 row)

SELECT POSITION(B'111010110' IN B'00011101011'); -- 0
 position 
----------
        0
(1 row)

SELECT POSITION(B'111010110' IN B'0000011101011'); -- 0
 position 
----------
        0
(1 row)

SELECT POSITION(B'111010110' IN B'111010110'); -- 1
 position 
----------
        1
(1 row)

SELECT POSITION(B'111010110' IN B'0111010110'); -- 2
 position 
----------
        2
(1 row)

SELECT POSITION(B'111010110' IN B'000111010110'); -- 4
 position 
----------
        4
(1 row)

SELECT POSITION(B'111010110' IN B'00000111010110'); -- 6
 position 
----------
        6
(1 row)

SELECT POSITION(B'111010110' IN B'000001110101111101011'); -- 0
 position 
----------
        0
(1 row)

SELECT POSITION(B'111010110' IN B'0000001110101111101011'); -- 0
 position 
----------
        0
(1 row)

SELECT POSITION(B'111010110' IN B'000000001110101111101011'); -- 0
 position 
----------
        0
(1 row)

SELECT POSITION(B'111010110' IN B'00000000001110101111101011'); -- 0
 position 
----------
        0
(1 row)

SELECT POSITION(B'111010110' IN B'0000011101011111010110'); -- 14
 position 
----------
       14
(1 row)

SELECT POSITION(B'111010110' IN B'00000011101011111010110'); -- 15
 position 
----------
       15
(1 row)

SELECT POSITION(B'111010110' IN B'0000000011101011111010110'); -- 17
 position 
----------
       17
(1 row)

SELECT POSITION(B'111010110' IN B'000000000011101011111010110'); -- 19
 position 
----------
       19
(1 row)

SELECT POSITION(B'000000000011101011111010110' IN B'000000000011101011111010110'); -- 1
 position 
----------
        1
(1 row)

SELECT POSITION(B'00000000011101011111010110' IN B'000000000011101011111010110'); -- 2
 position 
----------
        2
(1 row)

SELECT POSITION(B'0000000000011101011111010110' IN B'000000000011101011111010110'); -- 0
 position 
----------
        0
(1 row)

-- Shifting
CREATE TABLE BIT_SHIFT_TABLE(b BIT(16));
CREATE TABLE
INSERT INTO BIT_SHIFT_TABLE VALUES (B'1101100000000000');
INSERT 0 1
INSERT INTO BIT_SHIFT_TABLE SELECT b>>1 FROM BIT_SHIFT_TABLE;
INSERT 0 1
INSERT INTO BIT_SHIFT_TABLE SELECT b>>2 FROM BIT_SHIFT_TABLE;
INSERT 0 2
INSERT INTO BIT_SHIFT_TABLE SELECT b>>4 FROM BIT_SHIFT_TABLE;
INSERT 0 4
INSERT INTO BIT_SHIFT_TABLE SELECT b>>8 FROM BIT_SHIFT_TABLE;
psql:sql/bit.sql:166: ERROR:  bit string length 9 does not match type bit(16)
SELECT POSITION(B'1101' IN b),
       POSITION(B'11011' IN b),
       b
       FROM BIT_SHIFT_TABLE ;
psql:sql/bit.sql:170: ERROR:  bit string length 9 does not match type bit(16)
CREATE TABLE VARBIT_SHIFT_TABLE(v BIT VARYING(20));
CREATE TABLE
INSERT INTO VARBIT_SHIFT_TABLE VALUES (B'11011');
INSERT 0 1
INSERT INTO VARBIT_SHIFT_TABLE SELECT CAST(v || B'0' AS BIT VARYING(6)) >>1 FROM VARBIT_SHIFT_TABLE;
INSERT 0 1
INSERT INTO VARBIT_SHIFT_TABLE SELECT CAST(v || B'00' AS BIT VARYING(8)) >>2 FROM VARBIT_SHIFT_TABLE;
INSERT 0 2
INSERT INTO VARBIT_SHIFT_TABLE SELECT CAST(v || B'0000' AS BIT VARYING(12)) >>4 FROM VARBIT_SHIFT_TABLE;
INSERT 0 4
INSERT INTO VARBIT_SHIFT_TABLE SELECT CAST(v || B'00000000' AS BIT VARYING(20)) >>8 FROM VARBIT_SHIFT_TABLE;
INSERT 0 8
SELECT POSITION(B'1101' IN v),
       POSITION(B'11011' IN v),
       v
       FROM VARBIT_SHIFT_TABLE ;
 position | position |          v           
----------+----------+----------------------
       16 |       16 | 00000000000000011011
        0 |        0 | 00000000000000000000
        0 |        0 | 00000000000000000000
        0 |        0 | 00000000000000000000
        0 |        0 | 00000000000000000000
        0 |        0 | 00000000000000000000
        0 |        0 | 00000000000000000000
        0 |        0 | 00000000000000000000
        0 |        0 | 00000000000000000000
        0 |        0 | 00000000000000000000
        0 |        0 | 00000000000000000000
        0 |        0 | 00000000000000000000
        0 |        0 | 00000000000000000000
        0 |        0 | 00000000000000000000
        0 |        0 | 00000000000000000000
        0 |        0 | 00000000000000000000
(16 rows)

DROP TABLE BIT_SHIFT_TABLE;
DROP TABLE
DROP TABLE VARBIT_SHIFT_TABLE;
DROP TABLE
-- Get/Set bit
SELECT get_bit(B'0101011000100', 10);
 get_bit 
---------
       1
(1 row)

SELECT set_bit(B'0101011000100100', 15, 1);
     set_bit      
------------------
 0101011000100101
(1 row)

SELECT set_bit(B'0101011000100100', 16, 1);	-- fail
psql:sql/bit.sql:191: ERROR:  bit index 16 out of valid range (0..15)
-- Overlay
SELECT overlay(B'0101011100' placing '001' from 2 for 3);
  overlay   
------------
 0001011100
(1 row)

SELECT overlay(B'0101011100' placing '101' from 6);
  overlay   
------------
 0101010100
(1 row)

SELECT overlay(B'0101011100' placing '001' from 11);
    overlay    
---------------
 0101011100001
(1 row)

SELECT overlay(B'0101011100' placing '001' from 20);
    overlay    
---------------
 0101011100001
(1 row)

-- This table is intentionally left around to exercise pg_dump/pg_upgrade
CREATE TABLE bit_defaults(
  b1 bit(4) DEFAULT '1001',
  b2 bit(4) DEFAULT B'0101',
  b3 bit varying(5) DEFAULT '1001',
  b4 bit varying(5) DEFAULT B'0101'
);
CREATE TABLE
\d bit_defaults
                     Table "public.bit_defaults"
 Column |      Type      | Collation | Nullable |       Default       
--------+----------------+-----------+----------+---------------------
 b1     | bit(4)         |           |          | '1001'::"bit"
 b2     | bit(4)         |           |          | '0101'::"bit"
 b3     | bit varying(5) |           |          | '1001'::bit varying
 b4     | bit varying(5) |           |          | '0101'::"bit"

INSERT INTO bit_defaults DEFAULT VALUES;
INSERT 0 1
TABLE bit_defaults;
  b1  |  b2  |  b3   |  b4   
------+------+-------+-------
 1001 | 0101 | 01001 | 00101
(1 row)

DROP TABLE bit_defaults;
DROP TABLE
