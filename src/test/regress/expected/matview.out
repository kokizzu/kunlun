-- create a table to use as a basis for views and materialized views in various combinations
DROP TABLE if exists mvtest_t cascade;
psql:sql/matview.sql:2: NOTICE:  table "mvtest_t" does not exist, skipping
DROP TABLE
CREATE TABLE mvtest_t (id int NOT NULL PRIMARY KEY, type varchar(50) NOT NULL, amt numeric NOT NULL);
CREATE TABLE
INSERT INTO mvtest_t VALUES
  (1, 'x', 2),
  (2, 'x', 3),
  (3, 'y', 5),
  (4, 'y', 7),
  (5, 'z', 11);
INSERT 0 5
-- we want a view based on the table, too, since views present additional challenges
CREATE VIEW mvtest_tv AS SELECT type, sum(amt) AS totamt FROM mvtest_t GROUP BY type;
CREATE VIEW
SELECT * FROM mvtest_tv ORDER BY type;
 type |         totamt          
------+-------------------------
 x    |  5.00000000000000000000
 y    | 12.00000000000000000000
 z    | 11.00000000000000000000
(3 rows)

-- create a materialized view with no data, and confirm correct behavior
EXPLAIN (costs off)
  CREATE MATERIALIZED VIEW mvtest_tm AS SELECT type, sum(amt) AS totamt FROM mvtest_t GROUP BY type WITH NO DATA;

CREATE MATERIALIZED VIEW mvtest_tm AS SELECT type, sum(amt) AS totamt FROM mvtest_t GROUP BY type WITH NO DATA;
CREATE MATERIALIZED VIEW
SELECT relispopulated FROM pg_class WHERE oid = 'mvtest_tm'::regclass;
 relispopulated 
----------------
 f
(1 row)

SELECT * FROM mvtest_tm ORDER BY type;
 type | totamt 
------+--------
(0 rows)

REFRESH MATERIALIZED VIEW mvtest_tm;
REFRESH MATERIALIZED VIEW
SELECT relispopulated FROM pg_class WHERE oid = 'mvtest_tm'::regclass;
 relispopulated 
----------------
 t
(1 row)

CREATE UNIQUE INDEX mvtest_tm_type ON mvtest_tm (type);
CREATE INDEX
SELECT * FROM mvtest_tm ORDER BY type;
 type |         totamt          
------+-------------------------
 x    |  5.00000000000000000000
 y    | 12.00000000000000000000
 z    | 11.00000000000000000000
(3 rows)

-- create various views
EXPLAIN (costs off)
  CREATE MATERIALIZED VIEW mvtest_tvm AS SELECT * FROM mvtest_tv ORDER BY type;

CREATE MATERIALIZED VIEW mvtest_tvm AS SELECT * FROM mvtest_tv ORDER BY type;
SELECT 3
SELECT * FROM mvtest_tvm;
 type |         totamt          
------+-------------------------
 x    |  5.00000000000000000000
 y    | 12.00000000000000000000
 z    | 11.00000000000000000000
(3 rows)

CREATE MATERIALIZED VIEW mvtest_tmm AS SELECT sum(totamt) AS grandtot FROM mvtest_tm;
SELECT 1
CREATE MATERIALIZED VIEW mvtest_tvmm AS SELECT sum(totamt) AS grandtot FROM mvtest_tvm;
SELECT 1
CREATE UNIQUE INDEX mvtest_tvmm_expr ON mvtest_tvmm ((grandtot > 0));
CREATE INDEX
CREATE UNIQUE INDEX mvtest_tvmm_pred ON mvtest_tvmm (grandtot) WHERE grandtot < 0;
psql:sql/matview.sql:34: ERROR:  partial index isn't supported for remote relations
CREATE VIEW mvtest_tvv AS SELECT sum(totamt) AS grandtot FROM mvtest_tv;
CREATE VIEW
EXPLAIN (costs off)
  CREATE MATERIALIZED VIEW mvtest_tvvm AS SELECT * FROM mvtest_tvv;

CREATE MATERIALIZED VIEW mvtest_tvvm AS SELECT * FROM mvtest_tvv;
SELECT 1
CREATE VIEW mvtest_tvvmv AS SELECT * FROM mvtest_tvvm;
CREATE VIEW
CREATE MATERIALIZED VIEW mvtest_bb AS SELECT * FROM mvtest_tvvmv;
SELECT 1
CREATE INDEX mvtest_aa ON mvtest_bb (grandtot);
CREATE INDEX
-- check that plans seem reasonable
\d+ mvtest_tvm
                                     Materialized view "public.mvtest_tvm"
 Column |         Type          |    Collation     | Nullable | Default | Storage  | Stats target | Description 
--------+-----------------------+------------------+----------+---------+----------+--------------+-------------
 type   | character varying(50) | utf8mb4_0900_bin |          |         | extended |              | 
 totamt | numeric               |                  |          |         | main     |              | 
View definition:
 SELECT mvtest_tv.type,
    mvtest_tv.totamt
   FROM mvtest_tv
  ORDER BY mvtest_tv.type NULLS FIRST;
Options: shard=1

\d+ mvtest_tvm
                                     Materialized view "public.mvtest_tvm"
 Column |         Type          |    Collation     | Nullable | Default | Storage  | Stats target | Description 
--------+-----------------------+------------------+----------+---------+----------+--------------+-------------
 type   | character varying(50) | utf8mb4_0900_bin |          |         | extended |              | 
 totamt | numeric               |                  |          |         | main     |              | 
View definition:
 SELECT mvtest_tv.type,
    mvtest_tv.totamt
   FROM mvtest_tv
  ORDER BY mvtest_tv.type NULLS FIRST;
Options: shard=1

\d+ mvtest_tvvm
                           Materialized view "public.mvtest_tvvm"
  Column  |  Type   | Collation | Nullable | Default | Storage | Stats target | Description 
----------+---------+-----------+----------+---------+---------+--------------+-------------
 grandtot | numeric |           |          |         | main    |              | 
View definition:
 SELECT mvtest_tvv.grandtot
   FROM mvtest_tvv;
Options: shard=1

\d+ mvtest_bb
                            Materialized view "public.mvtest_bb"
  Column  |  Type   | Collation | Nullable | Default | Storage | Stats target | Description 
----------+---------+-----------+----------+---------+---------+--------------+-------------
 grandtot | numeric |           |          |         | main    |              | 
Indexes:
    "mvtest_aa" btree (grandtot NULLS FIRST)
View definition:
 SELECT mvtest_tvvmv.grandtot
   FROM mvtest_tvvmv;
Options: shard=1

-- test schema behavior
CREATE SCHEMA mvtest_mvschema;
CREATE SCHEMA
ALTER MATERIALIZED VIEW mvtest_tvm SET SCHEMA mvtest_mvschema;
ALTER MATERIALIZED VIEW
\d+ mvtest_tvm
psql:sql/matview.sql:52: error: Did not find any relation named "mvtest_tvm".
\d+ mvtest_tvmm
                           Materialized view "public.mvtest_tvmm"
  Column  |  Type   | Collation | Nullable | Default | Storage | Stats target | Description 
----------+---------+-----------+----------+---------+---------+--------------+-------------
 grandtot | numeric |           |          |         | main    |              | 
Indexes:
    "mvtest_tvmm_expr" UNIQUE, btree ((grandtot > 0::numeric) NULLS FIRST)
View definition:
 SELECT sum(mvtest_tvm.totamt) AS grandtot
   FROM mvtest_mvschema.mvtest_tvm;
Options: shard=1

SET search_path = mvtest_mvschema, public;
SET
\d+ mvtest_tvm
                                 Materialized view "mvtest_mvschema.mvtest_tvm"
 Column |         Type          |    Collation     | Nullable | Default | Storage  | Stats target | Description 
--------+-----------------------+------------------+----------+---------+----------+--------------+-------------
 type   | character varying(50) | utf8mb4_0900_bin |          |         | extended |              | 
 totamt | numeric               |                  |          |         | main     |              | 
View definition:
 SELECT mvtest_tv.type,
    mvtest_tv.totamt
   FROM mvtest_tv
  ORDER BY mvtest_tv.type NULLS FIRST;
Options: shard=1

-- modify the underlying table data
INSERT INTO mvtest_t VALUES (6, 'z', 13);
INSERT 0 1
-- confirm pre- and post-refresh contents of fairly simple materialized views
SELECT * FROM mvtest_tm ORDER BY type;
 type |         totamt          
------+-------------------------
 x    |  5.00000000000000000000
 y    | 12.00000000000000000000
 z    | 11.00000000000000000000
(3 rows)

SELECT * FROM mvtest_tvm ORDER BY type;
 type |         totamt          
------+-------------------------
 x    |  5.00000000000000000000
 y    | 12.00000000000000000000
 z    | 11.00000000000000000000
(3 rows)

REFRESH MATERIALIZED VIEW CONCURRENTLY mvtest_tm;
REFRESH MATERIALIZED VIEW
REFRESH MATERIALIZED VIEW mvtest_tvm;
REFRESH MATERIALIZED VIEW
SELECT * FROM mvtest_tm ORDER BY type;
 type |         totamt          
------+-------------------------
 x    |  5.00000000000000000000
 y    | 12.00000000000000000000
 z    | 24.00000000000000000000
(3 rows)

SELECT * FROM mvtest_tvm ORDER BY type;
 type |         totamt          
------+-------------------------
 x    |  5.00000000000000000000
 y    | 12.00000000000000000000
 z    | 24.00000000000000000000
(3 rows)

RESET search_path;
RESET
-- confirm pre- and post-refresh contents of nested materialized views
EXPLAIN (costs off)
  SELECT * FROM mvtest_tmm;

EXPLAIN (costs off)
  SELECT * FROM mvtest_tvmm;

EXPLAIN (costs off)
  SELECT * FROM mvtest_tvvm;

SELECT * FROM mvtest_tmm;
        grandtot         
-------------------------
 28.00000000000000000000
(1 row)

SELECT * FROM mvtest_tvmm;
        grandtot         
-------------------------
 28.00000000000000000000
(1 row)

SELECT * FROM mvtest_tvvm;
        grandtot         
-------------------------
 28.00000000000000000000
(1 row)

REFRESH MATERIALIZED VIEW mvtest_tmm;
REFRESH MATERIALIZED VIEW
REFRESH MATERIALIZED VIEW CONCURRENTLY mvtest_tvmm;
REFRESH MATERIALIZED VIEW
REFRESH MATERIALIZED VIEW mvtest_tvmm;
REFRESH MATERIALIZED VIEW
REFRESH MATERIALIZED VIEW mvtest_tvvm;
REFRESH MATERIALIZED VIEW
EXPLAIN (costs off)
  SELECT * FROM mvtest_tmm;

EXPLAIN (costs off)
  SELECT * FROM mvtest_tvmm;

EXPLAIN (costs off)
  SELECT * FROM mvtest_tvvm;

SELECT * FROM mvtest_tmm;
        grandtot         
-------------------------
 41.00000000000000000000
(1 row)

SELECT * FROM mvtest_tvmm;
        grandtot         
-------------------------
 41.00000000000000000000
(1 row)

SELECT * FROM mvtest_tvvm;
        grandtot         
-------------------------
 41.00000000000000000000
(1 row)

-- test diemv when the mv does not exist
DROP MATERIALIZED VIEW IF EXISTS no_such_mv;
psql:sql/matview.sql:94: NOTICE:  materialized view "no_such_mv" does not exist, skipping
DROP MATERIALIZED VIEW
-- make sure invalid combination of options is prohibited
REFRESH MATERIALIZED VIEW CONCURRENTLY mvtest_tvmm WITH NO DATA;
psql:sql/matview.sql:97: ERROR:  CONCURRENTLY and WITH NO DATA options cannot be used together
-- no tuple locks on materialized views
SELECT * FROM mvtest_tvvm FOR SHARE;
        grandtot         
-------------------------
 41.00000000000000000000
(1 row)

-- test join of mv and view
SELECT type, m.totamt AS mtot, v.totamt AS vtot FROM mvtest_tm m LEFT JOIN mvtest_tv v USING (type) ORDER BY type;
 type |          mtot           |          vtot           
------+-------------------------+-------------------------
 x    |  5.00000000000000000000 |  5.00000000000000000000
 y    | 12.00000000000000000000 | 12.00000000000000000000
 z    | 24.00000000000000000000 | 24.00000000000000000000
(3 rows)

-- make sure that dependencies are reported properly when they block the drop
DROP TABLE mvtest_t;
psql:sql/matview.sql:106: ERROR:  cannot drop table mvtest_t because other objects depend on it
DETAIL:  view mvtest_tv depends on table mvtest_t
view mvtest_tvv depends on view mvtest_tv
materialized view mvtest_tvvm depends on view mvtest_tvv
view mvtest_tvvmv depends on materialized view mvtest_tvvm
materialized view mvtest_bb depends on view mvtest_tvvmv
materialized view mvtest_mvschema.mvtest_tvm depends on view mvtest_tv
materialized view mvtest_tvmm depends on materialized view mvtest_mvschema.mvtest_tvm
materialized view mvtest_tm depends on table mvtest_t
materialized view mvtest_tmm depends on materialized view mvtest_tm
HINT:  Use DROP ... CASCADE to drop the dependent objects too.
-- some additional tests not using base tables
CREATE VIEW mvtest_vt1 AS SELECT 1 moo;
CREATE VIEW
CREATE VIEW mvtest_vt2 AS SELECT moo, 2*moo FROM mvtest_vt1 UNION ALL SELECT moo, 3*moo FROM mvtest_vt1;
CREATE VIEW
\d+ mvtest_vt2
                          View "public.mvtest_vt2"
  Column  |  Type   | Collation | Nullable | Default | Storage | Description 
----------+---------+-----------+----------+---------+---------+-------------
 moo      | integer |           |          |         | plain   | 
 ?column? | integer |           |          |         | plain   | 
View definition:
 SELECT mvtest_vt1.moo,
    2 * mvtest_vt1.moo
   FROM mvtest_vt1
UNION ALL
 SELECT mvtest_vt1.moo,
    3 * mvtest_vt1.moo
   FROM mvtest_vt1;

CREATE MATERIALIZED VIEW mv_test2 AS SELECT moo, 2*moo FROM mvtest_vt2 UNION ALL SELECT moo, 3*moo FROM mvtest_vt2;
SELECT 4
\d+ mv_test2
                            Materialized view "public.mv_test2"
  Column  |  Type   | Collation | Nullable | Default | Storage | Stats target | Description 
----------+---------+-----------+----------+---------+---------+--------------+-------------
 moo      | integer |           |          |         | plain   |              | 
 ?column? | integer |           |          |         | plain   |              | 
View definition:
 SELECT mvtest_vt2.moo,
    2 * mvtest_vt2.moo
   FROM mvtest_vt2
UNION ALL
 SELECT mvtest_vt2.moo,
    3 * mvtest_vt2.moo
   FROM mvtest_vt2;
Options: shard=1

CREATE MATERIALIZED VIEW mv_test3 AS SELECT * FROM mv_test2 WHERE moo = 12345;
SELECT 0
SELECT relispopulated FROM pg_class WHERE oid = 'mv_test3'::regclass;
 relispopulated 
----------------
 t
(1 row)

DROP VIEW mvtest_vt1 CASCADE;
psql:sql/matview.sql:117: NOTICE:  drop cascades to 3 other objects
DETAIL:  drop cascades to view mvtest_vt2
drop cascades to materialized view mv_test2
drop cascades to materialized view mv_test3
DROP VIEW
-- test that duplicate values on unique index prevent refresh
CREATE TABLE mvtest_foo(a int, b int);
CREATE TABLE
INSERT INTO mvtest_foo VALUES(1, 10);
INSERT 0 1
CREATE MATERIALIZED VIEW mvtest_mv AS SELECT * FROM mvtest_foo;
SELECT 1
--CREATE UNIQUE INDEX ON mvtest_mv(a);
INSERT INTO mvtest_foo SELECT * FROM mvtest_foo;
INSERT 0 1
REFRESH MATERIALIZED VIEW mvtest_mv;
REFRESH MATERIALIZED VIEW
REFRESH MATERIALIZED VIEW CONCURRENTLY mvtest_mv;
REFRESH MATERIALIZED VIEW
DROP TABLE mvtest_foo CASCADE;
psql:sql/matview.sql:127: NOTICE:  drop cascades to materialized view mvtest_mv
DROP TABLE
-- make sure that all columns covered by unique indexes works、
CREATE TABLE mvtest_foo(a int, b int, c int); 
CREATE TABLE
insert into mvtest_foo VALUES(1, 2, 3);
INSERT 0 1
CREATE MATERIALIZED VIEW mvtest_mv AS SELECT * FROM mvtest_foo;
SELECT 1
--CREATE UNIQUE INDEX ON mvtest_mv (a);
--CREATE UNIQUE INDEX ON mvtest_mv (b);
--CREATE UNIQUE INDEX on mvtest_mv (c);
INSERT INTO mvtest_foo VALUES(2, 3, 4);
INSERT 0 1
INSERT INTO mvtest_foo VALUES(3, 4, 5);
INSERT 0 1
REFRESH MATERIALIZED VIEW mvtest_mv;
REFRESH MATERIALIZED VIEW
REFRESH MATERIALIZED VIEW CONCURRENTLY mvtest_mv;
REFRESH MATERIALIZED VIEW
DROP TABLE mvtest_foo CASCADE;
psql:sql/matview.sql:140: NOTICE:  drop cascades to materialized view mvtest_mv
DROP TABLE
-- allow subquery to reference unpopulated matview if WITH NO DATA is specified
CREATE MATERIALIZED VIEW mvtest_mv1 AS SELECT 1 AS col1 WITH NO DATA;
CREATE MATERIALIZED VIEW
CREATE MATERIALIZED VIEW mvtest_mv2 AS SELECT * FROM mvtest_mv1
  WHERE col1 = (SELECT LEAST(col1) FROM mvtest_mv1) WITH NO DATA;
CREATE MATERIALIZED VIEW
DROP MATERIALIZED VIEW mvtest_mv1 CASCADE;
psql:sql/matview.sql:146: NOTICE:  drop cascades to materialized view mvtest_mv2
DROP MATERIALIZED VIEW
-- make sure that types with unusual equality tests work
--CREATE temp TABLE mvtest_boxes (id serial primary key, b box);
--INSERT INTO mvtest_boxes (b) VALUES
--  ('(32,32),(31,31)'),
--  ('(2.0000004,2.0000004),(1,1)'),
--  ('(1.9999996,1.9999996),(1,1)');
--CREATE MATERIALIZED VIEW mvtest_boxmv AS SELECT * FROM mvtest_boxes;
--CREATE UNIQUE INDEX mvtest_boxmv_id ON mvtest_boxmv (id);
--UPDATE mvtest_boxes SET b = '(2,2),(1,1)' WHERE id = 2;
--REFRESH MATERIALIZED VIEW CONCURRENTLY mvtest_boxmv;
--SELECT * FROM mvtest_boxmv ORDER BY id;
--DROP TABLE mvtest_boxes CASCADE;
-- make sure that column names are handled correctly
CREATE TABLE mvtest_v (i int, j int);
CREATE TABLE
CREATE MATERIALIZED VIEW mvtest_mv_v (ii, jj, kk) AS SELECT i, j FROM mvtest_v; -- error
psql:sql/matview.sql:163: ERROR:  too many column names were specified
CREATE MATERIALIZED VIEW mvtest_mv_v (ii, jj) AS SELECT i, j FROM mvtest_v; -- ok
SELECT 0
CREATE MATERIALIZED VIEW mvtest_mv_v_2 (ii) AS SELECT i, j FROM mvtest_v; -- ok
SELECT 0
CREATE MATERIALIZED VIEW mvtest_mv_v_3 (ii, jj, kk) AS SELECT i, j FROM mvtest_v WITH NO DATA; -- error
psql:sql/matview.sql:166: ERROR:  too many column names were specified
CREATE MATERIALIZED VIEW mvtest_mv_v_3 (ii, jj) AS SELECT i, j FROM mvtest_v WITH NO DATA; -- ok
CREATE MATERIALIZED VIEW
CREATE MATERIALIZED VIEW mvtest_mv_v_4 (ii) AS SELECT i, j FROM mvtest_v WITH NO DATA; -- ok
CREATE MATERIALIZED VIEW
ALTER TABLE mvtest_v RENAME COLUMN i TO x;
ALTER TABLE
INSERT INTO mvtest_v values (1, 2);
INSERT 0 1
CREATE UNIQUE INDEX mvtest_mv_v_ii ON mvtest_mv_v (ii);
CREATE INDEX
REFRESH MATERIALIZED VIEW mvtest_mv_v;
REFRESH MATERIALIZED VIEW
UPDATE mvtest_v SET j = 3 WHERE x = 1;
UPDATE 1
REFRESH MATERIALIZED VIEW CONCURRENTLY mvtest_mv_v;
REFRESH MATERIALIZED VIEW
REFRESH MATERIALIZED VIEW mvtest_mv_v_2;
REFRESH MATERIALIZED VIEW
REFRESH MATERIALIZED VIEW mvtest_mv_v_3;
REFRESH MATERIALIZED VIEW
REFRESH MATERIALIZED VIEW mvtest_mv_v_4;
REFRESH MATERIALIZED VIEW
SELECT * FROM mvtest_v;
 x | j 
---+---
 1 | 3
(1 row)

SELECT * FROM mvtest_mv_v;
 ii | jj 
----+----
  1 |  3
(1 row)

SELECT * FROM mvtest_mv_v_2;
 ii | j 
----+---
  1 | 3
(1 row)

SELECT * FROM mvtest_mv_v_3;
 ii | jj 
----+----
  1 |  3
(1 row)

SELECT * FROM mvtest_mv_v_4;
 ii | j 
----+---
  1 | 3
(1 row)

DROP TABLE mvtest_v CASCADE;
psql:sql/matview.sql:183: NOTICE:  drop cascades to 4 other objects
DETAIL:  drop cascades to materialized view mvtest_mv_v
drop cascades to materialized view mvtest_mv_v_2
drop cascades to materialized view mvtest_mv_v_3
drop cascades to materialized view mvtest_mv_v_4
DROP TABLE
-- Check that unknown literals are converted to "text" in CREATE MATVIEW,
-- so that we don't end up with unknown-type columns.
--CREATE MATERIALIZED VIEW mv_unspecified_types AS
--  SELECT 42 as i, 42.5 as num, 'foo' as u, 'foo'::unknown as u2, null as n;
\d+ mv_unspecified_types
psql:sql/matview.sql:189: error: Did not find any relation named "mv_unspecified_types".
--SELECT * FROM mv_unspecified_types;
--DROP MATERIALIZED VIEW mv_unspecified_types;
-- make sure that create WITH NO DATA does not plan the query (bug #13907)
create materialized view mvtest_error as select 1/0 as x;  -- fail
psql:sql/matview.sql:194: ERROR:  division by zero
create materialized view mvtest_error as select 1/0 as x with no data;
CREATE MATERIALIZED VIEW
refresh materialized view mvtest_error;  -- fail here
psql:sql/matview.sql:196: ERROR:  division by zero
drop materialized view mvtest_error;
DROP MATERIALIZED VIEW
-- make sure that matview rows can be referenced as source rows (bug #9398)
CREATE TABLE mvtest_v(a int);
CREATE TABLE
insert into mvtest_v SELECT generate_series(1,10);
INSERT 0 10
CREATE MATERIALIZED VIEW mvtest_mv_v AS SELECT a FROM mvtest_v WHERE a <= 5;
SELECT 5
--kunlun has bug here currently.
--DELETE FROM mvtest_v WHERE EXISTS ( SELECT * FROM mvtest_mv_v WHERE mvtest_mv_v.a = mvtest_v.a );
SELECT * FROM mvtest_v;
 a  
----
  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
(10 rows)

SELECT * FROM mvtest_mv_v;
 a 
---
 1
 2
 3
 4
 5
(5 rows)

DROP TABLE mvtest_v CASCADE;
psql:sql/matview.sql:207: NOTICE:  drop cascades to materialized view mvtest_mv_v
DROP TABLE
-- make sure running as superuser works when MV owned by another role (bug #11208)
CREATE ROLE regress_user_mvtest;
CREATE ROLE
SET ROLE regress_user_mvtest;
SET
CREATE TABLE mvtest_foo_data (i int, md5v text);
CREATE TABLE
insert into mvtest_foo_data SELECT i, md5(random()::text) FROM generate_series(1, 10) i;
INSERT 0 10
CREATE MATERIALIZED VIEW mvtest_mv_foo AS SELECT * FROM mvtest_foo_data;
SELECT 10
CREATE MATERIALIZED VIEW mvtest_mv_foo AS SELECT * FROM mvtest_foo_data;
psql:sql/matview.sql:215: ERROR:  relation "mvtest_mv_foo" already exists
CREATE MATERIALIZED VIEW IF NOT EXISTS mvtest_mv_foo AS SELECT * FROM mvtest_foo_data;
psql:sql/matview.sql:216: NOTICE:  relation "mvtest_mv_foo" already exists, skipping
CREATE MATERIALIZED VIEW
CREATE UNIQUE INDEX ON mvtest_mv_foo (i);
CREATE INDEX
RESET ROLE;
RESET
REFRESH MATERIALIZED VIEW mvtest_mv_foo;
REFRESH MATERIALIZED VIEW
REFRESH MATERIALIZED VIEW CONCURRENTLY mvtest_mv_foo;
REFRESH MATERIALIZED VIEW
DROP MATERIALIZED VIEW mvtest_mv_foo cascade;
DROP MATERIALIZED VIEW
DROP TABLE mvtest_foo_data;
DROP TABLE
DROP ROLE regress_user_mvtest;
DROP ROLE
-- make sure that create WITH NO DATA works via SPI
CREATE FUNCTION mvtest_func()
  RETURNS void AS $$
BEGIN
  CREATE MATERIALIZED VIEW mvtest1 AS SELECT 1 AS x;
  CREATE MATERIALIZED VIEW mvtest2 AS SELECT 1 AS x WITH NO DATA;
END;
$$ LANGUAGE plpgsql;
CREATE FUNCTION
SELECT mvtest_func();
 mvtest_func 
-------------
 
(1 row)

SELECT * FROM mvtest1;
 x 
---
 1
(1 row)

SELECT * FROM mvtest2;
 x 
---
(0 rows)

DROP MATERIALIZED VIEW mvtest1;
DROP MATERIALIZED VIEW
DROP MATERIALIZED VIEW mvtest2;
DROP MATERIALIZED VIEW
