--
-- UPDATE syntax tests
--
drop table if exists update_test;
psql:sql/update.sql:4: NOTICE:  table "update_test" does not exist, skipping
DROP TABLE
CREATE TABLE update_test (
    a   INT DEFAULT 10,
    b   INT,
    c   TEXT
);
CREATE TABLE
drop table if exists upsert_test;
psql:sql/update.sql:11: NOTICE:  table "upsert_test" does not exist, skipping
DROP TABLE
CREATE TABLE upsert_test (
    a   INT PRIMARY KEY,
    b   TEXT
);
CREATE TABLE
INSERT INTO update_test VALUES (5, 10, 'foo');
INSERT 0 1
INSERT INTO update_test(b, a) VALUES (15, 10);
INSERT 0 1
SELECT * FROM update_test;
 a  | b  |  c  
----+----+-----
  5 | 10 | foo
 10 | 15 | 
(2 rows)

UPDATE update_test SET a = DEFAULT, b = DEFAULT;
UPDATE 2
SELECT * FROM update_test;
 a  | b |  c  
----+---+-----
 10 |   | foo
 10 |   | 
(2 rows)

-- aliases for the UPDATE target table
UPDATE update_test AS t SET b = 10 WHERE t.a = 10;
UPDATE 2
SELECT * FROM update_test;
 a  | b  |  c  
----+----+-----
 10 | 10 | foo
 10 | 10 | 
(2 rows)

UPDATE update_test t SET b = t.b + 10 WHERE t.a = 10;
UPDATE 2
SELECT * FROM update_test;
 a  | b  |  c  
----+----+-----
 10 | 20 | foo
 10 | 20 | 
(2 rows)

--
-- Test VALUES in FROM
--
UPDATE update_test SET a=v.i FROM (VALUES(100, 20)) AS v(i, j)
  WHERE update_test.b = v.j;
UPDATE 2
SELECT * FROM update_test;
  a  | b  |  c  
-----+----+-----
 100 | 20 | foo
 100 | 20 | 
(2 rows)

-- fail, wrong data type:
UPDATE update_test SET a = v.* FROM (VALUES(100, 20)) AS v(i, j)
  WHERE update_test.b = v.j;
psql:sql/update.sql:46: ERROR:  column "a" is of type integer but expression is of type record
LINE 1: UPDATE update_test SET a = v.* FROM (VALUES(100, 20)) AS v(i...
                                   ^
HINT:  You will need to rewrite or cast the expression.
--
-- Test multiple-set-clause syntax
--
INSERT INTO update_test SELECT a,b+1,c FROM update_test;
INSERT 0 2
SELECT * FROM update_test;
  a  | b  |  c  
-----+----+-----
 100 | 20 | foo
 100 | 20 | 
 100 | 21 | foo
 100 | 21 | 
(4 rows)

UPDATE update_test SET (c,b,a) = ('bugle', b+11, DEFAULT) WHERE c = 'foo';
UPDATE 2
SELECT * FROM update_test order by 1,2,3;
  a  | b  |   c   
-----+----+-------
  10 | 31 | bugle
  10 | 32 | bugle
 100 | 20 | 
 100 | 21 | 
(4 rows)

UPDATE update_test SET (c,b) = ('car', a+b), a = a + 1 WHERE a = 10;
UPDATE 2
SELECT * FROM update_test order by 1,2,3;
  a  | b  |  c  
-----+----+-----
  11 | 41 | car
  11 | 42 | car
 100 | 20 | 
 100 | 21 | 
(4 rows)

-- fail, multi assignment to same column:
UPDATE update_test SET (c,b) = ('car', a+b), b = a + 1 WHERE a = 10;
psql:sql/update.sql:60: ERROR:  multiple assignments to same column "b"
-- uncorrelated sub-select:
UPDATE update_test
  SET (b,a) = (select a,b from update_test where b = 41 and c = 'car')
  WHERE a = 100 AND b = 20;
UPDATE 1
SELECT * FROM update_test order by 1,2,3;
  a  | b  |  c  
-----+----+-----
  11 | 41 | car
  11 | 42 | car
  41 | 11 | 
 100 | 21 | 
(4 rows)

-- correlated sub-select:
--UPDATE update_test o
--  SET (b,a) = (select a+1,b from update_test i
--               where i.a=o.a and i.b=o.b and i.c is not distinct from o.c);
--SELECT * FROM update_test order by 1,2,3;
-- fail, multiple rows supplied:
UPDATE update_test SET (b,a) = (select a+1,b from update_test);
psql:sql/update.sql:73: ERROR:  more than one row returned by a subquery used as an expression
-- set to null if no rows supplied:
UPDATE update_test SET (b,a) = (select a+1,b from update_test where a = 1000)
  WHERE a = 11;
UPDATE 2
SELECT * FROM update_test order by 1,2,3;
  a  | b  |  c  
-----+----+-----
     |    | car
     |    | car
  41 | 11 | 
 100 | 21 | 
(4 rows)

-- *-expansion should work in this context:
UPDATE update_test SET (a,b) = ROW(v.*) FROM (VALUES(21, 100)) AS v(i, j)
  WHERE update_test.a = v.i;
UPDATE 0
-- you might expect this to work, but syntactically it's not a RowExpr:
UPDATE update_test SET (a,b) = (v.*) FROM (VALUES(21, 101)) AS v(i, j)
  WHERE update_test.a = v.i;
psql:sql/update.sql:83: ERROR:  source for a multiple-column UPDATE item must be a sub-SELECT or ROW() expression
LINE 1: UPDATE update_test SET (a,b) = (v.*) FROM (VALUES(21, 101)) ...
                                        ^
-- if an alias for the target table is specified, don't allow references
-- to the original table name
UPDATE update_test AS t SET b = update_test.b + 10 WHERE t.a = 10;
psql:sql/update.sql:87: ERROR:  invalid reference to FROM-clause entry for table "update_test"
LINE 1: UPDATE update_test AS t SET b = update_test.b + 10 WHERE t.a...
                                        ^
HINT:  Perhaps you meant to reference the table alias "t".
-- Make sure that we can update to a TOASTed value.
UPDATE update_test SET c = repeat('x', 10000) WHERE c = 'car';
UPDATE 2
SELECT a, b, char_length(c) FROM update_test order by 1,2;
  a  | b  | char_length 
-----+----+-------------
     |    |       10000
     |    |       10000
  41 | 11 |            
 100 | 21 |            
(4 rows)

-- Check multi-assignment with a Result node to handle a one-time filter.
-- EXPLAIN (VERBOSE, COSTS OFF)
-- UPDATE update_test t
  -- SET (a, b) = (SELECT b, a FROM update_test s WHERE s.a = t.a)
  -- WHERE CURRENT_USER = SESSION_USER;
-- UPDATE update_test t
  -- SET (a, b) = (SELECT b, a FROM update_test s WHERE s.a = t.a)
  -- WHERE CURRENT_USER = SESSION_USER;
SELECT a, b, char_length(c) FROM update_test order by 1,2,3;
  a  | b  | char_length 
-----+----+-------------
     |    |       10000
     |    |       10000
  41 | 11 |            
 100 | 21 |            
(4 rows)

DROP TABLE update_test;
DROP TABLE
DROP TABLE upsert_test;
DROP TABLE
---------------------------
-- UPDATE with row movement
---------------------------
-- When a partitioned table receives an UPDATE to the partitioned key and the
-- new values no longer meet the partition's bound, the row must be moved to
-- the correct partition for the new partition key (if one exists). We must
-- also ensure that updatable views on partitioned tables properly enforce any
-- WITH CHECK OPTION that is defined. 
drop table if exists range_parted cascade;
psql:sql/update.sql:117: NOTICE:  table "range_parted" does not exist, skipping
DROP TABLE
CREATE TABLE range_parted (
	a text,
	b bigint,
	c numeric,
	d int,
	e varchar			   
) PARTITION BY RANGE (a, b);
CREATE TABLE
-- Create partitions intentionally in descending bound order, so as to test
-- that update-row-movement works with the leaf partitions not in bound order.
CREATE TABLE part_b_20_b_30 (e varchar, c numeric, a text, b bigint, d int);
CREATE TABLE
ALTER TABLE range_parted ATTACH PARTITION part_b_20_b_30 FOR VALUES FROM ('b', 20) TO ('b', 30);
ALTER TABLE
CREATE TABLE part_b_10_b_20 (e varchar, c numeric, a text, b bigint, d int) PARTITION BY RANGE (c);
CREATE TABLE
CREATE TABLE part_b_1_b_10 PARTITION OF range_parted FOR VALUES FROM ('b', 1) TO ('b', 10);
CREATE TABLE
ALTER TABLE range_parted ATTACH PARTITION part_b_10_b_20 FOR VALUES FROM ('b', 10) TO ('b', 20);
ALTER TABLE
CREATE TABLE part_a_10_a_20 PARTITION OF range_parted FOR VALUES FROM ('a', 10) TO ('a', 20);
CREATE TABLE
CREATE TABLE part_a_1_a_10 PARTITION OF range_parted FOR VALUES FROM ('a', 1) TO ('a', 10);
CREATE TABLE
-- Check that partition-key UPDATE works sanely on a partitioned table that
-- does not have any child partitions.
UPDATE part_b_10_b_20 set b = b - 6;
psql:sql/update.sql:138: ERROR:  Kunlun-db: The result relation requires a primary key for such update/delete.
-- Create some more partitions following the above pattern of descending bound
-- order, but let's make the situation a bit more complex by having the
-- attribute numbers of the columns vary from their parent partition.
CREATE TABLE part_c_100_200 (e varchar, c numeric, a text, b bigint, d int) PARTITION BY range (abs(d));
CREATE TABLE
ALTER TABLE part_c_100_200 DROP COLUMN e, DROP COLUMN c, DROP COLUMN a;
ALTER TABLE
ALTER TABLE part_c_100_200 ADD COLUMN c numeric, ADD COLUMN e varchar, ADD COLUMN a text;
ALTER TABLE
ALTER TABLE part_c_100_200 DROP COLUMN b;
ALTER TABLE
ALTER TABLE part_c_100_200 ADD COLUMN b bigint;
ALTER TABLE
CREATE TABLE part_d_1_15 PARTITION OF part_c_100_200 FOR VALUES FROM (1) TO (15);
CREATE TABLE
CREATE TABLE part_d_15_20 PARTITION OF part_c_100_200 FOR VALUES FROM (15) TO (20);
CREATE TABLE
ALTER TABLE part_b_10_b_20 ATTACH PARTITION part_c_100_200 FOR VALUES FROM (100) TO (200);
ALTER TABLE
CREATE TABLE part_c_1_100 (e varchar, d int, c numeric, b bigint, a text);
CREATE TABLE
ALTER TABLE part_b_10_b_20 ATTACH PARTITION part_c_1_100 FOR VALUES FROM (1) TO (100);
ALTER TABLE
\set init_range_parted 'truncate range_parted; insert into range_parted VALUES (''a'', 1, 1, 1), (''a'', 10, 200, 1), (''b'', 12, 96, 1), (''b'', 13, 97, 2), (''b'', 15, 105, 16), (''b'', 17, 105, 19)'
\set show_data 'select tableoid::regclass::text COLLATE "C" partname, * from range_parted ORDER BY 1, 2, 3, 4, 5, 6'
:init_range_parted;
TRUNCATE TABLE
INSERT 0 6
:show_data;
    partname    | a | b  |            c             | d  | e 
----------------+---+----+--------------------------+----+---
 part_a_10_a_20 | a | 10 | 200.00000000000000000000 |  1 | 
 part_a_1_a_10  | a |  1 |   1.00000000000000000000 |  1 | 
 part_c_1_100   | b | 12 |  96.00000000000000000000 |  1 | 
 part_c_1_100   | b | 13 |  97.00000000000000000000 |  2 | 
 part_d_15_20   | b | 15 | 105.00000000000000000000 | 16 | 
 part_d_15_20   | b | 17 | 105.00000000000000000000 | 19 | 
(6 rows)

-- The order of subplans should be in bound order
															 
EXPLAIN (costs off) UPDATE range_parted set c = c - 50 WHERE c > 97;
psql:sql/update.sql:163: ERROR:  Kunlun-db: The result relation requires a primary key for such update/delete.
-- fail, row movement happens only within the partition subtree.
UPDATE part_c_100_200 set c = c - 20, d = c WHERE c = 105;
psql:sql/update.sql:166: ERROR:  Kunlun-db: The result relation requires a primary key for such update/delete.
-- fail, no partition key update, so no attempt to move tuple,
-- but "a = 'a'" violates partition constraint enforced by root partition)
UPDATE part_b_10_b_20 set a = 'a';
psql:sql/update.sql:169: ERROR:  Kunlun-db: The result relation requires a primary key for such update/delete.
-- ok, partition key update, no constraint violation
													 
UPDATE range_parted set d = d - 10 WHERE d > 10;
psql:sql/update.sql:172: ERROR:  Kunlun-db: The result relation requires a primary key for such update/delete.
-- ok, no partition key update, no constraint violation
UPDATE range_parted set e = d;
UPDATE 6
-- No row found
UPDATE part_c_1_100 set c = c + 20 WHERE c = 98;
psql:sql/update.sql:176: ERROR:  Kunlun-db: The result relation requires a primary key for such update/delete.
-- ok, row movement
													 
UPDATE part_b_10_b_20 set c = c + 20 returning c, b, a;
psql:sql/update.sql:179: ERROR:  Kunlun-db: The result relation requires a primary key for such update/delete.
:show_data;
    partname    | a | b  |            c             | d  | e  
----------------+---+----+--------------------------+----+----
 part_a_10_a_20 | a | 10 | 200.00000000000000000000 |  1 | 1
 part_a_1_a_10  | a |  1 |   1.00000000000000000000 |  1 | 1
 part_c_1_100   | b | 12 |  96.00000000000000000000 |  1 | 1
 part_c_1_100   | b | 13 |  97.00000000000000000000 |  2 | 2
 part_d_15_20   | b | 15 | 105.00000000000000000000 | 16 | 16
 part_d_15_20   | b | 17 | 105.00000000000000000000 | 19 | 19
(6 rows)

-- fail, row movement happens only within the partition subtree.
										
UPDATE part_b_10_b_20 set b = b - 6 WHERE c > 116 returning *;
psql:sql/update.sql:184: ERROR:  Kunlun-db: The result relation requires a primary key for such update/delete.
-- ok, row movement, with subset of rows moved into different partition.
													 
UPDATE range_parted set b = b - 6 WHERE c > 116 returning a, b + c;
psql:sql/update.sql:187: ERROR:  Kunlun-db: The result relation requires a primary key for such update/delete.
			 
:show_data;
    partname    | a | b  |            c             | d  | e  
----------------+---+----+--------------------------+----+----
 part_a_10_a_20 | a | 10 | 200.00000000000000000000 |  1 | 1
 part_a_1_a_10  | a |  1 |   1.00000000000000000000 |  1 | 1
 part_c_1_100   | b | 12 |  96.00000000000000000000 |  1 | 1
 part_c_1_100   | b | 13 |  97.00000000000000000000 |  2 | 2
 part_d_15_20   | b | 15 | 105.00000000000000000000 | 16 | 16
 part_d_15_20   | b | 17 | 105.00000000000000000000 | 19 | 19
(6 rows)

-- Common table needed for multiple test scenarios.
-- Common table needed for multiple test scenarios.
drop table if exists mintab;
psql:sql/update.sql:194: NOTICE:  table "mintab" does not exist, skipping
DROP TABLE
CREATE TABLE mintab(c1 int);
CREATE TABLE
INSERT into mintab VALUES (120);
INSERT 0 1
-- update partition key using updatable view.
CREATE VIEW upview AS SELECT * FROM range_parted WHERE (select c > c1 FROM mintab) WITH CHECK OPTION;
psql:sql/update.sql:199: WARNING:  views with CHECK options are not supported, the view will be created but the check constraints will be ignored silently.
CREATE VIEW
-- ok
UPDATE upview set c = 199 WHERE b = 4;
psql:sql/update.sql:201: ERROR:  Kunlun-db: The result relation requires a primary key for such update/delete.
-- fail, check option violation
UPDATE upview set c = 120 WHERE b = 4;
psql:sql/update.sql:203: ERROR:  Kunlun-db: The result relation requires a primary key for such update/delete.
-- fail, row movement with check option violation
UPDATE upview set a = 'b', b = 15, c = 120 WHERE b = 4;
psql:sql/update.sql:205: ERROR:  Kunlun-db: The result relation requires a primary key for such update/delete.
-- ok, row movement, check option passes
UPDATE upview set a = 'b', b = 15 WHERE b = 4;
psql:sql/update.sql:207: ERROR:  Kunlun-db: The result relation requires a primary key for such update/delete.
:show_data;
    partname    | a | b  |            c             | d  | e  
----------------+---+----+--------------------------+----+----
 part_a_10_a_20 | a | 10 | 200.00000000000000000000 |  1 | 1
 part_a_1_a_10  | a |  1 |   1.00000000000000000000 |  1 | 1
 part_c_1_100   | b | 12 |  96.00000000000000000000 |  1 | 1
 part_c_1_100   | b | 13 |  97.00000000000000000000 |  2 | 2
 part_d_15_20   | b | 15 | 105.00000000000000000000 | 16 | 16
 part_d_15_20   | b | 17 | 105.00000000000000000000 | 19 | 19
(6 rows)

-- cleanup
DROP VIEW upview;
DROP VIEW
-- RETURNING having whole-row vars.
:init_range_parted;
TRUNCATE TABLE
INSERT 0 6
UPDATE range_parted set c = 95 WHERE a = 'b' and b > 10 and c > 100 returning (range_parted), *;
psql:sql/update.sql:216: ERROR:  Kunlun-db: The result relation requires a primary key for such update/delete.
:show_data;
    partname    | a | b  |            c             | d  | e 
----------------+---+----+--------------------------+----+---
 part_a_10_a_20 | a | 10 | 200.00000000000000000000 |  1 | 
 part_a_1_a_10  | a |  1 |   1.00000000000000000000 |  1 | 
 part_c_1_100   | b | 12 |  96.00000000000000000000 |  1 | 
 part_c_1_100   | b | 13 |  97.00000000000000000000 |  2 | 
 part_d_15_20   | b | 15 | 105.00000000000000000000 | 16 | 
 part_d_15_20   | b | 17 | 105.00000000000000000000 | 19 | 
(6 rows)

-- Transition tables with update row movement
:init_range_parted;
TRUNCATE TABLE
INSERT 0 6
drop FUNCTION if exists trans_updatetrigfunc;
psql:sql/update.sql:222: NOTICE:  function trans_updatetrigfunc() does not exist, skipping
DROP FUNCTION
CREATE FUNCTION trans_updatetrigfunc() RETURNS trigger LANGUAGE plpgsql AS
$$
  begin
    raise notice 'trigger = %, old table = %, new table = %',
                 TG_NAME,
                 (select string_agg(old_table::text, ', ' ORDER BY a) FROM old_table),
                 (select string_agg(new_table::text, ', ' ORDER BY a) FROM new_table);
    return null;
  end;
$$;
CREATE FUNCTION
CREATE TRIGGER trans_updatetrig
  AFTER UPDATE ON range_parted REFERENCING OLD TABLE AS old_table NEW TABLE AS new_table
  FOR EACH STATEMENT EXECUTE PROCEDURE trans_updatetrigfunc();
CREATE TRIGGER
UPDATE range_parted set c = (case when c = 96 then 110 else c + 1 end ) WHERE a = 'b' and b > 10 and c >= 96;
psql:sql/update.sql:237: ERROR:  Kunlun-db: The result relation requires a primary key for such update/delete.
:show_data;
    partname    | a | b  |            c             | d  | e 
----------------+---+----+--------------------------+----+---
 part_a_10_a_20 | a | 10 | 200.00000000000000000000 |  1 | 
 part_a_1_a_10  | a |  1 |   1.00000000000000000000 |  1 | 
 part_c_1_100   | b | 12 |  96.00000000000000000000 |  1 | 
 part_c_1_100   | b | 13 |  97.00000000000000000000 |  2 | 
 part_d_15_20   | b | 15 | 105.00000000000000000000 | 16 | 
 part_d_15_20   | b | 17 | 105.00000000000000000000 | 19 | 
(6 rows)

:init_range_parted;
TRUNCATE TABLE
INSERT 0 6
-- Enabling OLD TABLE capture for both DELETE as well as UPDATE stmt triggers
-- should not cause DELETEd rows to be captured twice. Similar thing for
-- INSERT triggers and inserted rows.
CREATE TRIGGER trans_deletetrig
  AFTER DELETE ON range_parted REFERENCING OLD TABLE AS old_table
  FOR EACH STATEMENT EXECUTE PROCEDURE trans_updatetrigfunc();
CREATE TRIGGER
CREATE TRIGGER trans_inserttrig
  AFTER INSERT ON range_parted REFERENCING NEW TABLE AS new_table
  FOR EACH STATEMENT EXECUTE PROCEDURE trans_updatetrigfunc();
CREATE TRIGGER
UPDATE range_parted set c = c + 50 WHERE a = 'b' and b > 10 and c >= 96;
psql:sql/update.sql:250: ERROR:  Kunlun-db: The result relation requires a primary key for such update/delete.
:show_data;
    partname    | a | b  |            c             | d  | e 
----------------+---+----+--------------------------+----+---
 part_a_10_a_20 | a | 10 | 200.00000000000000000000 |  1 | 
 part_a_1_a_10  | a |  1 |   1.00000000000000000000 |  1 | 
 part_c_1_100   | b | 12 |  96.00000000000000000000 |  1 | 
 part_c_1_100   | b | 13 |  97.00000000000000000000 |  2 | 
 part_d_15_20   | b | 15 | 105.00000000000000000000 | 16 | 
 part_d_15_20   | b | 17 | 105.00000000000000000000 | 19 | 
(6 rows)

DROP TRIGGER trans_deletetrig ON range_parted;
DROP TRIGGER
DROP TRIGGER trans_inserttrig ON range_parted;
DROP TRIGGER
-- Don't drop trans_updatetrig yet. It is required below.
-- Test with transition tuple conversion happening for rows moved into the
-- new partition. This requires a trigger that references transition table
-- (we already have trans_updatetrig). For inserted rows, the conversion
-- is not usually needed, because the original tuple is already compatible with
-- the desired transition tuple format. But conversion happens when there is a
-- BR trigger because the trigger can change the inserted row. So install a
-- BR triggers on those child partitions where the rows will be moved.
CREATE FUNCTION func_parted_mod_b() RETURNS trigger AS $$
BEGIN
   NEW.b = NEW.b + 1;
   return NEW;
END $$ language plpgsql;
CREATE FUNCTION
CREATE TRIGGER trig_c1_100 BEFORE UPDATE OR INSERT ON part_c_1_100
   FOR EACH ROW EXECUTE PROCEDURE func_parted_mod_b();
CREATE TRIGGER
CREATE TRIGGER trig_d1_15 BEFORE UPDATE OR INSERT ON part_d_1_15
   FOR EACH ROW EXECUTE PROCEDURE func_parted_mod_b();
CREATE TRIGGER
CREATE TRIGGER trig_d15_20 BEFORE UPDATE OR INSERT ON part_d_15_20
   FOR EACH ROW EXECUTE PROCEDURE func_parted_mod_b();
CREATE TRIGGER
:init_range_parted;
TRUNCATE TABLE
INSERT 0 6
UPDATE range_parted set c = (case when c = 96 then 110 else c + 1 end) WHERE a = 'b' and b > 10 and c >= 96;
psql:sql/update.sql:275: ERROR:  Kunlun-db: The result relation requires a primary key for such update/delete.
:show_data;
    partname    | a | b  |            c             | d  | e 
----------------+---+----+--------------------------+----+---
 part_a_10_a_20 | a | 10 | 200.00000000000000000000 |  1 | 
 part_a_1_a_10  | a |  1 |   1.00000000000000000000 |  1 | 
 part_c_1_100   | b | 13 |  96.00000000000000000000 |  1 | 
 part_c_1_100   | b | 14 |  97.00000000000000000000 |  2 | 
 part_d_15_20   | b | 16 | 105.00000000000000000000 | 16 | 
 part_d_15_20   | b | 18 | 105.00000000000000000000 | 19 | 
(6 rows)

:init_range_parted;
TRUNCATE TABLE
INSERT 0 6
UPDATE range_parted set c = c + 50 WHERE a = 'b' and b > 10 and c >= 96;
psql:sql/update.sql:278: ERROR:  Kunlun-db: The result relation requires a primary key for such update/delete.
:show_data;
    partname    | a | b  |            c             | d  | e 
----------------+---+----+--------------------------+----+---
 part_a_10_a_20 | a | 10 | 200.00000000000000000000 |  1 | 
 part_a_1_a_10  | a |  1 |   1.00000000000000000000 |  1 | 
 part_c_1_100   | b | 13 |  96.00000000000000000000 |  1 | 
 part_c_1_100   | b | 14 |  97.00000000000000000000 |  2 | 
 part_d_15_20   | b | 16 | 105.00000000000000000000 | 16 | 
 part_d_15_20   | b | 18 | 105.00000000000000000000 | 19 | 
(6 rows)

-- Case where per-partition tuple conversion map array is allocated, but the
-- map is not required for the particular tuple that is routed, thanks to
-- matching table attributes of the partition and the target table.
:init_range_parted;
TRUNCATE TABLE
INSERT 0 6
UPDATE range_parted set b = 15 WHERE b = 1;
psql:sql/update.sql:285: ERROR:  Kunlun-db: The result relation requires a primary key for such update/delete.
:show_data;
    partname    | a | b  |            c             | d  | e 
----------------+---+----+--------------------------+----+---
 part_a_10_a_20 | a | 10 | 200.00000000000000000000 |  1 | 
 part_a_1_a_10  | a |  1 |   1.00000000000000000000 |  1 | 
 part_c_1_100   | b | 13 |  96.00000000000000000000 |  1 | 
 part_c_1_100   | b | 14 |  97.00000000000000000000 |  2 | 
 part_d_15_20   | b | 16 | 105.00000000000000000000 | 16 | 
 part_d_15_20   | b | 18 | 105.00000000000000000000 | 19 | 
(6 rows)

DROP TRIGGER trans_updatetrig ON range_parted;
DROP TRIGGER
DROP TRIGGER trig_c1_100 ON part_c_1_100;
DROP TRIGGER
DROP TRIGGER trig_d1_15 ON part_d_1_15;
DROP TRIGGER
DROP TRIGGER trig_d15_20 ON part_d_15_20;
DROP TRIGGER
DROP FUNCTION func_parted_mod_b();
DROP FUNCTION
-- RLS policies with update-row-movement
-----------------------------------------
ALTER TABLE range_parted ENABLE ROW LEVEL SECURITY;
ALTER TABLE
CREATE USER regress_range_parted_user;
CREATE ROLE
GRANT ALL ON range_parted, mintab TO regress_range_parted_user;
GRANT
CREATE POLICY seeall ON range_parted AS PERMISSIVE FOR SELECT USING (true);
CREATE POLICY
CREATE POLICY policy_range_parted ON range_parted for UPDATE USING (true) WITH CHECK (c % 2 = 0);
CREATE POLICY
:init_range_parted;
TRUNCATE TABLE
INSERT 0 6
SET SESSION AUTHORIZATION regress_range_parted_user;
SET
-- This should fail with RLS violation error while moving row from
-- part_a_10_a_20 to part_d_1_15, because we are setting 'c' to an odd number.
UPDATE range_parted set a = 'b', c = 151 WHERE a = 'a' and c = 200;
psql:sql/update.sql:307: ERROR:  Kunlun-db: The result relation requires a primary key for such update/delete.
RESET SESSION AUTHORIZATION;
RESET
-- Create a trigger on part_d_1_15
CREATE FUNCTION func_d_1_15() RETURNS trigger AS $$
BEGIN
   NEW.c = NEW.c + 1; -- Make even numbers odd, or vice versa
   return NEW;
END $$ LANGUAGE plpgsql;
CREATE FUNCTION
CREATE TRIGGER trig_d_1_15 BEFORE INSERT ON part_d_1_15
   FOR EACH ROW EXECUTE PROCEDURE func_d_1_15();
CREATE TRIGGER
:init_range_parted;
TRUNCATE TABLE
INSERT 0 6
SET SESSION AUTHORIZATION regress_range_parted_user;
SET
-- Here, RLS checks should succeed while moving row from part_a_10_a_20 to
-- part_d_1_15. Even though the UPDATE is setting 'c' to an odd number, the
-- trigger at the destination partition again makes it an even number.
UPDATE range_parted set a = 'b', c = 151 WHERE a = 'a' and c = 200;
psql:sql/update.sql:325: ERROR:  Kunlun-db: The result relation requires a primary key for such update/delete.
RESET SESSION AUTHORIZATION;
RESET
:init_range_parted;
TRUNCATE TABLE
INSERT 0 6
SET SESSION AUTHORIZATION regress_range_parted_user;
SET
-- This should fail with RLS violation error. Even though the UPDATE is setting
-- 'c' to an even number, the trigger at the destination partition again makes
-- it an odd number.
UPDATE range_parted set a = 'b', c = 150 WHERE a = 'a' and c = 200;
psql:sql/update.sql:333: ERROR:  Kunlun-db: The result relation requires a primary key for such update/delete.
-- Cleanup
RESET SESSION AUTHORIZATION;
RESET
DROP TRIGGER trig_d_1_15 ON part_d_1_15;
DROP TRIGGER
DROP FUNCTION func_d_1_15();
DROP FUNCTION
-- Policy expression contains SubPlan
RESET SESSION AUTHORIZATION;
RESET
:init_range_parted;
TRUNCATE TABLE
INSERT 0 6
CREATE POLICY policy_range_parted_subplan on range_parted
    AS RESTRICTIVE for UPDATE USING (true)
    WITH CHECK ((SELECT range_parted.c <= c1 FROM mintab));
CREATE POLICY
SET SESSION AUTHORIZATION regress_range_parted_user;
SET
-- fail, mintab has row with c1 = 120
UPDATE range_parted set a = 'b', c = 122 WHERE a = 'a' and c = 200;
psql:sql/update.sql:348: ERROR:  Kunlun-db: The result relation requires a primary key for such update/delete.
-- ok
UPDATE range_parted set a = 'b', c = 120 WHERE a = 'a' and c = 200;
psql:sql/update.sql:350: ERROR:  Kunlun-db: The result relation requires a primary key for such update/delete.
-- RLS policy expression contains whole row.
RESET SESSION AUTHORIZATION;
RESET
:init_range_parted;
TRUNCATE TABLE
INSERT 0 6
CREATE POLICY policy_range_parted_wholerow on range_parted AS RESTRICTIVE for UPDATE USING (true)
   WITH CHECK (range_parted = row('b', 10, 112, 1, NULL)::range_parted);
CREATE POLICY
SET SESSION AUTHORIZATION regress_range_parted_user;
SET
-- ok, should pass the RLS check
UPDATE range_parted set a = 'b', c = 112 WHERE a = 'a' and c = 200;
psql:sql/update.sql:360: ERROR:  Kunlun-db: The result relation requires a primary key for such update/delete.
RESET SESSION AUTHORIZATION;
RESET
:init_range_parted;
TRUNCATE TABLE
INSERT 0 6
SET SESSION AUTHORIZATION regress_range_parted_user;
SET
-- fail, the whole row RLS check should fail
UPDATE range_parted set a = 'b', c = 116 WHERE a = 'a' and c = 200;
psql:sql/update.sql:365: ERROR:  Kunlun-db: The result relation requires a primary key for such update/delete.
-- Cleanup
RESET SESSION AUTHORIZATION;
RESET
DROP POLICY policy_range_parted ON range_parted;
DROP POLICY
DROP POLICY policy_range_parted_subplan ON range_parted;
DROP POLICY
DROP POLICY policy_range_parted_wholerow ON range_parted;
DROP POLICY
REVOKE ALL ON range_parted, mintab FROM regress_range_parted_user;
REVOKE
DROP USER regress_range_parted_user;
DROP ROLE
DROP TABLE mintab;
DROP TABLE
-- statement triggers with update row movement
---------------------------------------------------
:init_range_parted;
TRUNCATE TABLE
INSERT 0 6
CREATE FUNCTION trigfunc() returns trigger language plpgsql as
$$
  begin
    raise notice 'trigger = % fired on table % during %',
                 TG_NAME, TG_TABLE_NAME, TG_OP;
    return null;
  end;
$$;
CREATE FUNCTION
-- Triggers on root partition
CREATE TRIGGER parent_delete_trig
  AFTER DELETE ON range_parted for each statement execute procedure trigfunc();
CREATE TRIGGER
CREATE TRIGGER parent_update_trig
  AFTER UPDATE ON range_parted for each statement execute procedure trigfunc();
CREATE TRIGGER
CREATE TRIGGER parent_insert_trig
  AFTER INSERT ON range_parted for each statement execute procedure trigfunc();
CREATE TRIGGER
-- Triggers on leaf partition part_c_1_100
CREATE TRIGGER c1_delete_trig
  AFTER DELETE ON part_c_1_100 for each statement execute procedure trigfunc();
CREATE TRIGGER
CREATE TRIGGER c1_update_trig
  AFTER UPDATE ON part_c_1_100 for each statement execute procedure trigfunc();
CREATE TRIGGER
CREATE TRIGGER c1_insert_trig
  AFTER INSERT ON part_c_1_100 for each statement execute procedure trigfunc();
CREATE TRIGGER
-- Triggers on leaf partition part_d_1_15
CREATE TRIGGER d1_delete_trig
  AFTER DELETE ON part_d_1_15 for each statement execute procedure trigfunc();
CREATE TRIGGER
CREATE TRIGGER d1_update_trig
  AFTER UPDATE ON part_d_1_15 for each statement execute procedure trigfunc();
CREATE TRIGGER
CREATE TRIGGER d1_insert_trig
  AFTER INSERT ON part_d_1_15 for each statement execute procedure trigfunc();
CREATE TRIGGER
-- Triggers on leaf partition part_d_15_20
CREATE TRIGGER d15_delete_trig
  AFTER DELETE ON part_d_15_20 for each statement execute procedure trigfunc();
CREATE TRIGGER
CREATE TRIGGER d15_update_trig
  AFTER UPDATE ON part_d_15_20 for each statement execute procedure trigfunc();
CREATE TRIGGER
CREATE TRIGGER d15_insert_trig
  AFTER INSERT ON part_d_15_20 for each statement execute procedure trigfunc();
CREATE TRIGGER
-- Move all rows from part_c_100_200 to part_c_1_100. None of the delete or
-- insert statement triggers should be fired.
UPDATE range_parted set c = c - 50 WHERE c > 97;
psql:sql/update.sql:423: ERROR:  Kunlun-db: The result relation requires a primary key for such update/delete.
:show_data;
    partname    | a | b  |            c             | d  | e 
----------------+---+----+--------------------------+----+---
 part_a_10_a_20 | a | 10 | 200.00000000000000000000 |  1 | 
 part_a_1_a_10  | a |  1 |   1.00000000000000000000 |  1 | 
 part_c_1_100   | b | 12 |  96.00000000000000000000 |  1 | 
 part_c_1_100   | b | 13 |  97.00000000000000000000 |  2 | 
 part_d_15_20   | b | 15 | 105.00000000000000000000 | 16 | 
 part_d_15_20   | b | 17 | 105.00000000000000000000 | 19 | 
(6 rows)

DROP TRIGGER parent_delete_trig ON range_parted;
DROP TRIGGER
DROP TRIGGER parent_update_trig ON range_parted;
DROP TRIGGER
DROP TRIGGER parent_insert_trig ON range_parted;
DROP TRIGGER
DROP TRIGGER c1_delete_trig ON part_c_1_100;
DROP TRIGGER
DROP TRIGGER c1_update_trig ON part_c_1_100;
DROP TRIGGER
DROP TRIGGER c1_insert_trig ON part_c_1_100;
DROP TRIGGER
DROP TRIGGER d1_delete_trig ON part_d_1_15;
DROP TRIGGER
DROP TRIGGER d1_update_trig ON part_d_1_15;
DROP TRIGGER
DROP TRIGGER d1_insert_trig ON part_d_1_15;
DROP TRIGGER
DROP TRIGGER d15_delete_trig ON part_d_15_20;
DROP TRIGGER
DROP TRIGGER d15_update_trig ON part_d_15_20;
DROP TRIGGER
DROP TRIGGER d15_insert_trig ON part_d_15_20;
DROP TRIGGER
-- Creating default partition for range
:init_range_parted;
TRUNCATE TABLE
INSERT 0 6
create table part_def partition of range_parted default;
CREATE TABLE
\d+ part_def
                                          Table "public.part_def"
 Column |       Type        |    Collation     | Nullable | Default | Storage  | Stats target | Description 
--------+-------------------+------------------+----------+---------+----------+--------------+-------------
 a      | text              | utf8mb4_0900_bin |          |         | extended |              | 
 b      | bigint            |                  |          |         | plain    |              | 
 c      | numeric           |                  |          |         | main     |              | 
 d      | integer           |                  |          |         | plain    |              | 
 e      | character varying | utf8mb4_0900_bin |          |         | extended |              | 
Partition of: range_parted DEFAULT
Partition constraint: (NOT ((a IS NOT NULL) AND (b IS NOT NULL) AND (((a = 'a'::text COLLATE "default") AND (b >= '1'::bigint) AND (b < '10'::bigint)) OR ((a = 'a'::text COLLATE "default") AND (b >= '10'::bigint) AND (b < '20'::bigint)) OR ((a = 'b'::text COLLATE "default") AND (b >= '1'::bigint) AND (b < '10'::bigint)) OR ((a = 'b'::text COLLATE "default") AND (b >= '10'::bigint) AND (b < '20'::bigint)) OR ((a = 'b'::text COLLATE "default") AND (b >= '20'::bigint) AND (b < '30'::bigint)))))
Options: shard=1

insert into range_parted values ('c', 9);
INSERT 0 1
-- ok
update part_def set a = 'd' where a = 'c';
psql:sql/update.sql:445: ERROR:  Kunlun-db: The result relation requires a primary key for such update/delete.
-- fail
update part_def set a = 'a' where a = 'd';
psql:sql/update.sql:447: ERROR:  Kunlun-db: The result relation requires a primary key for such update/delete.
:show_data;
    partname    | a | b  |            c             | d  | e 
----------------+---+----+--------------------------+----+---
 part_a_10_a_20 | a | 10 | 200.00000000000000000000 |  1 | 
 part_a_1_a_10  | a |  1 |   1.00000000000000000000 |  1 | 
 part_c_1_100   | b | 12 |  96.00000000000000000000 |  1 | 
 part_c_1_100   | b | 13 |  97.00000000000000000000 |  2 | 
 part_d_15_20   | b | 15 | 105.00000000000000000000 | 16 | 
 part_d_15_20   | b | 17 | 105.00000000000000000000 | 19 | 
 part_def       | c |  9 |                          |    | 
(7 rows)

-- Update row movement from non-default to default partition.
-- fail, default partition is not under part_a_10_a_20;
UPDATE part_a_10_a_20 set a = 'ad' WHERE a = 'a';
psql:sql/update.sql:453: ERROR:  Kunlun-db: The result relation requires a primary key for such update/delete.
-- ok
UPDATE range_parted set a = 'ad' WHERE a = 'a';
psql:sql/update.sql:455: ERROR:  Kunlun-db: The result relation requires a primary key for such update/delete.
UPDATE range_parted set a = 'bd' WHERE a = 'b';
psql:sql/update.sql:456: ERROR:  Kunlun-db: The result relation requires a primary key for such update/delete.
:show_data;
    partname    | a | b  |            c             | d  | e 
----------------+---+----+--------------------------+----+---
 part_a_10_a_20 | a | 10 | 200.00000000000000000000 |  1 | 
 part_a_1_a_10  | a |  1 |   1.00000000000000000000 |  1 | 
 part_c_1_100   | b | 12 |  96.00000000000000000000 |  1 | 
 part_c_1_100   | b | 13 |  97.00000000000000000000 |  2 | 
 part_d_15_20   | b | 15 | 105.00000000000000000000 | 16 | 
 part_d_15_20   | b | 17 | 105.00000000000000000000 | 19 | 
 part_def       | c |  9 |                          |    | 
(7 rows)

-- Update row movement from default to non-default partitions.
-- ok
UPDATE range_parted set a = 'a' WHERE a = 'ad';
psql:sql/update.sql:460: ERROR:  Kunlun-db: The result relation requires a primary key for such update/delete.
UPDATE range_parted set a = 'b' WHERE a = 'bd';
psql:sql/update.sql:461: ERROR:  Kunlun-db: The result relation requires a primary key for such update/delete.
:show_data;
    partname    | a | b  |            c             | d  | e 
----------------+---+----+--------------------------+----+---
 part_a_10_a_20 | a | 10 | 200.00000000000000000000 |  1 | 
 part_a_1_a_10  | a |  1 |   1.00000000000000000000 |  1 | 
 part_c_1_100   | b | 12 |  96.00000000000000000000 |  1 | 
 part_c_1_100   | b | 13 |  97.00000000000000000000 |  2 | 
 part_d_15_20   | b | 15 | 105.00000000000000000000 | 16 | 
 part_d_15_20   | b | 17 | 105.00000000000000000000 | 19 | 
 part_def       | c |  9 |                          |    | 
(7 rows)

-- Cleanup: range_parted no longer needed.
DROP TABLE range_parted;
DROP TABLE
drop table if exists list_parted;
psql:sql/update.sql:467: NOTICE:  table "list_parted" does not exist, skipping
DROP TABLE
CREATE TABLE list_parted (
	a text,
	b int,
	primary key(a,b)
) PARTITION BY list (a);
CREATE TABLE
CREATE TABLE list_part1  PARTITION OF list_parted for VALUES in ('a', 'b');
CREATE TABLE
CREATE TABLE list_default PARTITION OF list_parted default;
CREATE TABLE
INSERT into list_part1 VALUES ('a', 1);
INSERT 0 1
INSERT into list_default VALUES ('d', 10);
INSERT 0 1
-- fail
UPDATE list_default set a = 'a' WHERE a = 'd';
psql:sql/update.sql:479: ERROR:  new row for relation "list_default" violates partition constraint
DETAIL:  Failing row contains (a, 10).
-- ok
UPDATE list_default set a = 'x' WHERE a = 'd';
UPDATE 1
DROP TABLE list_parted;
DROP TABLE
--------------
-- Some more update-partition-key test scenarios below. This time use list
-- partitions.
--------------
-- Setup for list partitions
drop table if exists list_parted cascade;
psql:sql/update.sql:491: NOTICE:  table "list_parted" does not exist, skipping
DROP TABLE
CREATE TABLE list_parted (a numeric, b int, c int8, primary key(a,b)) PARTITION BY list (a);
CREATE TABLE
CREATE TABLE sub_parted PARTITION OF list_parted for VALUES in (1) PARTITION BY list (b);
CREATE TABLE
CREATE TABLE sub_part1(b int NOT NULL, c int8, a numeric NOT NULL);
CREATE TABLE
ALTER TABLE sub_parted ATTACH PARTITION sub_part1 for VALUES in (1);
ALTER TABLE
CREATE TABLE sub_part2(b int NOT NULL, c int8, a numeric NOT NULL);
CREATE TABLE
ALTER TABLE sub_parted ATTACH PARTITION sub_part2 for VALUES in (2);
ALTER TABLE
CREATE TABLE list_part1(a numeric NOT NULL, b int NOT NULL, c int8);
CREATE TABLE
ALTER TABLE list_parted ATTACH PARTITION list_part1 for VALUES in (2,3);
ALTER TABLE
INSERT into list_parted VALUES (2,5,50);
INSERT 0 1
INSERT into list_parted VALUES (3,6,60);
INSERT 0 1
INSERT into sub_parted VALUES (1,1,60);
INSERT 0 1
INSERT into sub_parted VALUES (1,2,10);
INSERT 0 1
-- Test partition constraint violation when intermediate ancestor is used and
-- constraint is inherited from upper root.
UPDATE sub_parted set a = 2 WHERE c = 10;
psql:sql/update.sql:510: ERROR:  new row for relation "sub_parted" violates partition constraint
DETAIL:  Failing row contains (2, 2, 10).
-- Test update-partition-key, where the unpruned partitions do not have their
-- partition keys updated.
SELECT * FROM list_parted WHERE a = 2 ORDER BY 1;
           a            | b | c  
------------------------+---+----
 2.00000000000000000000 | 5 | 50
(1 row)

UPDATE list_parted set b = c + a WHERE a = 2;
UPDATE 1
SELECT * FROM list_parted WHERE a = 2 ORDER BY 1;
           a            | b  | c  
------------------------+----+----
 2.00000000000000000000 | 52 | 50
(1 row)

SELECT * FROM list_parted ORDER BY 1, 2, 3;
           a            | b  | c  
------------------------+----+----
 1.00000000000000000000 |  1 | 60
 1.00000000000000000000 |  2 | 10
 2.00000000000000000000 | 52 | 50
 3.00000000000000000000 |  6 | 60
(4 rows)

-- Test the case where BR UPDATE triggers change the partition key.
CREATE FUNCTION func_parted_mod_b() returns trigger as $$
BEGIN
   NEW.b = 2; -- This is changing partition key column.
   return NEW;
END $$ LANGUAGE plpgsql;
CREATE FUNCTION
CREATE TRIGGER parted_mod_b before update on sub_part1
   for each row execute procedure func_parted_mod_b();
CREATE TRIGGER
SELECT tableoid::regclass::text, * FROM list_parted ORDER BY 1, 2, 3, 4;
  tableoid  |           a            | b  | c  
------------+------------------------+----+----
 list_part1 | 2.00000000000000000000 | 52 | 50
 list_part1 | 3.00000000000000000000 |  6 | 60
 sub_part1  | 1.00000000000000000000 |  1 | 60
 sub_part2  | 1.00000000000000000000 |  2 | 10
(4 rows)

-- This should do the tuple routing even though there is no explicit
-- partition-key update, because there is a trigger on sub_part1.
UPDATE list_parted set c = 70 WHERE b  = 1;
UPDATE 1
SELECT * FROM list_parted ORDER BY 1, 2, 3;
           a            | b  | c  
------------------------+----+----
 1.00000000000000000000 |  1 | 70
 1.00000000000000000000 |  2 | 10
 2.00000000000000000000 | 52 | 50
 3.00000000000000000000 |  6 | 60
(4 rows)

--UPDATE list_parted set b = 1 WHERE c = 70;
SELECT * FROM list_parted ORDER BY 1, 2, 3;
           a            | b  | c  
------------------------+----+----
 1.00000000000000000000 |  1 | 70
 1.00000000000000000000 |  2 | 10
 2.00000000000000000000 | 52 | 50
 3.00000000000000000000 |  6 | 60
(4 rows)

DROP TRIGGER parted_mod_b ON sub_part1;
DROP TRIGGER
-- If BR DELETE trigger prevented DELETE from happening, we should also skip
-- the INSERT if that delete is part of UPDATE=>DELETE+INSERT.
CREATE OR REPLACE FUNCTION func_parted_mod_b() returns trigger as $$
BEGIN
   raise notice 'Trigger: Got OLD row %, but returning NULL', OLD;
   return NULL;
END $$ LANGUAGE plpgsql;
CREATE FUNCTION
CREATE TRIGGER trig_skip_delete before delete on sub_part2
   for each row execute procedure func_parted_mod_b();
CREATE TRIGGER
UPDATE list_parted set b = 1 WHERE c = 70;
UPDATE 1
SELECT tableoid::regclass::text, * FROM list_parted ORDER BY 1, 2, 3, 4;
  tableoid  |           a            | b  | c  
------------+------------------------+----+----
 list_part1 | 2.00000000000000000000 | 52 | 50
 list_part1 | 3.00000000000000000000 |  6 | 60
 sub_part1  | 1.00000000000000000000 |  1 | 70
 sub_part2  | 1.00000000000000000000 |  2 | 10
(4 rows)

-- Drop the trigger. Now the row should be moved.
DROP TRIGGER trig_skip_delete ON sub_part2;
DROP TRIGGER
UPDATE list_parted set b = 1 WHERE c = 70;
UPDATE 1
SELECT tableoid::regclass::text, * FROM list_parted ORDER BY 1, 2, 3, 4;
  tableoid  |           a            | b  | c  
------------+------------------------+----+----
 list_part1 | 2.00000000000000000000 | 52 | 50
 list_part1 | 3.00000000000000000000 |  6 | 60
 sub_part1  | 1.00000000000000000000 |  1 | 70
 sub_part2  | 1.00000000000000000000 |  2 | 10
(4 rows)

DROP FUNCTION func_parted_mod_b();
DROP FUNCTION
-- UPDATE partition-key with FROM clause. If join produces multiple output
-- rows for the same row to be modified, we should tuple-route the row only
-- once. There should not be any rows inserted.
drop table if exists non_parted;
psql:sql/update.sql:559: NOTICE:  table "non_parted" does not exist, skipping
DROP TABLE
CREATE TABLE non_parted (id int);
CREATE TABLE
INSERT into non_parted VALUES (1), (1), (1), (2), (2), (2), (3), (3), (3);
INSERT 0 9
UPDATE list_parted t1 set a = 2 FROM non_parted t2 WHERE t1.a = t2.id and a = 1;
UPDATE 2
SELECT * FROM list_parted ORDER BY 1, 2, 3;
           a            | b  | c  
------------------------+----+----
 2.00000000000000000000 |  1 | 70
 2.00000000000000000000 |  2 | 10
 2.00000000000000000000 | 52 | 50
 3.00000000000000000000 |  6 | 60
(4 rows)

DROP TABLE non_parted;
DROP TABLE
-- Cleanup: list_parted no longer needed.
DROP TABLE list_parted;
DROP TABLE
-- create custom operator class and hash function, for the same reason
-- explained in alter_table.sql
create or replace function dummy_hashint4(a int4, seed int8) returns int8 as
$$ begin return (a + seed); end; $$ language 'plpgsql' immutable;
CREATE FUNCTION
create operator class custom_opclass for type int4 using hash as
operator 1 = , function 2 dummy_hashint4(int4, int8);
CREATE OPERATOR CLASS
drop table if exists hash_parted;
psql:sql/update.sql:576: NOTICE:  table "hash_parted" does not exist, skipping
DROP TABLE
create table hash_parted (
	a int,
	b int,
	primary key(a,b)
) partition by hash (a custom_opclass, b custom_opclass);
CREATE TABLE
create table hpart1 partition of hash_parted for values with (modulus 2, remainder 1);
CREATE TABLE
create table hpart2 partition of hash_parted for values with (modulus 4, remainder 2);
CREATE TABLE
create table hpart3 partition of hash_parted for values with (modulus 8, remainder 0);
CREATE TABLE
create table hpart4 partition of hash_parted for values with (modulus 8, remainder 4);
CREATE TABLE
insert into hpart1 values (1, 1);
INSERT 0 1
insert into hpart2 values (2, 5);
INSERT 0 1
insert into hpart4 values (3, 4);
INSERT 0 1
-- fail
update hpart1 set a = 3, b=4 where a = 1;
psql:sql/update.sql:591: ERROR:  new row for relation "hpart1" violates partition constraint
DETAIL:  Failing row contains (3, 4).
-- ok, row movement
update hash_parted set b = b - 1 where b = 1;
UPDATE 1
-- ok
update hash_parted set b = b + 8 where b = 1;
UPDATE 0
-- cleanup
drop table hash_parted;
DROP TABLE
drop operator class custom_opclass using hash;
DROP OPERATOR CLASS
drop function dummy_hashint4(a int4, seed int8);
DROP FUNCTION
