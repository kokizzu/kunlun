--
-- COPY
--
-- CLASS POPULATION
--	(any resemblance to real life is purely coincidental)
--
COPY aggtest FROM '/home/kunlun/pgregressdata/data/agg.data';
COPY 4
COPY onek FROM '/home/kunlun/pgregressdata/data/onek.data';
COPY 1000
COPY onek TO '/home/kunlun/pgregressdata/results/onek.data';
COPY 1000
DELETE FROM onek;
DELETE 1000
COPY onek FROM '/home/kunlun/pgregressdata/results/onek.data';
COPY 1000
COPY tenk1 FROM '/home/kunlun/pgregressdata/data/tenk.data';
COPY 10000
CREATE temp TABLE  slow_emp4000 (home_base box);
CREATE TABLE
COPY slow_emp4000 FROM '/home/kunlun/pgregressdata/data/rect.data';
COPY 3378
COPY person FROM '/home/kunlun/pgregressdata/data/person.data';
COPY 50
COPY emp FROM '/home/kunlun/pgregressdata/data/emp.data';
COPY 3
COPY student FROM '/home/kunlun/pgregressdata/data/student.data';
COPY 2
COPY stud_emp FROM '/home/kunlun/pgregressdata/data/stud_emp.data';
COPY 3
CREATE temp TABLE road (name	text,thepath 	path);
CREATE TABLE
COPY road FROM '/home/kunlun/pgregressdata/data/streets.data';
COPY 5124
CREATE  temp TABLE real_city (
	pop			int4,
	cname		text,
	outline 	path
);
CREATE TABLE
COPY real_city FROM '/home/kunlun/pgregressdata/data/real_city.data';
COPY 5
COPY hash_i4_heap FROM '/home/kunlun/pgregressdata/data/hash.data';
COPY 10000
COPY hash_name_heap FROM '/home/kunlun/pgregressdata/data/hash.data';
COPY 10000
COPY hash_txt_heap FROM '/home/kunlun/pgregressdata/data/hash.data';
COPY 10000
COPY hash_f8_heap FROM '/home/kunlun/pgregressdata/data/hash.data';
COPY 10000
CREATE temp TABLE IF NOT EXISTS test_tsvector(t text,a tsvector);
CREATE TABLE
COPY test_tsvector FROM '/home/kunlun/pgregressdata/data/tsearch.data';
COPY 508
COPY testjsonb FROM '/home/kunlun/pgregressdata/data/jsonb.data';
COPY 1012
-- the data in this file has a lot of duplicates in the index key
-- fields, leading to long bucket chains and lots of table expansion.
-- this is therefore a stress test of the bucket overflow code (unlike
-- the data in hash.data, which has unique index keys).
--
-- COPY hash_ovfl_heap FROM '/home/kunlun/pgregressdata/data/hashovfl.data';
COPY bt_i4_heap FROM '/home/kunlun/pgregressdata/data/desc.data';
COPY 10000
COPY bt_name_heap FROM '/home/kunlun/pgregressdata/data/hash.data';
COPY 10000
COPY bt_txt_heap FROM '/home/kunlun/pgregressdata/data/desc.data';
COPY 10000
COPY bt_f8_heap FROM '/home/kunlun/pgregressdata/data/hash.data';
COPY 10000
CREATE temp TABLE array_op_test (
	seqno		int4,
	i			int4[],
	t			text[]
);
CREATE TABLE
COPY array_op_test FROM '/home/kunlun/pgregressdata/data/array.data';
COPY 103
CREATE temp  TABLE array_index_op_test (
	seqno		int4,
	i			int4[],
	t			text[]
);
CREATE TABLE
COPY array_index_op_test FROM '/home/kunlun/pgregressdata/data/array.data';
COPY 103
--- test copying in CSV mode with various styles
--- of embedded line ending characters
create temp table copytest (
	style	text,
	test 	text,
	filler	int);
CREATE TABLE
insert into copytest values('DOS',E'abc\r\ndef',1);
INSERT 0 1
insert into copytest values('Unix',E'abc\ndef',2);
INSERT 0 1
insert into copytest values('Mac',E'abc\rdef',3);
INSERT 0 1
insert into copytest values(E'esc\\ape',E'a\\r\\\r\\\n\\nb',4);
INSERT 0 1
copy copytest to '/home/kunlun/pgregressdata/results/copytest.csv' csv;
COPY 4
create temp table copytest2 (like copytest);
CREATE TABLE
copy copytest2 from '/home/kunlun/pgregressdata/results/copytest.csv' csv;
COPY 4
select * from copytest except select * from copytest2;
 style | test | filler 
-------+------+--------
(0 rows)

delete from copytest2;
DELETE 0
--- same test but with an escape char different from quote char
copy copytest to '/home/kunlun/pgregressdata/results/copytest.csv' csv quote '''' escape E'\\';
COPY 4
copy copytest2 from '/home/kunlun/pgregressdata/results/copytest.csv' csv quote '''' escape E'\\';
COPY 4
select * from copytest except select * from copytest2;
 style | test | filler 
-------+------+--------
(0 rows)

-- test header line feature
create temp table copytest3 (
	c1 int,
	"col with , comma" text,
	"col with "" quote"  int);
CREATE TABLE
copy copytest3 from stdin csv header;
COPY 2
copy copytest3 to stdout csv header;
c1,"col with , comma","col with "" quote"
1,a,1
2,b,2
-- test copy from with a partitioned table
create table parted_copytest (
	a int,
	b int,
	c text
) partition by list (b);
CREATE TABLE
create table parted_copytest_a1 partition of parted_copytest for values in (1);
CREATE TABLE
create table parted_copytest_a2 partition of parted_copytest for values in (2);
CREATE TABLE
--alter table parted_copytest attach partition parted_copytest_a1 for values in(1);
--alter table parted_copytest attach partition parted_copytest_a2 for values in(2);
-- We must insert enough rows to trigger multi-inserts.  These are only
-- enabled adaptively when there are few enough partition changes.
insert into parted_copytest select x,1,'One' from generate_series(1,1000) x;
INSERT 0 1000
insert into parted_copytest select x,2,'Two' from generate_series(1001,1010) x;
INSERT 0 10
insert into parted_copytest select x,1,'One' from generate_series(1011,1020) x;
INSERT 0 10
copy (select * from parted_copytest order by a) to '/home/kunlun/pgregressdata/results/parted_copytest.csv';
COPY 1020
-- Ensure COPY FREEZE errors for partitioned tables.
begin;
BEGIN
delete from parted_copytest;
DELETE 1020
copy parted_copytest from '/home/kunlun/pgregressdata/results/parted_copytest.csv' (freeze);
psql:sql/copy.sql:154: ERROR:  cannot perform FREEZE on a partitioned table
rollback;
ROLLBACK
drop table parted_copytest;
DROP TABLE
