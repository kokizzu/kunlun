--
-- Tests to exercise the plan caching/invalidation mechanism
--
CREATE TEMP TABLE pcachetest(like int8_tbl);
CREATE TABLE
insert into pcachetest SELECT * FROM int8_tbl;
INSERT 0 5
-- create and use a cached plan
PREPARE prepstmt AS SELECT * FROM pcachetest;
PREPARE
EXECUTE prepstmt;
        q1        |        q2         
------------------+-------------------
              123 |               456
              123 |  4567890123456789
 4567890123456789 |               123
 4567890123456789 |  4567890123456789
 4567890123456789 | -4567890123456789
(5 rows)

-- and one with parameters
PREPARE prepstmt2(bigint) AS SELECT * FROM pcachetest WHERE q1 = $1;
PREPARE
EXECUTE prepstmt2(123);
 q1  |        q2        
-----+------------------
 123 |              456
 123 | 4567890123456789
(2 rows)

-- invalidate the plans and see what happens
DROP TABLE pcachetest;
DROP TABLE
EXECUTE prepstmt;
psql:sql/plancache.sql:21: ERROR:  relation "pcachetest" does not exist
EXECUTE prepstmt2(123);
psql:sql/plancache.sql:22: ERROR:  relation "pcachetest" does not exist
-- recreate the temp table (this demonstrates that the raw plan is
-- purely textual and doesn't depend on OIDs, for instance)
CREATE TEMP TABLE pcachetest(like int8_tbl);
CREATE TABLE
insert into pcachetest SELECT * FROM int8_tbl ORDER BY 2;
INSERT 0 5
EXECUTE prepstmt;
        q1        |        q2         
------------------+-------------------
 4567890123456789 | -4567890123456789
 4567890123456789 |               123
              123 |               456
              123 |  4567890123456789
 4567890123456789 |  4567890123456789
(5 rows)

EXECUTE prepstmt2(123);
 q1  |        q2        
-----+------------------
 123 |              456
 123 | 4567890123456789
(2 rows)

-- prepared statements should prevent change in output tupdesc,
-- since clients probably aren't expecting that to change on the fly
ALTER TABLE pcachetest ADD COLUMN q3 bigint;
ALTER TABLE
EXECUTE prepstmt;
psql:sql/plancache.sql:35: ERROR:  cached plan must not change result type
EXECUTE prepstmt2(123);
psql:sql/plancache.sql:36: ERROR:  cached plan must not change result type
-- but we're nice guys and will let you undo your mistake
ALTER TABLE pcachetest DROP COLUMN q3;
ALTER TABLE
EXECUTE prepstmt;
        q1        |        q2         
------------------+-------------------
 4567890123456789 | -4567890123456789
 4567890123456789 |               123
              123 |               456
              123 |  4567890123456789
 4567890123456789 |  4567890123456789
(5 rows)

EXECUTE prepstmt2(123);
 q1  |        q2        
-----+------------------
 123 |              456
 123 | 4567890123456789
(2 rows)

-- Try it with a view, which isn't directly used in the resulting plan
-- but should trigger invalidation anyway
CREATE TEMP VIEW pcacheview AS
  SELECT * FROM pcachetest;
CREATE VIEW
PREPARE vprep AS SELECT * FROM pcacheview;
PREPARE
EXECUTE vprep;
        q1        |        q2         
------------------+-------------------
 4567890123456789 | -4567890123456789
 4567890123456789 |               123
              123 |               456
              123 |  4567890123456789
 4567890123456789 |  4567890123456789
(5 rows)

CREATE OR REPLACE TEMP VIEW pcacheview AS
  SELECT q1, q2/2 AS q2 FROM pcachetest;
CREATE VIEW
EXECUTE vprep;
        q1        |        q2         
------------------+-------------------
 4567890123456789 | -2283945061728394
 4567890123456789 |                61
              123 |               228
              123 |  2283945061728394
 4567890123456789 |  2283945061728394
(5 rows)

-- Check basic SPI plan invalidation
drop function if exists cache_test(int);
psql:sql/plancache.sql:60: NOTICE:  function cache_test(pg_catalog.int4) does not exist, skipping
DROP FUNCTION
create function cache_test(int) returns int as $$
declare total int;
begin
	create temp table t1(f1 int);
	insert into t1 values($1);
	insert into t1 values(11);
	insert into t1 values(12);
	insert into t1 values(13);
	select sum(f1) into total from t1;
	drop table t1;
	return total;
end
$$ language plpgsql;
CREATE FUNCTION
select cache_test(1);
 cache_test 
------------
         37
(1 row)

select cache_test(2);
 cache_test 
------------
         38
(1 row)

select cache_test(3);
 cache_test 
------------
         39
(1 row)

-- Check invalidation of plpgsql "simple expression"
create temp view v1 as
  select 2+2 as f1;
CREATE VIEW
drop function if exists cache_test_2();
psql:sql/plancache.sql:84: NOTICE:  function cache_test_2() does not exist, skipping
DROP FUNCTION
create function cache_test_2() returns int as $$
begin
	return f1 from v1;
end$$ language plpgsql;
CREATE FUNCTION
select cache_test_2();
 cache_test_2 
--------------
            4
(1 row)

create or replace temp view v1 as
  select 2+2+4 as f1;
CREATE VIEW
select cache_test_2();
 cache_test_2 
--------------
            8
(1 row)

create or replace temp view v1 as
  select 2+2+4+(select max(unique1) from tenk1) as f1;
CREATE VIEW
select cache_test_2();
 cache_test_2 
--------------
        10007
(1 row)

--- Check that change of search_path is honored when re-using cached plan
create schema s1;
CREATE SCHEMA
create table s1.abc (f1 int);
CREATE TABLE
create schema s2;
CREATE SCHEMA
create table s2.abc (f1 int);
CREATE TABLE
insert into s1.abc values(123);
INSERT 0 1
insert into s2.abc values(456);
INSERT 0 1
set search_path = s1;
SET
prepare p1 as select f1 from abc;
PREPARE
execute p1;
 f1  
-----
 123
(1 row)

set search_path = s2;
SET
select f1 from abc;
 f1  
-----
 456
(1 row)

execute p1;
 f1  
-----
 456
(1 row)

alter table s1.abc add column f2 float8;   -- force replan
ALTER TABLE
execute p1;
 f1  
-----
 456
(1 row)

reset search_path;
RESET
drop table s1.abc cascade;
DROP TABLE
drop schema s1 cascade;
DROP SCHEMA
drop table s2.abc cascade;
DROP TABLE
drop schema s2 cascade;
DROP SCHEMA
-- Check that invalidation deals with regclass constants
create temp sequence seq;
CREATE SEQUENCE
prepare p2 as select nextval('seq');
PREPARE
execute p2;
 nextval 
---------
       1
(1 row)

drop sequence seq;
DROP SEQUENCE
create temp sequence seq;
CREATE SEQUENCE
execute p2;
 nextval 
---------
       1
(1 row)

-- Check DDL via SPI, immediately followed by SPI plan re-use
-- (bug in original coding)
drop function if exists cachebug();
psql:sql/plancache.sql:151: NOTICE:  function cachebug() does not exist, skipping
DROP FUNCTION
create function cachebug() returns void as $$
declare r int;
begin
  drop table if exists temptable cascade;
  create temp table temptable(f1 int);
  insert into temptable select * from generate_series(1,3) as f1;
  create temp view vv as select * from temptable;
  for r in select * from vv loop
    raise notice '%', r;
  end loop;
end$$ language plpgsql;
CREATE FUNCTION
select cachebug();
psql:sql/plancache.sql:164: NOTICE:  table "temptable" does not exist, skipping
psql:sql/plancache.sql:164: NOTICE:  1
psql:sql/plancache.sql:164: NOTICE:  2
psql:sql/plancache.sql:164: NOTICE:  3
 cachebug 
----------
 
(1 row)

select cachebug();
psql:sql/plancache.sql:165: NOTICE:  drop cascades to view vv
psql:sql/plancache.sql:165: NOTICE:  1
psql:sql/plancache.sql:165: NOTICE:  2
psql:sql/plancache.sql:165: NOTICE:  3
 cachebug 
----------
 
(1 row)

-- Check that addition or removal of any partition is correctly dealt with by
-- default partition table when it is being used in prepared statement.
create table pc_list_parted (a int) partition by list(a);
CREATE TABLE
create table pc_list_part_null partition of pc_list_parted for values in (null);
CREATE TABLE
create table pc_list_part_1 partition of pc_list_parted for values in (1);
CREATE TABLE
create table pc_list_part_2 partition of pc_list_parted for values in (2);
CREATE TABLE
alter table pc_list_parted detach partition pc_list_part_null;
ALTER TABLE
-- should be ok
drop table pc_list_part_1;
DROP TABLE
-- should be ok
drop table pc_list_parted;
DROP TABLE
drop table pc_list_part_null;
DROP TABLE
