--
-- Test Statistics Collector
--
-- Must be run after tenk2 has been created (by create_table),
-- populated (by create_misc) and indexed (by create_index).
--
-- conditio sine qua non
SHOW track_counts;  -- must be on
 track_counts 
--------------
 on
(1 row)

-- ensure that both seqscan and indexscan plans are allowed
SET enable_seqscan TO on;
SET
SET enable_indexscan TO on;
SET
-- for the moment, we don't want index-only scans here
SET enable_indexonlyscan TO off;
SET
-- test effects of TRUNCATE on n_live_tup/n_dead_tup counters
CREATE TABLE trunc_stats_test(id serial);
CREATE TABLE
CREATE TABLE trunc_stats_test1(id serial, stuff text);
CREATE TABLE
CREATE TABLE trunc_stats_test2(id serial);
CREATE TABLE
CREATE TABLE trunc_stats_test3(id serial, stuff text);
CREATE TABLE
CREATE TABLE trunc_stats_test4(id serial);
CREATE TABLE
-- check that n_live_tup is reset to 0 after truncate
INSERT INTO trunc_stats_test DEFAULT VALUES;
INSERT 0 1
INSERT INTO trunc_stats_test DEFAULT VALUES;
INSERT 0 1
INSERT INTO trunc_stats_test DEFAULT VALUES;
INSERT 0 1
delete from trunc_stats_test;
DELETE 3
-- test involving a truncate in a transaction; 4 ins but only 1 live
INSERT INTO trunc_stats_test1 DEFAULT VALUES;
INSERT 0 1
INSERT INTO trunc_stats_test1 DEFAULT VALUES;
INSERT 0 1
INSERT INTO trunc_stats_test1 DEFAULT VALUES;
INSERT 0 1
UPDATE trunc_stats_test1 SET id = id + 10 WHERE id IN (1, 2);
UPDATE 2
DELETE FROM trunc_stats_test1 WHERE id = 3;
DELETE 1
BEGIN;
BEGIN
UPDATE trunc_stats_test1 SET id = id + 100;
UPDATE 2
delete from trunc_stats_test1;
DELETE 2
INSERT INTO trunc_stats_test1 DEFAULT VALUES;
INSERT 0 1
COMMIT;
COMMIT
-- use a savepoint: 1 insert, 1 live
BEGIN;
BEGIN
INSERT INTO trunc_stats_test2 DEFAULT VALUES;
INSERT 0 1
INSERT INTO trunc_stats_test2 DEFAULT VALUES;
INSERT 0 1
SAVEPOINT p1;
SAVEPOINT
INSERT INTO trunc_stats_test2 DEFAULT VALUES;
INSERT 0 1
delete from trunc_stats_test2;
DELETE 3
INSERT INTO trunc_stats_test2 DEFAULT VALUES;
INSERT 0 1
--crash: RELEASE SAVEPOINT p1;
COMMIT;
COMMIT
-- rollback a savepoint: this should count 4 inserts and have 2
-- live tuples after commit (and 2 dead ones due to aborted subxact)
BEGIN;
BEGIN
INSERT INTO trunc_stats_test3 DEFAULT VALUES;
INSERT 0 1
INSERT INTO trunc_stats_test3 DEFAULT VALUES;
INSERT 0 1
SAVEPOINT p1;
SAVEPOINT
INSERT INTO trunc_stats_test3 DEFAULT VALUES;
INSERT 0 1
INSERT INTO trunc_stats_test3 DEFAULT VALUES;
INSERT 0 1
delete from trunc_stats_test3;
DELETE 4
INSERT INTO trunc_stats_test3 DEFAULT VALUES;
INSERT 0 1
ROLLBACK TO SAVEPOINT p1;
ROLLBACK
COMMIT;
COMMIT
-- rollback a truncate: this should count 2 inserts and produce 2 dead tuples
BEGIN;
BEGIN
INSERT INTO trunc_stats_test4 DEFAULT VALUES;
INSERT 0 1
INSERT INTO trunc_stats_test4 DEFAULT VALUES;
INSERT 0 1
delete from trunc_stats_test4;
DELETE 2
INSERT INTO trunc_stats_test4 DEFAULT VALUES;
INSERT 0 1
ROLLBACK;
ROLLBACK
-- do a seqscan
SELECT count(*) FROM tenk2;
 count 
-------
     0
(1 row)

-- do an indexscan
-- make sure it is not a bitmap scan, which might skip fetching heap tuples
SET enable_bitmapscan TO off;
SET
SELECT count(*) FROM tenk2 WHERE unique1 = 1;
 count 
-------
     0
(1 row)

RESET enable_bitmapscan;
RESET
-- check effects
--SELECT relname, n_tup_ins, n_tup_upd, n_tup_del, n_live_tup, --n_dead_tup
--  FROM pg_stat_user_tables
-- WHERE relname like 'trunc_stats_test%' order by relname;
SELECT st.seq_scan >= pr.seq_scan + 1,
       st.seq_tup_read >= pr.seq_tup_read + cl.reltuples,
       st.idx_scan >= pr.idx_scan + 1,
       st.idx_tup_fetch >= pr.idx_tup_fetch + 1
  FROM pg_stat_user_tables AS st, pg_class AS cl, prevstats AS pr
 WHERE st.relname='tenk2' AND cl.relname='tenk2';
psql:sql/stats.sql:93: ERROR:  relation "prevstats" does not exist
LINE 5:   FROM pg_stat_user_tables AS st, pg_class AS cl, prevstats ...
                                                          ^
SELECT st.heap_blks_read + st.heap_blks_hit >= pr.heap_blks + cl.relpages,
       st.idx_blks_read + st.idx_blks_hit >= pr.idx_blks + 1
  FROM pg_statio_user_tables AS st, pg_class AS cl, prevstats AS pr
 WHERE st.relname='tenk2' AND cl.relname='tenk2';
psql:sql/stats.sql:98: ERROR:  relation "prevstats" does not exist
LINE 3: ...FROM pg_statio_user_tables AS st, pg_class AS cl, prevstats ...
                                                             ^
SELECT pr.snap_ts < pg_stat_get_snapshot_timestamp() as snapshot_newer
FROM prevstats AS pr;
psql:sql/stats.sql:101: ERROR:  relation "prevstats" does not exist
LINE 2: FROM prevstats AS pr;
             ^
DROP TABLE trunc_stats_test;
DROP TABLE
drop table trunc_stats_test1;
DROP TABLE
drop table trunc_stats_test2;
DROP TABLE
drop table trunc_stats_test3;
DROP TABLE
drop table trunc_stats_test4;
DROP TABLE
DROP TABLE prevstats;
psql:sql/stats.sql:108: ERROR:  table "prevstats" does not exist
-- End of Stats Test
