--
-- UNION (also INTERSECT, EXCEPT)
--
-- Simple UNION constructs
SELECT 1 AS two UNION SELECT 2 ORDER BY 1;
 two 
-----
   1
   2
(2 rows)

SELECT 1 AS one UNION SELECT 1 ORDER BY 1;
 one 
-----
   1
(1 row)

SELECT 1 AS two UNION ALL SELECT 2;
 two 
-----
   1
   2
(2 rows)

SELECT 1 AS two UNION ALL SELECT 1;
 two 
-----
   1
   1
(2 rows)

SELECT 1 AS three UNION SELECT 2 UNION SELECT 3 ORDER BY 1;
 three 
-------
     1
     2
     3
(3 rows)

SELECT 1 AS two UNION SELECT 2 UNION SELECT 2 ORDER BY 1;
 two 
-----
   1
   2
(2 rows)

SELECT 1 AS three UNION SELECT 2 UNION ALL SELECT 2 ORDER BY 1;
 three 
-------
     1
     2
     2
(3 rows)

SELECT 1.1 AS two UNION SELECT 2.2 ORDER BY 1;
 two 
-----
 1.1
 2.2
(2 rows)

-- Mixed types
SELECT 1.1 AS two UNION SELECT 2 ORDER BY 1;
 two 
-----
 1.1
   2
(2 rows)

SELECT 1 AS two UNION SELECT 2.2 ORDER BY 1;
 two 
-----
   1
 2.2
(2 rows)

SELECT 1 AS one UNION SELECT 1.0::float8 ORDER BY 1;
 one 
-----
   1
(1 row)

SELECT 1.1 AS two UNION ALL SELECT 2 ORDER BY 1;
 two 
-----
 1.1
   2
(2 rows)

SELECT 1.0::float8 AS two UNION ALL SELECT 1 ORDER BY 1;
 two 
-----
   1
   1
(2 rows)

SELECT 1.1 AS three UNION SELECT 2 UNION SELECT 3 ORDER BY 1;
 three 
-------
   1.1
     2
     3
(3 rows)

SELECT 1.1::float8 AS two UNION SELECT 2 UNION SELECT 2.0::float8 ORDER BY 1;
 two 
-----
 1.1
   2
(2 rows)

SELECT 1.1 AS three UNION SELECT 2 UNION ALL SELECT 2 ORDER BY 1;
 three 
-------
   1.1
     2
     2
(3 rows)

SELECT 1.1 AS two UNION (SELECT 2 UNION ALL SELECT 2) ORDER BY 1;
 two 
-----
 1.1
   2
(2 rows)

--
-- Try testing from tables...
--
SELECT f1 AS five FROM FLOAT8_TBL
UNION
SELECT f1 FROM FLOAT8_TBL
ORDER BY 1;
         five          
-----------------------
 -1.2345678901234e+200
               -1004.3
                -34.84
 -1.2345678901234e-200
                     0
(5 rows)

SELECT f1 AS ten FROM FLOAT8_TBL
UNION ALL
SELECT f1 FROM FLOAT8_TBL;
          ten          
-----------------------
                     0
                -34.84
               -1004.3
 -1.2345678901234e+200
 -1.2345678901234e-200
                     0
                -34.84
               -1004.3
 -1.2345678901234e+200
 -1.2345678901234e-200
(10 rows)

SELECT f1 AS nine FROM FLOAT8_TBL
UNION
SELECT f1 FROM INT4_TBL
ORDER BY 1;
         nine          
-----------------------
 -1.2345678901234e+200
           -2147483647
               -123456
               -1004.3
                -34.84
 -1.2345678901234e-200
                     0
                123456
            2147483647
(9 rows)

SELECT f1 AS ten FROM FLOAT8_TBL
UNION ALL
SELECT f1 FROM INT4_TBL;
          ten          
-----------------------
                     0
                -34.84
               -1004.3
 -1.2345678901234e+200
 -1.2345678901234e-200
                     0
                123456
               -123456
            2147483647
           -2147483647
(10 rows)

SELECT f1 AS five FROM FLOAT8_TBL
  WHERE f1 BETWEEN -1e6 AND 1e6
UNION
SELECT f1 FROM INT4_TBL
  WHERE f1 BETWEEN 0 AND 1000000
ORDER BY 1;
         five          
-----------------------
               -1004.3
                -34.84
 -1.2345678901234e-200
                     0
                123456
(5 rows)

SELECT CAST(f1 AS char(4)) AS three FROM VARCHAR_TBL
UNION
SELECT f1 FROM CHAR_TBL
ORDER BY 1;
 three 
-------
 a   
 ab  
 abcd
(3 rows)

SELECT f1 AS three FROM VARCHAR_TBL
UNION
SELECT CAST(f1 AS varchar) FROM CHAR_TBL
ORDER BY 1;
 three 
-------
 a
 ab
 abcd
(3 rows)

SELECT f1 AS eight FROM VARCHAR_TBL
UNION ALL
SELECT f1 FROM CHAR_TBL;
 eight 
-------
 a
 ab
 abcd
 abcd
 a
 ab
 abcd
 abcd
(8 rows)

SELECT f1 AS five FROM TEXT_TBL
UNION
SELECT f1 FROM VARCHAR_TBL
UNION
SELECT TRIM(TRAILING FROM f1) FROM CHAR_TBL
ORDER BY 1;
       five        
-------------------
 a
 ab
 abcd
 doh!
 hi de ho neighbor
(5 rows)

--
-- INTERSECT and EXCEPT
--
SELECT q2 FROM int8_tbl INTERSECT SELECT q1 FROM int8_tbl ORDER BY 1;
        q2        
------------------
              123
 4567890123456789
(2 rows)

SELECT q2 FROM int8_tbl INTERSECT ALL SELECT q1 FROM int8_tbl ORDER BY 1;
        q2        
------------------
              123
 4567890123456789
 4567890123456789
(3 rows)

SELECT q2 FROM int8_tbl EXCEPT SELECT q1 FROM int8_tbl ORDER BY 1;
        q2         
-------------------
 -4567890123456789
               456
(2 rows)

SELECT q2 FROM int8_tbl EXCEPT ALL SELECT q1 FROM int8_tbl ORDER BY 1;
        q2         
-------------------
 -4567890123456789
               456
(2 rows)

SELECT q2 FROM int8_tbl EXCEPT ALL SELECT DISTINCT q1 FROM int8_tbl ORDER BY 1;
        q2         
-------------------
 -4567890123456789
               456
  4567890123456789
(3 rows)

SELECT q1 FROM int8_tbl EXCEPT SELECT q2 FROM int8_tbl ORDER BY 1;
 q1 
----
(0 rows)

SELECT q1 FROM int8_tbl EXCEPT ALL SELECT q2 FROM int8_tbl ORDER BY 1;
        q1        
------------------
              123
 4567890123456789
(2 rows)

SELECT q1 FROM int8_tbl EXCEPT ALL SELECT DISTINCT q2 FROM int8_tbl ORDER BY 1;
        q1        
------------------
              123
 4567890123456789
 4567890123456789
(3 rows)

SELECT q1 FROM int8_tbl EXCEPT ALL SELECT q1 FROM int8_tbl FOR NO KEY UPDATE;
psql:sql/union.sql:113: ERROR:  FOR NO KEY UPDATE is not allowed with UNION/INTERSECT/EXCEPT
-- nested cases
(SELECT 1,2,3 UNION SELECT 4,5,6) INTERSECT SELECT 4,5,6;
 ?column? | ?column? | ?column? 
----------+----------+----------
        4 |        5 |        6
(1 row)

(SELECT 1,2,3 UNION SELECT 4,5,6 ORDER BY 1,2) INTERSECT SELECT 4,5,6;
 ?column? | ?column? | ?column? 
----------+----------+----------
        4 |        5 |        6
(1 row)

(SELECT 1,2,3 UNION SELECT 4,5,6) EXCEPT SELECT 4,5,6;
 ?column? | ?column? | ?column? 
----------+----------+----------
        1 |        2 |        3
(1 row)

(SELECT 1,2,3 UNION SELECT 4,5,6 ORDER BY 1,2) EXCEPT SELECT 4,5,6;
 ?column? | ?column? | ?column? 
----------+----------+----------
        1 |        2 |        3
(1 row)

-- exercise both hashed and sorted implementations of INTERSECT/EXCEPT
set enable_hashagg to on;
SET
delete from tenk1;
DELETE 10000
COPY tenk1 FROM '/home/vito/pgregressdata/data/tenk.data';
COPY 10000
explain (costs off)
select count(*) from
  ( select unique1 from tenk1 intersect select fivethous from tenk1 ) ss;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Aggregate
   ->  Subquery Scan on ss
         ->  HashSetOp Intersect
               ->  Append
                     ->  Subquery Scan on "*SELECT* 1"
                           ->  RemoteScan on tenk1
                                 Shard: 1        Remote SQL: select  tenk1.unique1 from regress_$$_public.tenk1 tenk1
                     ->  Subquery Scan on "*SELECT* 2"
                           ->  RemoteScan on tenk1 tenk1_1
                                 Shard: 1        Remote SQL: select  tenk1.fivethous from regress_$$_public.tenk1 tenk1
(10 rows)

select count(*) from
  ( select unique1 from tenk1 intersect select fivethous from tenk1 ) ss;
 count 
-------
  5000
(1 row)

explain (costs off)
select unique1 from tenk1 except select unique2 from tenk1 where unique2 != 10;
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 HashSetOp Except
   ->  Append
         ->  Subquery Scan on "*SELECT* 1"
               ->  RemoteScan on tenk1
                     Shard: 1    Remote SQL: select  tenk1.unique1 from regress_$$_public.tenk1 tenk1
         ->  Subquery Scan on "*SELECT* 2"
               ->  RemoteScan on tenk1 tenk1_1
                     Shard: 1    Remote SQL: select  tenk1.unique2 from regress_$$_public.tenk1 tenk1 where (tenk1.unique2 <> 10)
(8 rows)

select unique1 from tenk1 except select unique2 from tenk1 where unique2 != 10;
 unique1 
---------
      10
(1 row)

set enable_hashagg to off;
SET
explain (costs off)
select count(*) from
  ( select unique1 from tenk1 intersect select fivethous from tenk1 ) ss;
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   ->  Subquery Scan on ss
         ->  SetOp Intersect
               ->  Merge Append
                     Sort Key: "*SELECT* 1".unique1 NULLS FIRST
                     ->  Subquery Scan on "*SELECT* 1"
                           ->  RemoteScan on tenk1
                                 Shard: 1        Remote SQL: select  tenk1.unique1 from regress_$$_public.tenk1 tenk1 ORDER BY 1 ASC
                     ->  Subquery Scan on "*SELECT* 2"
                           ->  RemoteScan on tenk1 tenk1_1
                                 Shard: 1        Remote SQL: select  tenk1.fivethous from regress_$$_public.tenk1 tenk1 ORDER BY 1 ASC
(11 rows)

select count(*) from
  ( select unique1 from tenk1 intersect select fivethous from tenk1 ) ss;
 count 
-------
  5000
(1 row)

explain (costs off)
select unique1 from tenk1 except select unique2 from tenk1 where unique2 != 10;
                                                                   QUERY PLAN                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------
 SetOp Except
   ->  Merge Append
         Sort Key: "*SELECT* 1".unique1 NULLS FIRST
         ->  Subquery Scan on "*SELECT* 1"
               ->  RemoteScan on tenk1
                     Shard: 1    Remote SQL: select  tenk1.unique1 from regress_$$_public.tenk1 tenk1 ORDER BY 1 ASC
         ->  Subquery Scan on "*SELECT* 2"
               ->  RemoteScan on tenk1 tenk1_1
                     Shard: 1    Remote SQL: select  tenk1.unique2 from regress_$$_public.tenk1 tenk1 where (tenk1.unique2 <> 10) ORDER BY 1 ASC
(9 rows)

select unique1 from tenk1 except select unique2 from tenk1 where unique2 != 10;
 unique1 
---------
      10
(1 row)

reset enable_hashagg;
RESET
--
-- Mixed types
--
SELECT f1 FROM float8_tbl INTERSECT SELECT f1 FROM int4_tbl ORDER BY 1;
 f1 
----
  0
(1 row)

SELECT f1 FROM float8_tbl EXCEPT SELECT f1 FROM int4_tbl ORDER BY 1;
          f1           
-----------------------
 -1.2345678901234e+200
               -1004.3
                -34.84
 -1.2345678901234e-200
(4 rows)

--
-- Operator precedence and (((((extra))))) parentheses
--
SELECT q1 FROM int8_tbl INTERSECT SELECT q2 FROM int8_tbl UNION ALL SELECT q2 FROM int8_tbl  ORDER BY 1;
        q1         
-------------------
 -4567890123456789
               123
               123
               456
  4567890123456789
  4567890123456789
  4567890123456789
(7 rows)

SELECT q1 FROM int8_tbl INTERSECT (((SELECT q2 FROM int8_tbl UNION ALL SELECT q2 FROM int8_tbl))) ORDER BY 1;
        q1        
------------------
              123
 4567890123456789
(2 rows)

(((SELECT q1 FROM int8_tbl INTERSECT SELECT q2 FROM int8_tbl ORDER BY 1))) UNION ALL SELECT q2 FROM int8_tbl;
        q1         
-------------------
               123
  4567890123456789
               456
  4567890123456789
               123
  4567890123456789
 -4567890123456789
(7 rows)

SELECT q1 FROM int8_tbl UNION ALL SELECT q2 FROM int8_tbl EXCEPT SELECT q1 FROM int8_tbl ORDER BY 1;
        q1         
-------------------
 -4567890123456789
               456
(2 rows)

SELECT q1 FROM int8_tbl UNION ALL (((SELECT q2 FROM int8_tbl EXCEPT SELECT q1 FROM int8_tbl ORDER BY 1)));
        q1         
-------------------
               123
               123
  4567890123456789
  4567890123456789
  4567890123456789
 -4567890123456789
               456
(7 rows)

(((SELECT q1 FROM int8_tbl UNION ALL SELECT q2 FROM int8_tbl))) EXCEPT SELECT q1 FROM int8_tbl ORDER BY 1;
        q1         
-------------------
 -4567890123456789
               456
(2 rows)

--
-- Subqueries with ORDER BY & LIMIT clauses
--
-- In this syntax, ORDER BY/LIMIT apply to the result of the EXCEPT
SELECT q1,q2 FROM int8_tbl EXCEPT SELECT q2,q1 FROM int8_tbl
ORDER BY q2,q1;
        q1        |        q2         
------------------+-------------------
 4567890123456789 | -4567890123456789
              123 |               456
(2 rows)

-- This should fail, because q2 isn't a name of an EXCEPT output column
SELECT q1 FROM int8_tbl EXCEPT SELECT q2 FROM int8_tbl ORDER BY q2 LIMIT 1;
psql:sql/union.sql:184: ERROR:  column "q2" does not exist
LINE 1: ... int8_tbl EXCEPT SELECT q2 FROM int8_tbl ORDER BY q2 LIMIT 1...
                                                             ^
HINT:  There is a column named "q2" in table "*SELECT* 2", but it cannot be referenced from this part of the query.
-- But this should work:
SELECT q1 FROM int8_tbl EXCEPT (((SELECT q2 FROM int8_tbl ORDER BY q2 LIMIT 1))) ORDER BY 1;
        q1        
------------------
              123
 4567890123456789
(2 rows)

--
-- New syntaxes (7.1) permit new tests
--
(((((select * from int8_tbl)))));
        q1        |        q2         
------------------+-------------------
              123 |               456
              123 |  4567890123456789
 4567890123456789 |               123
 4567890123456789 |  4567890123456789
 4567890123456789 | -4567890123456789
(5 rows)

--
-- Check behavior with empty select list (allowed since 9.4)
--
select union select;
--
(1 row)

select intersect select;
--
(1 row)

select except select;
--
(0 rows)

-- check hashed implementation
set enable_hashagg = true;
SET
set enable_sort = false;
SET
explain (costs off)
select from generate_series(1,5) union select from generate_series(1,3);
                           QUERY PLAN                           
----------------------------------------------------------------
 HashAggregate
   ->  Append
         ->  Function Scan on generate_series
         ->  Function Scan on generate_series generate_series_1
(4 rows)

explain (costs off)
select from generate_series(1,5) intersect select from generate_series(1,3);
                              QUERY PLAN                              
----------------------------------------------------------------------
 HashSetOp Intersect
   ->  Append
         ->  Subquery Scan on "*SELECT* 1"
               ->  Function Scan on generate_series
         ->  Subquery Scan on "*SELECT* 2"
               ->  Function Scan on generate_series generate_series_1
(6 rows)

select from generate_series(1,5) union select from generate_series(1,3);
--
(1 row)

select from generate_series(1,5) union all select from generate_series(1,3);
--
(8 rows)

select from generate_series(1,5) intersect select from generate_series(1,3);
--
(1 row)

select from generate_series(1,5) intersect all select from generate_series(1,3);
--
(3 rows)

select from generate_series(1,5) except select from generate_series(1,3);
--
(0 rows)

select from generate_series(1,5) except all select from generate_series(1,3);
--
(2 rows)

-- check sorted implementation
set enable_hashagg = false;
SET
set enable_sort = true;
SET
explain (costs off)
select from generate_series(1,5) union select from generate_series(1,3);
                           QUERY PLAN                           
----------------------------------------------------------------
 Unique
   ->  Append
         ->  Function Scan on generate_series
         ->  Function Scan on generate_series generate_series_1
(4 rows)

explain (costs off)
select from generate_series(1,5) intersect select from generate_series(1,3);
                              QUERY PLAN                              
----------------------------------------------------------------------
 SetOp Intersect
   ->  Append
         ->  Subquery Scan on "*SELECT* 1"
               ->  Function Scan on generate_series
         ->  Subquery Scan on "*SELECT* 2"
               ->  Function Scan on generate_series generate_series_1
(6 rows)

select from generate_series(1,5) union select from generate_series(1,3);
--
(1 row)

select from generate_series(1,5) union all select from generate_series(1,3);
--
(8 rows)

select from generate_series(1,5) intersect select from generate_series(1,3);
--
(1 row)

select from generate_series(1,5) intersect all select from generate_series(1,3);
--
(3 rows)

select from generate_series(1,5) except select from generate_series(1,3);
--
(0 rows)

select from generate_series(1,5) except all select from generate_series(1,3);
--
(2 rows)

reset enable_hashagg;
RESET
reset enable_sort;
RESET
--
-- Check handling of a case with unknown constants.  We don't guarantee
-- an undecorated constant will work in all cases, but historically this
-- usage has worked, so test we don't break it.
--
SELECT a.f1 FROM (SELECT 'test' AS f1 FROM varchar_tbl) a
UNION
SELECT b.f1 FROM (SELECT f1 FROM varchar_tbl) b
ORDER BY 1;
  f1  
------
 a
 ab
 abcd
 test
(4 rows)

-- This should fail, but it should produce an error cursor
SELECT '3.4'::numeric UNION SELECT 'foo';
psql:sql/union.sql:250: ERROR:  invalid input syntax for type numeric: "foo"
LINE 1: SELECT '3.4'::numeric UNION SELECT 'foo';
                                           ^
--
-- Test that expression-index constraints can be pushed down through
-- UNION or UNION ALL
--
CREATE TEMP TABLE t1 (a text, b text);
CREATE TABLE
CREATE INDEX t1_ab_idx on t1 ((a || b));
CREATE INDEX
CREATE TEMP TABLE t2 (ab text primary key);
CREATE TABLE
INSERT INTO t1 VALUES ('a', 'b'), ('x', 'y');
INSERT 0 2
INSERT INTO t2 VALUES ('ab'), ('xy');
INSERT 0 2
set enable_seqscan = off;
SET
set enable_indexscan = on;
SET
set enable_bitmapscan = off;
SET
explain (costs off)
 SELECT * FROM
 (SELECT a || b AS ab FROM t1
  UNION ALL
  SELECT * FROM t2) t
 WHERE ab = 'ab';
                 QUERY PLAN                  
---------------------------------------------
 Append
   ->  Index Scan using t1_ab_idx on t1
         Index Cond: ((a || b) = 'ab'::text)
   ->  Index Only Scan using t2_pkey on t2
         Index Cond: (ab = 'ab'::text)
(5 rows)

explain (costs off)
 SELECT * FROM
 (SELECT a || b AS ab FROM t1
  UNION
  SELECT * FROM t2) t
 WHERE ab = 'ab';
                    QUERY PLAN                     
---------------------------------------------------
 HashAggregate
   Group Key: ((t1.a || t1.b))
   ->  Append
         ->  Index Scan using t1_ab_idx on t1
               Index Cond: ((a || b) = 'ab'::text)
         ->  Index Only Scan using t2_pkey on t2
               Index Cond: (ab = 'ab'::text)
(7 rows)

--
-- Test that ORDER BY for UNION ALL can be pushed down to inheritance
-- children.
--
CREATE TEMP TABLE t1c (b text, a text);
CREATE TABLE
INSERT INTO t1c VALUES ('v', 'w'), ('c', 'd'), ('m', 'n'), ('e', 'f');
INSERT 0 4
CREATE INDEX t1c_ab_idx on t1c ((a || b));
CREATE INDEX
set enable_seqscan = on;
SET
set enable_indexonlyscan = off;
SET
explain (costs off)
  SELECT * FROM
  (SELECT a || b AS ab FROM t1
   UNION ALL
   SELECT ab FROM t2) t
  ORDER BY 1 LIMIT 8;
                  QUERY PLAN                  
----------------------------------------------
 Limit
   ->  Merge Append
         Sort Key: ((t1.a || t1.b))
         ->  Index Scan using t1_ab_idx on t1
         ->  Index Scan using t2_pkey on t2
(5 rows)

  SELECT * FROM
  (SELECT a || b AS ab FROM t1
   UNION ALL
   SELECT ab FROM t2) t
  ORDER BY 1 LIMIT 8;
 ab 
----
 ab
 ab
 xy
 xy
(4 rows)

reset enable_seqscan;
RESET
reset enable_indexscan;
RESET
reset enable_bitmapscan;
RESET
-- Test constraint exclusion of UNION ALL subqueries
explain (costs off)
 SELECT * FROM
  (SELECT 1 AS t, * FROM tenk1 a
   UNION ALL
   SELECT 2 AS t, * FROM tenk1 b) c
 WHERE t = 2;
                                                                                                                    QUERY PLAN                                                                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Append
   ->  RemoteScan on tenk1 b
         Shard: 1        Remote SQL: select  b.unique1, b.unique2, b.two, b.four, b.ten, b.twenty, b.hundred, b.thousand, b.twothousand, b.fivethous, b.tenthous, b.odd, b.even, b.stringu1, b.stringu2, b.string4 from regress_$$_public.tenk1 b
(3 rows)

-- Test that we push quals into UNION sub-selects only when it's safe
explain (costs off)
SELECT * FROM
  (SELECT 1 AS t, 2 AS x
   UNION
   SELECT 2 AS t, 4 AS x) ss
WHERE x < 4
ORDER BY x;
                    QUERY PLAN                    
--------------------------------------------------
 Sort
   Sort Key: (2)
   ->  Unique
         ->  Sort
               Sort Key: (1), (2)
               ->  Append
                     ->  Result
                     ->  Result
                           One-Time Filter: false
(9 rows)

SELECT * FROM
  (SELECT 1 AS t, 2 AS x
   UNION
   SELECT 2 AS t, 4 AS x) ss
WHERE x < 4
ORDER BY x;
 t | x 
---+---
 1 | 2
(1 row)

explain (costs off)
SELECT * FROM
  (SELECT 1 AS t, generate_series(1,10) AS x
   UNION
   SELECT 2 AS t, 4 AS x) ss
WHERE x < 4
ORDER BY x;
                       QUERY PLAN                       
--------------------------------------------------------
 Sort
   Sort Key: ss.x
   ->  Subquery Scan on ss
         Filter: (ss.x < 4)
         ->  HashAggregate
               Group Key: (1), (generate_series(1, 10))
               ->  Append
                     ->  ProjectSet
                           ->  Result
                     ->  Result
(10 rows)

SELECT * FROM
  (SELECT 1 AS t, generate_series(1,10) AS x
   UNION
   SELECT 2 AS t, 4 AS x) ss
WHERE x < 4
ORDER BY x;
 t | x 
---+---
 1 | 1
 1 | 2
 1 | 3
(3 rows)

explain (costs off)
SELECT * FROM
  (SELECT 1 AS t, (random()*3)::int AS x
   UNION
   SELECT 2 AS t, 4 AS x) ss
WHERE x > 3
ORDER BY x;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Sort
   Sort Key: ss.x
   ->  Subquery Scan on ss
         Filter: (ss.x > 3)
         ->  Unique
               ->  Sort
                     Sort Key: (1), (((random() * '3'::double precision))::integer)
                     ->  Append
                           ->  Result
                           ->  Result
(10 rows)

SELECT * FROM
  (SELECT 1 AS t, (random()*3)::int AS x
   UNION
   SELECT 2 AS t, 4 AS x) ss
WHERE x > 3
ORDER BY x;
 t | x 
---+---
 2 | 4
(1 row)

-- Test cases where the native ordering of a sub-select has more pathkeys
-- than the outer query cares about
explain (costs off)
select distinct q1 from
  (select distinct * from int8_tbl i81
   union all
   select distinct * from int8_tbl i82) ss
where q2 = q2;
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Unique
   ->  Sort
         Sort Key: "*SELECT* 1".q1
         ->  Append
               ->  Subquery Scan on "*SELECT* 1"
                     ->  HashAggregate
                           Group Key: i81.q1, i81.q2
                           ->  RemoteScan on int8_tbl i81
                                 Shard: 1        Remote SQL: select  i81.q1, i81.q2 from regress_$$_public.int8_tbl i81 where (i81.q2 IS NOT NULL)
               ->  Subquery Scan on "*SELECT* 2"
                     ->  HashAggregate
                           Group Key: i82.q1, i82.q2
                           ->  RemoteScan on int8_tbl i82
                                 Shard: 1        Remote SQL: select  i82.q1, i82.q2 from regress_$$_public.int8_tbl i82 where (i82.q2 IS NOT NULL)
(14 rows)

select distinct q1 from
  (select distinct * from int8_tbl i81
   union all
   select distinct * from int8_tbl i82) ss
where q2 = q2;
        q1        
------------------
              123
 4567890123456789
(2 rows)

explain (costs off)
select distinct q1 from
  (select distinct * from int8_tbl i81
   union all
   select distinct * from int8_tbl i82) ss
where -q1 = q2;
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 Unique
   ->  Sort
         Sort Key: "*SELECT* 1".q1
         ->  Append
               ->  Subquery Scan on "*SELECT* 1"
                     ->  HashAggregate
                           Group Key: i81.q1, i81.q2
                           ->  RemoteScan on int8_tbl i81
                                 Shard: 1        Remote SQL: select  i81.q1, i81.q2 from regress_$$_public.int8_tbl i81 where (( - i81.q1) = i81.q2)
               ->  Subquery Scan on "*SELECT* 2"
                     ->  HashAggregate
                           Group Key: i82.q1, i82.q2
                           ->  RemoteScan on int8_tbl i82
                                 Shard: 1        Remote SQL: select  i82.q1, i82.q2 from regress_$$_public.int8_tbl i82 where (( - i82.q1) = i82.q2)
(14 rows)

select distinct q1 from
  (select distinct * from int8_tbl i81
   union all
   select distinct * from int8_tbl i82) ss
where -q1 = q2;
        q1        
------------------
 4567890123456789
(1 row)

-- Test handling of appendrel quals that const-simplify into an AND
explain (costs off)
select * from
  (select *, 0 as x from int8_tbl a
   union all
   select *, 1 as x from int8_tbl b) ss
where (x = 0) or (q1 >= q2 and q1 <= q2);
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Append
   ->  RemoteScan on int8_tbl a
         Shard: 1        Remote SQL: select  a.q1, a.q2 from regress_$$_public.int8_tbl a
   ->  RemoteScan on int8_tbl b
         Shard: 1        Remote SQL: select  b.q1, b.q2 from regress_$$_public.int8_tbl b where (b.q1 >= b.q2) AND (b.q1 <= b.q2)
(5 rows)

select * from
  (select *, 0 as x from int8_tbl a
   union all
   select *, 1 as x from int8_tbl b) ss
where (x = 0) or (q1 >= q2 and q1 <= q2);
        q1        |        q2         | x 
------------------+-------------------+---
              123 |               456 | 0
              123 |  4567890123456789 | 0
 4567890123456789 |               123 | 0
 4567890123456789 |  4567890123456789 | 0
 4567890123456789 | -4567890123456789 | 0
 4567890123456789 |  4567890123456789 | 1
(6 rows)

