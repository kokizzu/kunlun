--
-- Test for ALTER some_object {RENAME TO, OWNER TO, SET SCHEMA}
--
-- Clean up in case a prior regression run failed
SET client_min_messages TO 'warning';
SET
DROP ROLE IF EXISTS regress_alter_generic_user1;
DROP ROLE
DROP ROLE IF EXISTS regress_alter_generic_user2;
DROP ROLE
DROP ROLE IF EXISTS regress_alter_generic_user3;
DROP ROLE
RESET client_min_messages;
RESET
CREATE USER regress_alter_generic_user3;
CREATE ROLE
CREATE USER regress_alter_generic_user2;
CREATE ROLE
CREATE USER regress_alter_generic_user1 IN ROLE regress_alter_generic_user3;
CREATE ROLE
CREATE SCHEMA alt_nsp1;
CREATE SCHEMA
CREATE SCHEMA alt_nsp2;
CREATE SCHEMA
GRANT ALL ON SCHEMA alt_nsp1, alt_nsp2 TO public;
GRANT
SET search_path = alt_nsp1, public;
SET
--
-- Function and Aggregate
--
SET SESSION AUTHORIZATION regress_alter_generic_user1;
SET
CREATE FUNCTION alt_func1(int) RETURNS int LANGUAGE sql
  AS 'SELECT $1 + 1';
CREATE FUNCTION
CREATE FUNCTION alt_func2(int) RETURNS int LANGUAGE sql
  AS 'SELECT $1 - 1';
CREATE FUNCTION
CREATE AGGREGATE alt_agg1 (
  sfunc1 = int4pl, basetype = int4, stype1 = int4, initcond = 0
);
CREATE AGGREGATE
CREATE AGGREGATE alt_agg2 (
  sfunc1 = int4mi, basetype = int4, stype1 = int4, initcond = 0
);
CREATE AGGREGATE
ALTER AGGREGATE alt_func1(int) RENAME TO alt_func3;  -- failed (not aggregate)
psql:sql/alter_generic.sql:39: ERROR:  function alt_func1(integer) is not an aggregate
ALTER AGGREGATE alt_func1(int) OWNER TO regress_alter_generic_user3;  -- failed (not aggregate)
psql:sql/alter_generic.sql:40: ERROR:  function alt_func1(integer) is not an aggregate
ALTER AGGREGATE alt_func1(int) SET SCHEMA alt_nsp2;  -- failed (not aggregate)
psql:sql/alter_generic.sql:41: ERROR:  function alt_func1(integer) is not an aggregate
ALTER FUNCTION alt_func1(int) RENAME TO alt_func2;  -- failed (name conflict)
psql:sql/alter_generic.sql:43: ERROR:  function alt_func2(integer) already exists in schema "alt_nsp1"
ALTER FUNCTION alt_func1(int) RENAME TO alt_func3;  -- OK
ALTER FUNCTION
ALTER FUNCTION alt_func2(int) OWNER TO regress_alter_generic_user2;  -- failed (no role membership)
psql:sql/alter_generic.sql:45: ERROR:  must be member of role "regress_alter_generic_user2"
ALTER FUNCTION alt_func2(int) OWNER TO regress_alter_generic_user3;  -- OK
ALTER FUNCTION
ALTER FUNCTION alt_func2(int) SET SCHEMA alt_nsp1;  -- OK, already there
ALTER FUNCTION
ALTER FUNCTION alt_func2(int) SET SCHEMA alt_nsp2;  -- OK
ALTER FUNCTION
ALTER AGGREGATE alt_agg1(int) RENAME TO alt_agg2;   -- failed (name conflict)
psql:sql/alter_generic.sql:50: ERROR:  function alt_agg2(integer) already exists in schema "alt_nsp1"
ALTER AGGREGATE alt_agg1(int) RENAME TO alt_agg3;   -- OK
ALTER AGGREGATE
ALTER AGGREGATE alt_agg2(int) OWNER TO regress_alter_generic_user2;  -- failed (no role membership)
psql:sql/alter_generic.sql:52: ERROR:  must be member of role "regress_alter_generic_user2"
ALTER AGGREGATE alt_agg2(int) OWNER TO regress_alter_generic_user3;  -- OK
ALTER AGGREGATE
ALTER AGGREGATE alt_agg2(int) SET SCHEMA alt_nsp2;  -- OK
ALTER AGGREGATE
SET SESSION AUTHORIZATION regress_alter_generic_user2;
SET
CREATE FUNCTION alt_func1(int) RETURNS int LANGUAGE sql
  AS 'SELECT $1 + 2';
CREATE FUNCTION
CREATE FUNCTION alt_func2(int) RETURNS int LANGUAGE sql
  AS 'SELECT $1 - 2';
CREATE FUNCTION
CREATE AGGREGATE alt_agg1 (
  sfunc1 = int4pl, basetype = int4, stype1 = int4, initcond = 100
);
CREATE AGGREGATE
CREATE AGGREGATE alt_agg2 (
  sfunc1 = int4mi, basetype = int4, stype1 = int4, initcond = -100
);
CREATE AGGREGATE
ALTER FUNCTION alt_func3(int) RENAME TO alt_func4;	-- failed (not owner)
psql:sql/alter_generic.sql:68: ERROR:  must be owner of function alt_func3
ALTER FUNCTION alt_func1(int) RENAME TO alt_func4;	-- OK
ALTER FUNCTION
ALTER FUNCTION alt_func3(int) OWNER TO regress_alter_generic_user2;	-- failed (not owner)
psql:sql/alter_generic.sql:70: ERROR:  must be owner of function alt_func3
ALTER FUNCTION alt_func2(int) OWNER TO regress_alter_generic_user3;	-- failed (no role membership)
psql:sql/alter_generic.sql:71: ERROR:  must be member of role "regress_alter_generic_user3"
ALTER FUNCTION alt_func3(int) SET SCHEMA alt_nsp2;      -- failed (not owner)
psql:sql/alter_generic.sql:72: ERROR:  must be owner of function alt_func3
ALTER FUNCTION alt_func2(int) SET SCHEMA alt_nsp2;	-- failed (name conflicts)
psql:sql/alter_generic.sql:73: ERROR:  function alt_func2(integer) already exists in schema "alt_nsp2"
ALTER AGGREGATE alt_agg3(int) RENAME TO alt_agg4;   -- failed (not owner)
psql:sql/alter_generic.sql:75: ERROR:  must be owner of function alt_agg3
ALTER AGGREGATE alt_agg1(int) RENAME TO alt_agg4;   -- OK
ALTER AGGREGATE
ALTER AGGREGATE alt_agg3(int) OWNER TO regress_alter_generic_user2;  -- failed (not owner)
psql:sql/alter_generic.sql:77: ERROR:  must be owner of function alt_agg3
ALTER AGGREGATE alt_agg2(int) OWNER TO regress_alter_generic_user3;  -- failed (no role membership)
psql:sql/alter_generic.sql:78: ERROR:  must be member of role "regress_alter_generic_user3"
ALTER AGGREGATE alt_agg3(int) SET SCHEMA alt_nsp2;  -- failed (not owner)
psql:sql/alter_generic.sql:79: ERROR:  must be owner of function alt_agg3
ALTER AGGREGATE alt_agg2(int) SET SCHEMA alt_nsp2;  -- failed (name conflict)
psql:sql/alter_generic.sql:80: ERROR:  function alt_agg2(integer) already exists in schema "alt_nsp2"
RESET SESSION AUTHORIZATION;
RESET
SELECT n.nspname, proname, prorettype::regtype, prokind, a.rolname
  FROM pg_proc p, pg_namespace n, pg_authid a
  WHERE p.pronamespace = n.oid AND p.proowner = a.oid
    AND n.nspname IN ('alt_nsp1', 'alt_nsp2')
  ORDER BY nspname, proname;
 nspname  |  proname  | prorettype | prokind |           rolname           
----------+-----------+------------+---------+-----------------------------
 alt_nsp1 | alt_agg2  | integer    | a       | regress_alter_generic_user2
 alt_nsp1 | alt_agg3  | integer    | a       | regress_alter_generic_user1
 alt_nsp1 | alt_agg4  | integer    | a       | regress_alter_generic_user2
 alt_nsp1 | alt_func2 | integer    | f       | regress_alter_generic_user2
 alt_nsp1 | alt_func3 | integer    | f       | regress_alter_generic_user1
 alt_nsp1 | alt_func4 | integer    | f       | regress_alter_generic_user2
 alt_nsp2 | alt_agg2  | integer    | a       | regress_alter_generic_user3
 alt_nsp2 | alt_func2 | integer    | f       | regress_alter_generic_user3
(8 rows)

--
-- We would test collations here, but it's not possible because the error
-- messages tend to be nonportable.
--
--
-- Conversion
--
SET SESSION AUTHORIZATION regress_alter_generic_user1;
SET
CREATE CONVERSION alt_conv1 FOR 'LATIN1' TO 'UTF8' FROM iso8859_1_to_utf8;
CREATE CONVERSION
CREATE CONVERSION alt_conv2 FOR 'LATIN1' TO 'UTF8' FROM iso8859_1_to_utf8;
CREATE CONVERSION
ALTER CONVERSION alt_conv1 RENAME TO alt_conv2;  -- failed (name conflict)
psql:sql/alter_generic.sql:102: ERROR:  conversion "alt_conv2" already exists in schema "alt_nsp1"
ALTER CONVERSION alt_conv1 RENAME TO alt_conv3;  -- OK
ALTER CONVERSION
ALTER CONVERSION alt_conv2 OWNER TO regress_alter_generic_user2;  -- failed (no role membership)
psql:sql/alter_generic.sql:104: ERROR:  must be member of role "regress_alter_generic_user2"
ALTER CONVERSION alt_conv2 OWNER TO regress_alter_generic_user3;  -- OK
ALTER CONVERSION
ALTER CONVERSION alt_conv2 SET SCHEMA alt_nsp2;  -- OK
ALTER CONVERSION
SET SESSION AUTHORIZATION regress_alter_generic_user2;
SET
CREATE CONVERSION alt_conv1 FOR 'LATIN1' TO 'UTF8' FROM iso8859_1_to_utf8;
CREATE CONVERSION
CREATE CONVERSION alt_conv2 FOR 'LATIN1' TO 'UTF8' FROM iso8859_1_to_utf8;
CREATE CONVERSION
ALTER CONVERSION alt_conv3 RENAME TO alt_conv4;  -- failed (not owner)
psql:sql/alter_generic.sql:111: ERROR:  must be owner of conversion alt_conv3
ALTER CONVERSION alt_conv1 RENAME TO alt_conv4;  -- OK
ALTER CONVERSION
ALTER CONVERSION alt_conv3 OWNER TO regress_alter_generic_user2;  -- failed (not owner)
psql:sql/alter_generic.sql:114: ERROR:  must be owner of conversion alt_conv3
ALTER CONVERSION alt_conv2 OWNER TO regress_alter_generic_user3;  -- failed (no role membership)
psql:sql/alter_generic.sql:115: ERROR:  must be member of role "regress_alter_generic_user3"
ALTER CONVERSION alt_conv3 SET SCHEMA alt_nsp2;  -- failed (not owner)
psql:sql/alter_generic.sql:116: ERROR:  must be owner of conversion alt_conv3
ALTER CONVERSION alt_conv2 SET SCHEMA alt_nsp2;  -- failed (name conflict)
psql:sql/alter_generic.sql:117: ERROR:  conversion "alt_conv2" already exists in schema "alt_nsp2"
RESET SESSION AUTHORIZATION;
RESET
SELECT n.nspname, c.conname, a.rolname
  FROM pg_conversion c, pg_namespace n, pg_authid a
  WHERE c.connamespace = n.oid AND c.conowner = a.oid
    AND n.nspname IN ('alt_nsp1', 'alt_nsp2')
  ORDER BY nspname, conname;
 nspname  |  conname  |           rolname           
----------+-----------+-----------------------------
 alt_nsp1 | alt_conv2 | regress_alter_generic_user2
 alt_nsp1 | alt_conv3 | regress_alter_generic_user1
 alt_nsp1 | alt_conv4 | regress_alter_generic_user2
 alt_nsp2 | alt_conv2 | regress_alter_generic_user3
(4 rows)

--
-- Foreign Data Wrapper and Foreign Server
--
CREATE FOREIGN DATA WRAPPER alt_fdw1;
CREATE FOREIGN DATA WRAPPER
CREATE FOREIGN DATA WRAPPER alt_fdw2;
CREATE FOREIGN DATA WRAPPER
CREATE SERVER alt_fserv1 FOREIGN DATA WRAPPER alt_fdw1;
CREATE SERVER
CREATE SERVER alt_fserv2 FOREIGN DATA WRAPPER alt_fdw2;
CREATE SERVER
ALTER FOREIGN DATA WRAPPER alt_fdw1 RENAME TO alt_fdw2;  -- failed (name conflict)
psql:sql/alter_generic.sql:136: ERROR:  foreign-data wrapper "alt_fdw2" already exists
ALTER FOREIGN DATA WRAPPER alt_fdw1 RENAME TO alt_fdw3;  -- OK
ALTER FOREIGN DATA WRAPPER
ALTER SERVER alt_fserv1 RENAME TO alt_fserv2;   -- failed (name conflict)
psql:sql/alter_generic.sql:139: ERROR:  server "alt_fserv2" already exists
ALTER SERVER alt_fserv1 RENAME TO alt_fserv3;   -- OK
ALTER SERVER
SELECT fdwname FROM pg_foreign_data_wrapper WHERE fdwname like 'alt_fdw%';
 fdwname  
----------
 alt_fdw2
 alt_fdw3
(2 rows)

SELECT srvname FROM pg_foreign_server WHERE srvname like 'alt_fserv%';
  srvname   
------------
 alt_fserv2
 alt_fserv3
(2 rows)

--
-- Procedural Language
--
CREATE LANGUAGE alt_lang1 HANDLER plpgsql_call_handler;
CREATE LANGUAGE
CREATE LANGUAGE alt_lang2 HANDLER plpgsql_call_handler;
CREATE LANGUAGE
ALTER LANGUAGE alt_lang1 OWNER TO regress_alter_generic_user1;  -- OK
ALTER LANGUAGE
ALTER LANGUAGE alt_lang2 OWNER TO regress_alter_generic_user2;  -- OK
ALTER LANGUAGE
SET SESSION AUTHORIZATION regress_alter_generic_user1;
SET
ALTER LANGUAGE alt_lang1 RENAME TO alt_lang2;   -- failed (name conflict)
psql:sql/alter_generic.sql:155: ERROR:  language "alt_lang2" already exists
ALTER LANGUAGE alt_lang2 RENAME TO alt_lang3;   -- failed (not owner)
psql:sql/alter_generic.sql:156: ERROR:  must be owner of language alt_lang2
ALTER LANGUAGE alt_lang1 RENAME TO alt_lang3;   -- OK
ALTER LANGUAGE
ALTER LANGUAGE alt_lang2 OWNER TO regress_alter_generic_user3;  -- failed (not owner)
psql:sql/alter_generic.sql:159: ERROR:  must be owner of language alt_lang2
ALTER LANGUAGE alt_lang3 OWNER TO regress_alter_generic_user2;  -- failed (no role membership)
psql:sql/alter_generic.sql:160: ERROR:  must be member of role "regress_alter_generic_user2"
ALTER LANGUAGE alt_lang3 OWNER TO regress_alter_generic_user3;  -- OK
ALTER LANGUAGE
RESET SESSION AUTHORIZATION;
RESET
SELECT lanname, a.rolname
  FROM pg_language l, pg_authid a
  WHERE l.lanowner = a.oid AND l.lanname like 'alt_lang%'
  ORDER BY lanname;
  lanname  |           rolname           
-----------+-----------------------------
 alt_lang2 | regress_alter_generic_user2
 alt_lang3 | regress_alter_generic_user3
(2 rows)

--
-- Operator
--
SET SESSION AUTHORIZATION regress_alter_generic_user1;
SET
CREATE OPERATOR @-@ ( leftarg = int4, rightarg = int4, procedure = int4mi );
CREATE OPERATOR
CREATE OPERATOR @+@ ( leftarg = int4, rightarg = int4, procedure = int4pl );
CREATE OPERATOR
ALTER OPERATOR @+@(int4, int4) OWNER TO regress_alter_generic_user2;  -- failed (no role membership)
psql:sql/alter_generic.sql:177: ERROR:  must be member of role "regress_alter_generic_user2"
ALTER OPERATOR @+@(int4, int4) OWNER TO regress_alter_generic_user3;  -- OK
ALTER OPERATOR
ALTER OPERATOR @-@(int4, int4) SET SCHEMA alt_nsp2;           -- OK
ALTER OPERATOR
SET SESSION AUTHORIZATION regress_alter_generic_user2;
SET
CREATE OPERATOR @-@ ( leftarg = int4, rightarg = int4, procedure = int4mi );
CREATE OPERATOR
ALTER OPERATOR @+@(int4, int4) OWNER TO regress_alter_generic_user2;  -- failed (not owner)
psql:sql/alter_generic.sql:185: ERROR:  must be owner of operator @+@
ALTER OPERATOR @-@(int4, int4) OWNER TO regress_alter_generic_user3;  -- failed (no role membership)
psql:sql/alter_generic.sql:186: ERROR:  must be member of role "regress_alter_generic_user3"
ALTER OPERATOR @+@(int4, int4) SET SCHEMA alt_nsp2;   -- failed (not owner)
psql:sql/alter_generic.sql:187: ERROR:  must be owner of operator @+@
-- can't test this: the error message includes the raw oid of namespace
-- ALTER OPERATOR @-@(int4, int4) SET SCHEMA alt_nsp2;   -- failed (name conflict)
RESET SESSION AUTHORIZATION;
RESET
SELECT n.nspname, oprname, a.rolname,
    oprleft::regtype, oprright::regtype, oprcode::regproc
  FROM pg_operator o, pg_namespace n, pg_authid a
  WHERE o.oprnamespace = n.oid AND o.oprowner = a.oid
    AND n.nspname IN ('alt_nsp1', 'alt_nsp2')
  ORDER BY nspname, oprname;
 nspname  | oprname |           rolname           | oprleft | oprright | oprcode 
----------+---------+-----------------------------+---------+----------+---------
 alt_nsp1 | @+@     | regress_alter_generic_user3 | integer | integer  | int4pl
 alt_nsp1 | @-@     | regress_alter_generic_user2 | integer | integer  | int4mi
 alt_nsp2 | @-@     | regress_alter_generic_user1 | integer | integer  | int4mi
(3 rows)

--
-- OpFamily and OpClass
--
CREATE OPERATOR FAMILY alt_opf1 USING hash;
CREATE OPERATOR FAMILY
CREATE OPERATOR FAMILY alt_opf2 USING hash;
CREATE OPERATOR FAMILY
ALTER OPERATOR FAMILY alt_opf1 USING hash OWNER TO regress_alter_generic_user1;
ALTER OPERATOR FAMILY
ALTER OPERATOR FAMILY alt_opf2 USING hash OWNER TO regress_alter_generic_user1;
ALTER OPERATOR FAMILY
CREATE OPERATOR CLASS alt_opc1 FOR TYPE uuid USING hash AS STORAGE uuid;
CREATE OPERATOR CLASS
CREATE OPERATOR CLASS alt_opc2 FOR TYPE uuid USING hash AS STORAGE uuid;
CREATE OPERATOR CLASS
ALTER OPERATOR CLASS alt_opc1 USING hash OWNER TO regress_alter_generic_user1;
ALTER OPERATOR CLASS
ALTER OPERATOR CLASS alt_opc2 USING hash OWNER TO regress_alter_generic_user1;
ALTER OPERATOR CLASS
SET SESSION AUTHORIZATION regress_alter_generic_user1;
SET
ALTER OPERATOR FAMILY alt_opf1 USING hash RENAME TO alt_opf2;  -- failed (name conflict)
psql:sql/alter_generic.sql:215: ERROR:  operator family "alt_opf2" for access method "hash" already exists in schema "alt_nsp1"
ALTER OPERATOR FAMILY alt_opf1 USING hash RENAME TO alt_opf3;  -- OK
ALTER OPERATOR FAMILY
ALTER OPERATOR FAMILY alt_opf2 USING hash OWNER TO regress_alter_generic_user2;  -- failed (no role membership)
psql:sql/alter_generic.sql:217: ERROR:  must be member of role "regress_alter_generic_user2"
ALTER OPERATOR FAMILY alt_opf2 USING hash OWNER TO regress_alter_generic_user3;  -- OK
ALTER OPERATOR FAMILY
ALTER OPERATOR FAMILY alt_opf2 USING hash SET SCHEMA alt_nsp2;  -- OK
ALTER OPERATOR FAMILY
ALTER OPERATOR CLASS alt_opc1 USING hash RENAME TO alt_opc2;  -- failed (name conflict)
psql:sql/alter_generic.sql:221: ERROR:  operator class "alt_opc2" for access method "hash" already exists in schema "alt_nsp1"
ALTER OPERATOR CLASS alt_opc1 USING hash RENAME TO alt_opc3;  -- OK
ALTER OPERATOR CLASS
ALTER OPERATOR CLASS alt_opc2 USING hash OWNER TO regress_alter_generic_user2;  -- failed (no role membership)
psql:sql/alter_generic.sql:223: ERROR:  must be member of role "regress_alter_generic_user2"
ALTER OPERATOR CLASS alt_opc2 USING hash OWNER TO regress_alter_generic_user3;  -- OK
ALTER OPERATOR CLASS
ALTER OPERATOR CLASS alt_opc2 USING hash SET SCHEMA alt_nsp2;  -- OK
ALTER OPERATOR CLASS
RESET SESSION AUTHORIZATION;
RESET
CREATE OPERATOR FAMILY alt_opf1 USING hash;
CREATE OPERATOR FAMILY
CREATE OPERATOR FAMILY alt_opf2 USING hash;
CREATE OPERATOR FAMILY
ALTER OPERATOR FAMILY alt_opf1 USING hash OWNER TO regress_alter_generic_user2;
ALTER OPERATOR FAMILY
ALTER OPERATOR FAMILY alt_opf2 USING hash OWNER TO regress_alter_generic_user2;
ALTER OPERATOR FAMILY
CREATE OPERATOR CLASS alt_opc1 FOR TYPE macaddr USING hash AS STORAGE macaddr;
CREATE OPERATOR CLASS
CREATE OPERATOR CLASS alt_opc2 FOR TYPE macaddr USING hash AS STORAGE macaddr;
CREATE OPERATOR CLASS
ALTER OPERATOR CLASS alt_opc1 USING hash OWNER TO regress_alter_generic_user2;
ALTER OPERATOR CLASS
ALTER OPERATOR CLASS alt_opc2 USING hash OWNER TO regress_alter_generic_user2;
ALTER OPERATOR CLASS
SET SESSION AUTHORIZATION regress_alter_generic_user2;
SET
ALTER OPERATOR FAMILY alt_opf3 USING hash RENAME TO alt_opf4;	-- failed (not owner)
psql:sql/alter_generic.sql:241: ERROR:  must be owner of operator family alt_opf3
ALTER OPERATOR FAMILY alt_opf1 USING hash RENAME TO alt_opf4;  -- OK
ALTER OPERATOR FAMILY
ALTER OPERATOR FAMILY alt_opf3 USING hash OWNER TO regress_alter_generic_user2;  -- failed (not owner)
psql:sql/alter_generic.sql:243: ERROR:  must be owner of operator family alt_opf3
ALTER OPERATOR FAMILY alt_opf2 USING hash OWNER TO regress_alter_generic_user3;  -- failed (no role membership)
psql:sql/alter_generic.sql:244: ERROR:  must be member of role "regress_alter_generic_user3"
ALTER OPERATOR FAMILY alt_opf3 USING hash SET SCHEMA alt_nsp2;  -- failed (not owner)
psql:sql/alter_generic.sql:245: ERROR:  must be owner of operator family alt_opf3
ALTER OPERATOR FAMILY alt_opf2 USING hash SET SCHEMA alt_nsp2;  -- failed (name conflict)
psql:sql/alter_generic.sql:246: ERROR:  operator family "alt_opf2" for access method "hash" already exists in schema "alt_nsp2"
ALTER OPERATOR CLASS alt_opc3 USING hash RENAME TO alt_opc4;	-- failed (not owner)
psql:sql/alter_generic.sql:248: ERROR:  must be owner of operator class alt_opc3
ALTER OPERATOR CLASS alt_opc1 USING hash RENAME TO alt_opc4;  -- OK
ALTER OPERATOR CLASS
ALTER OPERATOR CLASS alt_opc3 USING hash OWNER TO regress_alter_generic_user2;  -- failed (not owner)
psql:sql/alter_generic.sql:250: ERROR:  must be owner of operator class alt_opc3
ALTER OPERATOR CLASS alt_opc2 USING hash OWNER TO regress_alter_generic_user3;  -- failed (no role membership)
psql:sql/alter_generic.sql:251: ERROR:  must be member of role "regress_alter_generic_user3"
ALTER OPERATOR CLASS alt_opc3 USING hash SET SCHEMA alt_nsp2;  -- failed (not owner)
psql:sql/alter_generic.sql:252: ERROR:  must be owner of operator class alt_opc3
ALTER OPERATOR CLASS alt_opc2 USING hash SET SCHEMA alt_nsp2;  -- failed (name conflict)
psql:sql/alter_generic.sql:253: ERROR:  operator class "alt_opc2" for access method "hash" already exists in schema "alt_nsp2"
RESET SESSION AUTHORIZATION;
RESET
SELECT nspname, opfname, amname, rolname
  FROM pg_opfamily o, pg_am m, pg_namespace n, pg_authid a
  WHERE o.opfmethod = m.oid AND o.opfnamespace = n.oid AND o.opfowner = a.oid
    AND n.nspname IN ('alt_nsp1', 'alt_nsp2')
	AND NOT opfname LIKE 'alt_opc%'
  ORDER BY nspname, opfname;
 nspname  | opfname  | amname |           rolname           
----------+----------+--------+-----------------------------
 alt_nsp1 | alt_opf2 | hash   | regress_alter_generic_user2
 alt_nsp1 | alt_opf3 | hash   | regress_alter_generic_user1
 alt_nsp1 | alt_opf4 | hash   | regress_alter_generic_user2
 alt_nsp2 | alt_opf2 | hash   | regress_alter_generic_user3
(4 rows)

SELECT nspname, opcname, amname, rolname
  FROM pg_opclass o, pg_am m, pg_namespace n, pg_authid a
  WHERE o.opcmethod = m.oid AND o.opcnamespace = n.oid AND o.opcowner = a.oid
    AND n.nspname IN ('alt_nsp1', 'alt_nsp2')
  ORDER BY nspname, opcname;
 nspname  | opcname  | amname |           rolname           
----------+----------+--------+-----------------------------
 alt_nsp1 | alt_opc2 | hash   | regress_alter_generic_user2
 alt_nsp1 | alt_opc3 | hash   | regress_alter_generic_user1
 alt_nsp1 | alt_opc4 | hash   | regress_alter_generic_user2
 alt_nsp2 | alt_opc2 | hash   | regress_alter_generic_user3
(4 rows)

-- ALTER OPERATOR FAMILY ... ADD/DROP
-- Should work. Textbook case of CREATE / ALTER ADD / ALTER DROP / DROP
BEGIN TRANSACTION;
BEGIN
CREATE OPERATOR FAMILY alt_opf4 USING btree;
CREATE OPERATOR FAMILY
ALTER OPERATOR FAMILY alt_opf4 USING btree ADD
  -- int4 vs int2
  OPERATOR 1 < (int4, int2) ,
  OPERATOR 2 <= (int4, int2) ,
  OPERATOR 3 = (int4, int2) ,
  OPERATOR 4 >= (int4, int2) ,
  OPERATOR 5 > (int4, int2) ,
  FUNCTION 1 btint42cmp(int4, int2);  
ALTER OPERATOR FAMILY
ALTER OPERATOR FAMILY alt_opf4 USING btree DROP
  -- int4 vs int2
  OPERATOR 1 (int4, int2) ,
  OPERATOR 2 (int4, int2) ,
  OPERATOR 3 (int4, int2) ,
  OPERATOR 4 (int4, int2) ,
  OPERATOR 5 (int4, int2) ,
  FUNCTION 1 (int4, int2) ;
ALTER OPERATOR FAMILY
DROP OPERATOR FAMILY alt_opf4 USING btree;
DROP OPERATOR FAMILY
ROLLBACK;
ROLLBACK
-- Should fail. Invalid values for ALTER OPERATOR FAMILY .. ADD / DROP
CREATE OPERATOR FAMILY alt_opf4 USING btree;
CREATE OPERATOR FAMILY
ALTER OPERATOR FAMILY alt_opf4 USING invalid_index_method ADD  OPERATOR 1 < (int4, int2); -- invalid indexing_method
psql:sql/alter_generic.sql:296: ERROR:  access method "invalid_index_method" does not exist
ALTER OPERATOR FAMILY alt_opf4 USING btree ADD OPERATOR 6 < (int4, int2); -- operator number should be between 1 and 5
psql:sql/alter_generic.sql:297: ERROR:  invalid operator number 6, must be between 1 and 5
ALTER OPERATOR FAMILY alt_opf4 USING btree ADD OPERATOR 0 < (int4, int2); -- operator number should be between 1 and 5
psql:sql/alter_generic.sql:298: ERROR:  invalid operator number 0, must be between 1 and 5
ALTER OPERATOR FAMILY alt_opf4 USING btree ADD OPERATOR 1 < ; -- operator without argument types
psql:sql/alter_generic.sql:299: ERROR:  operator argument types must be specified in ALTER OPERATOR FAMILY
ALTER OPERATOR FAMILY alt_opf4 USING btree ADD FUNCTION 0 btint42cmp(int4, int2); -- function number should be between 1 and 5
psql:sql/alter_generic.sql:300: ERROR:  invalid function number 0, must be between 1 and 3
ALTER OPERATOR FAMILY alt_opf4 USING btree ADD FUNCTION 6 btint42cmp(int4, int2); -- function number should be between 1 and 5
psql:sql/alter_generic.sql:301: ERROR:  invalid function number 6, must be between 1 and 3
ALTER OPERATOR FAMILY alt_opf4 USING btree ADD STORAGE invalid_storage; -- Ensure STORAGE is not a part of ALTER OPERATOR FAMILY
psql:sql/alter_generic.sql:302: ERROR:  STORAGE cannot be specified in ALTER OPERATOR FAMILY
DROP OPERATOR FAMILY alt_opf4 USING btree;
DROP OPERATOR FAMILY
-- Should fail. Need to be SUPERUSER to do ALTER OPERATOR FAMILY .. ADD / DROP
BEGIN TRANSACTION;
BEGIN
CREATE ROLE regress_alter_generic_user5 NOSUPERUSER;
CREATE ROLE
CREATE OPERATOR FAMILY alt_opf5 USING btree;
CREATE OPERATOR FAMILY
SET ROLE regress_alter_generic_user5;
SET
ALTER OPERATOR FAMILY alt_opf5 USING btree ADD OPERATOR 1 < (int4, int2), FUNCTION 1 btint42cmp(int4, int2);
psql:sql/alter_generic.sql:312: ERROR:  must be superuser to alter an operator family
RESET ROLE;
psql:sql/alter_generic.sql:313: ERROR:  current transaction is aborted, commands ignored until end of transaction block
DROP OPERATOR FAMILY alt_opf5 USING btree;
psql:sql/alter_generic.sql:314: ERROR:  current transaction is aborted, commands ignored until end of transaction block
ROLLBACK;
ROLLBACK
-- Should fail. Need rights to namespace for ALTER OPERATOR FAMILY .. ADD / DROP
CREATE SCHEMA alt_nsp6;
CREATE SCHEMA
BEGIN TRANSACTION;
BEGIN
CREATE ROLE regress_alter_generic_user6;
CREATE ROLE
REVOKE ALL ON SCHEMA alt_nsp6 FROM regress_alter_generic_user6;
REVOKE
CREATE OPERATOR FAMILY alt_nsp6.alt_opf6 USING btree;
CREATE OPERATOR FAMILY
SET ROLE regress_alter_generic_user6;
SET
ALTER OPERATOR FAMILY alt_nsp6.alt_opf6 USING btree ADD OPERATOR 1 < (int4, int2);
psql:sql/alter_generic.sql:324: ERROR:  permission denied for schema alt_nsp6
ROLLBACK;
ROLLBACK
DROP SCHEMA alt_nsp6;
DROP SCHEMA
-- Should fail. Only two arguments required for ALTER OPERATOR FAMILY ... DROP OPERATOR
CREATE OPERATOR FAMILY alt_opf7 USING btree;
CREATE OPERATOR FAMILY
ALTER OPERATOR FAMILY alt_opf7 USING btree ADD OPERATOR 1 < (int4, int2);
ALTER OPERATOR FAMILY
ALTER OPERATOR FAMILY alt_opf7 USING btree DROP OPERATOR 1 (int4, int2, int8);
psql:sql/alter_generic.sql:333: ERROR:  one or two argument types must be specified
DROP OPERATOR FAMILY alt_opf7 USING btree;
DROP OPERATOR FAMILY
-- Should work. During ALTER OPERATOR FAMILY ... DROP OPERATOR
-- when left type is the same as right type, a DROP with only one argument type should work
CREATE OPERATOR FAMILY alt_opf8 USING btree;
CREATE OPERATOR FAMILY
ALTER OPERATOR FAMILY alt_opf8 USING btree ADD OPERATOR 1 < (int4, int4);
ALTER OPERATOR FAMILY
DROP OPERATOR FAMILY alt_opf8 USING btree;
DROP OPERATOR FAMILY
-- Should work. Textbook case of ALTER OPERATOR FAMILY ... ADD OPERATOR with FOR ORDER BY
CREATE OPERATOR FAMILY alt_opf9 USING gist;
CREATE OPERATOR FAMILY
ALTER OPERATOR FAMILY alt_opf9 USING gist ADD OPERATOR 1 < (int4, int4) FOR ORDER BY float_ops;
ALTER OPERATOR FAMILY
DROP OPERATOR FAMILY alt_opf9 USING gist;
DROP OPERATOR FAMILY
-- Should fail. Ensure correct ordering methods in ALTER OPERATOR FAMILY ... ADD OPERATOR .. FOR ORDER BY
CREATE OPERATOR FAMILY alt_opf10 USING btree;
CREATE OPERATOR FAMILY
ALTER OPERATOR FAMILY alt_opf10 USING btree ADD OPERATOR 1 < (int4, int4) FOR ORDER BY float_ops;
psql:sql/alter_generic.sql:349: ERROR:  access method "btree" does not support ordering operators
DROP OPERATOR FAMILY alt_opf10 USING btree;
DROP OPERATOR FAMILY
-- Should work. Textbook case of ALTER OPERATOR FAMILY ... ADD OPERATOR with FOR ORDER BY
CREATE OPERATOR FAMILY alt_opf11 USING gist;
CREATE OPERATOR FAMILY
ALTER OPERATOR FAMILY alt_opf11 USING gist ADD OPERATOR 1 < (int4, int4) FOR ORDER BY float_ops;
ALTER OPERATOR FAMILY
ALTER OPERATOR FAMILY alt_opf11 USING gist DROP OPERATOR 1 (int4, int4);
ALTER OPERATOR FAMILY
DROP OPERATOR FAMILY alt_opf11 USING gist;
DROP OPERATOR FAMILY
-- Should fail. btree comparison functions should return INTEGER in ALTER OPERATOR FAMILY ... ADD FUNCTION
BEGIN TRANSACTION;
BEGIN
CREATE OPERATOR FAMILY alt_opf12 USING btree;
CREATE OPERATOR FAMILY
CREATE FUNCTION fn_opf12  (int4, int2) RETURNS BIGINT AS 'SELECT NULL::BIGINT;' LANGUAGE SQL;
CREATE FUNCTION
ALTER OPERATOR FAMILY alt_opf12 USING btree ADD FUNCTION 1 fn_opf12(int4, int2);
psql:sql/alter_generic.sql:364: ERROR:  btree comparison functions must return integer
DROP OPERATOR FAMILY alt_opf12 USING btree;
psql:sql/alter_generic.sql:365: ERROR:  current transaction is aborted, commands ignored until end of transaction block
ROLLBACK;
ROLLBACK
-- Should fail. hash comparison functions should return INTEGER in ALTER OPERATOR FAMILY ... ADD FUNCTION
BEGIN TRANSACTION;
BEGIN
CREATE OPERATOR FAMILY alt_opf13 USING hash;
CREATE OPERATOR FAMILY
CREATE FUNCTION fn_opf13  (int4) RETURNS BIGINT AS 'SELECT NULL::BIGINT;' LANGUAGE SQL;
CREATE FUNCTION
ALTER OPERATOR FAMILY alt_opf13 USING hash ADD FUNCTION 1 fn_opf13(int4);
psql:sql/alter_generic.sql:375: ERROR:  hash function 1 must return integer
DROP OPERATOR FAMILY alt_opf13 USING hash;
psql:sql/alter_generic.sql:376: ERROR:  current transaction is aborted, commands ignored until end of transaction block
ROLLBACK;
ROLLBACK
-- Should fail. btree comparison functions should have two arguments in ALTER OPERATOR FAMILY ... ADD FUNCTION
BEGIN TRANSACTION;
BEGIN
CREATE OPERATOR FAMILY alt_opf14 USING btree;
CREATE OPERATOR FAMILY
CREATE FUNCTION fn_opf14 (int4) RETURNS BIGINT AS 'SELECT NULL::BIGINT;' LANGUAGE SQL;
CREATE FUNCTION
ALTER OPERATOR FAMILY alt_opf14 USING btree ADD FUNCTION 1 fn_opf14(int4);
psql:sql/alter_generic.sql:383: ERROR:  btree comparison functions must have two arguments
DROP OPERATOR FAMILY alt_opf14 USING btree;
psql:sql/alter_generic.sql:384: ERROR:  current transaction is aborted, commands ignored until end of transaction block
ROLLBACK;
ROLLBACK
-- Should fail. hash comparison functions should have one argument in ALTER OPERATOR FAMILY ... ADD FUNCTION
BEGIN TRANSACTION;
BEGIN
CREATE OPERATOR FAMILY alt_opf15 USING hash;
CREATE OPERATOR FAMILY
CREATE FUNCTION fn_opf15 (int4, int2) RETURNS BIGINT AS 'SELECT NULL::BIGINT;' LANGUAGE SQL;
CREATE FUNCTION
ALTER OPERATOR FAMILY alt_opf15 USING hash ADD FUNCTION 1 fn_opf15(int4, int2);
psql:sql/alter_generic.sql:391: ERROR:  hash function 1 must have one argument
DROP OPERATOR FAMILY alt_opf15 USING hash;
psql:sql/alter_generic.sql:392: ERROR:  current transaction is aborted, commands ignored until end of transaction block
ROLLBACK;
ROLLBACK
-- Should fail. In gist throw an error when giving different data types for function argument
-- without defining left / right type in ALTER OPERATOR FAMILY ... ADD FUNCTION
CREATE OPERATOR FAMILY alt_opf16 USING gist;
CREATE OPERATOR FAMILY
ALTER OPERATOR FAMILY alt_opf16 USING gist ADD FUNCTION 1 btint42cmp(int4, int2);
psql:sql/alter_generic.sql:398: ERROR:  associated data types must be specified for index support function
DROP OPERATOR FAMILY alt_opf16 USING gist;
DROP OPERATOR FAMILY
-- Should fail. duplicate operator number / function number in ALTER OPERATOR FAMILY ... ADD FUNCTION
CREATE OPERATOR FAMILY alt_opf17 USING btree;
CREATE OPERATOR FAMILY
ALTER OPERATOR FAMILY alt_opf17 USING btree ADD OPERATOR 1 < (int4, int4), OPERATOR 1 < (int4, int4); -- operator # appears twice in same statement
psql:sql/alter_generic.sql:403: ERROR:  operator number 1 for (integer,integer) appears more than once
ALTER OPERATOR FAMILY alt_opf17 USING btree ADD OPERATOR 1 < (int4, int4); -- operator 1 requested first-time
ALTER OPERATOR FAMILY
ALTER OPERATOR FAMILY alt_opf17 USING btree ADD OPERATOR 1 < (int4, int4); -- operator 1 requested again in separate statement
psql:sql/alter_generic.sql:405: ERROR:  operator 1(integer,integer) already exists in operator family "alt_opf17"
ALTER OPERATOR FAMILY alt_opf17 USING btree ADD
  OPERATOR 1 < (int4, int2) ,
  OPERATOR 2 <= (int4, int2) ,
  OPERATOR 3 = (int4, int2) ,
  OPERATOR 4 >= (int4, int2) ,
  OPERATOR 5 > (int4, int2) ,
  FUNCTION 1 btint42cmp(int4, int2) ,
  FUNCTION 1 btint42cmp(int4, int2);    -- procedure 1 appears twice in same statement
psql:sql/alter_generic.sql:413: ERROR:  function number 1 for (integer,smallint) appears more than once
ALTER OPERATOR FAMILY alt_opf17 USING btree ADD
  OPERATOR 1 < (int4, int2) ,
  OPERATOR 2 <= (int4, int2) ,
  OPERATOR 3 = (int4, int2) ,
  OPERATOR 4 >= (int4, int2) ,
  OPERATOR 5 > (int4, int2) ,
  FUNCTION 1 btint42cmp(int4, int2);    -- procedure 1 appears first time
ALTER OPERATOR FAMILY
ALTER OPERATOR FAMILY alt_opf17 USING btree ADD
  OPERATOR 1 < (int4, int2) ,
  OPERATOR 2 <= (int4, int2) ,
  OPERATOR 3 = (int4, int2) ,
  OPERATOR 4 >= (int4, int2) ,
  OPERATOR 5 > (int4, int2) ,
  FUNCTION 1 btint42cmp(int4, int2);    -- procedure 1 requested again in separate statement
psql:sql/alter_generic.sql:427: ERROR:  operator 1(integer,smallint) already exists in operator family "alt_opf17"
DROP OPERATOR FAMILY alt_opf17 USING btree;
DROP OPERATOR FAMILY
-- Should fail. Ensure that DROP requests for missing OPERATOR / FUNCTIONS
-- return appropriate message in ALTER OPERATOR FAMILY ... DROP OPERATOR / FUNCTION
CREATE OPERATOR FAMILY alt_opf18 USING btree;
CREATE OPERATOR FAMILY
ALTER OPERATOR FAMILY alt_opf18 USING btree DROP OPERATOR 1 (int4, int4);
psql:sql/alter_generic.sql:434: ERROR:  operator 1(integer,integer) does not exist in operator family "alt_opf18"
ALTER OPERATOR FAMILY alt_opf18 USING btree ADD
  OPERATOR 1 < (int4, int2) ,
  OPERATOR 2 <= (int4, int2) ,
  OPERATOR 3 = (int4, int2) ,
  OPERATOR 4 >= (int4, int2) ,
  OPERATOR 5 > (int4, int2) ,
  FUNCTION 1 btint42cmp(int4, int2);
ALTER OPERATOR FAMILY
ALTER OPERATOR FAMILY alt_opf18 USING btree DROP FUNCTION 2 (int4, int4);
psql:sql/alter_generic.sql:442: ERROR:  function 2(integer,integer) does not exist in operator family "alt_opf18"
DROP OPERATOR FAMILY alt_opf18 USING btree;
DROP OPERATOR FAMILY
--
-- Text Search Dictionary
--
SET SESSION AUTHORIZATION regress_alter_generic_user1;
SET
CREATE TEXT SEARCH DICTIONARY alt_ts_dict1 (template=simple);
CREATE TEXT SEARCH DICTIONARY
CREATE TEXT SEARCH DICTIONARY alt_ts_dict2 (template=simple);
CREATE TEXT SEARCH DICTIONARY
ALTER TEXT SEARCH DICTIONARY alt_ts_dict1 RENAME TO alt_ts_dict2;  -- failed (name conflict)
psql:sql/alter_generic.sql:453: ERROR:  text search dictionary "alt_ts_dict2" already exists in schema "alt_nsp1"
ALTER TEXT SEARCH DICTIONARY alt_ts_dict1 RENAME TO alt_ts_dict3;  -- OK
ALTER TEXT SEARCH DICTIONARY
ALTER TEXT SEARCH DICTIONARY alt_ts_dict2 OWNER TO regress_alter_generic_user2;  -- failed (no role membership)
psql:sql/alter_generic.sql:455: ERROR:  must be member of role "regress_alter_generic_user2"
ALTER TEXT SEARCH DICTIONARY alt_ts_dict2 OWNER TO regress_alter_generic_user3;  -- OK
ALTER TEXT SEARCH DICTIONARY
ALTER TEXT SEARCH DICTIONARY alt_ts_dict2 SET SCHEMA alt_nsp2;  -- OK
ALTER TEXT SEARCH DICTIONARY
SET SESSION AUTHORIZATION regress_alter_generic_user2;
SET
CREATE TEXT SEARCH DICTIONARY alt_ts_dict1 (template=simple);
CREATE TEXT SEARCH DICTIONARY
CREATE TEXT SEARCH DICTIONARY alt_ts_dict2 (template=simple);
CREATE TEXT SEARCH DICTIONARY
ALTER TEXT SEARCH DICTIONARY alt_ts_dict3 RENAME TO alt_ts_dict4;  -- failed (not owner)
psql:sql/alter_generic.sql:463: ERROR:  must be owner of text search dictionary alt_ts_dict3
ALTER TEXT SEARCH DICTIONARY alt_ts_dict1 RENAME TO alt_ts_dict4;  -- OK
ALTER TEXT SEARCH DICTIONARY
ALTER TEXT SEARCH DICTIONARY alt_ts_dict3 OWNER TO regress_alter_generic_user2;  -- failed (not owner)
psql:sql/alter_generic.sql:465: ERROR:  must be owner of text search dictionary alt_ts_dict3
ALTER TEXT SEARCH DICTIONARY alt_ts_dict2 OWNER TO regress_alter_generic_user3;  -- failed (no role membership)
psql:sql/alter_generic.sql:466: ERROR:  must be member of role "regress_alter_generic_user3"
ALTER TEXT SEARCH DICTIONARY alt_ts_dict3 SET SCHEMA alt_nsp2;  -- failed (not owner)
psql:sql/alter_generic.sql:467: ERROR:  must be owner of text search dictionary alt_ts_dict3
ALTER TEXT SEARCH DICTIONARY alt_ts_dict2 SET SCHEMA alt_nsp2;  -- failed (name conflict)
psql:sql/alter_generic.sql:468: ERROR:  text search dictionary "alt_ts_dict2" already exists in schema "alt_nsp2"
RESET SESSION AUTHORIZATION;
RESET
SELECT nspname, dictname, rolname
  FROM pg_ts_dict t, pg_namespace n, pg_authid a
  WHERE t.dictnamespace = n.oid AND t.dictowner = a.oid
    AND n.nspname in ('alt_nsp1', 'alt_nsp2')
  ORDER BY nspname, dictname;
 nspname  |   dictname   |           rolname           
----------+--------------+-----------------------------
 alt_nsp1 | alt_ts_dict2 | regress_alter_generic_user2
 alt_nsp1 | alt_ts_dict3 | regress_alter_generic_user1
 alt_nsp1 | alt_ts_dict4 | regress_alter_generic_user2
 alt_nsp2 | alt_ts_dict2 | regress_alter_generic_user3
(4 rows)

--
-- Text Search Configuration
--
SET SESSION AUTHORIZATION regress_alter_generic_user1;
SET
CREATE TEXT SEARCH CONFIGURATION alt_ts_conf1 (copy=english);
CREATE TEXT SEARCH CONFIGURATION
CREATE TEXT SEARCH CONFIGURATION alt_ts_conf2 (copy=english);
CREATE TEXT SEARCH CONFIGURATION
ALTER TEXT SEARCH CONFIGURATION alt_ts_conf1 RENAME TO alt_ts_conf2;  -- failed (name conflict)
psql:sql/alter_generic.sql:485: ERROR:  text search configuration "alt_ts_conf2" already exists in schema "alt_nsp1"
ALTER TEXT SEARCH CONFIGURATION alt_ts_conf1 RENAME TO alt_ts_conf3;  -- OK
ALTER TEXT SEARCH CONFIGURATION
ALTER TEXT SEARCH CONFIGURATION alt_ts_conf2 OWNER TO regress_alter_generic_user2;  -- failed (no role membership)
psql:sql/alter_generic.sql:487: ERROR:  must be member of role "regress_alter_generic_user2"
ALTER TEXT SEARCH CONFIGURATION alt_ts_conf2 OWNER TO regress_alter_generic_user3;  -- OK
ALTER TEXT SEARCH CONFIGURATION
ALTER TEXT SEARCH CONFIGURATION alt_ts_conf2 SET SCHEMA alt_nsp2;  -- OK
ALTER TEXT SEARCH CONFIGURATION
SET SESSION AUTHORIZATION regress_alter_generic_user2;
SET
CREATE TEXT SEARCH CONFIGURATION alt_ts_conf1 (copy=english);
CREATE TEXT SEARCH CONFIGURATION
CREATE TEXT SEARCH CONFIGURATION alt_ts_conf2 (copy=english);
CREATE TEXT SEARCH CONFIGURATION
ALTER TEXT SEARCH CONFIGURATION alt_ts_conf3 RENAME TO alt_ts_conf4;  -- failed (not owner)
psql:sql/alter_generic.sql:495: ERROR:  must be owner of text search configuration alt_ts_conf3
ALTER TEXT SEARCH CONFIGURATION alt_ts_conf1 RENAME TO alt_ts_conf4;  -- OK
ALTER TEXT SEARCH CONFIGURATION
ALTER TEXT SEARCH CONFIGURATION alt_ts_conf3 OWNER TO regress_alter_generic_user2;  -- failed (not owner)
psql:sql/alter_generic.sql:497: ERROR:  must be owner of text search configuration alt_ts_conf3
ALTER TEXT SEARCH CONFIGURATION alt_ts_conf2 OWNER TO regress_alter_generic_user3;  -- failed (no role membership)
psql:sql/alter_generic.sql:498: ERROR:  must be member of role "regress_alter_generic_user3"
ALTER TEXT SEARCH CONFIGURATION alt_ts_conf3 SET SCHEMA alt_nsp2;  -- failed (not owner)
psql:sql/alter_generic.sql:499: ERROR:  must be owner of text search configuration alt_ts_conf3
ALTER TEXT SEARCH CONFIGURATION alt_ts_conf2 SET SCHEMA alt_nsp2;  -- failed (name conflict)
psql:sql/alter_generic.sql:500: ERROR:  text search configuration "alt_ts_conf2" already exists in schema "alt_nsp2"
RESET SESSION AUTHORIZATION;
RESET
SELECT nspname, cfgname, rolname
  FROM pg_ts_config t, pg_namespace n, pg_authid a
  WHERE t.cfgnamespace = n.oid AND t.cfgowner = a.oid
    AND n.nspname in ('alt_nsp1', 'alt_nsp2')
  ORDER BY nspname, cfgname;
 nspname  |   cfgname    |           rolname           
----------+--------------+-----------------------------
 alt_nsp1 | alt_ts_conf2 | regress_alter_generic_user2
 alt_nsp1 | alt_ts_conf3 | regress_alter_generic_user1
 alt_nsp1 | alt_ts_conf4 | regress_alter_generic_user2
 alt_nsp2 | alt_ts_conf2 | regress_alter_generic_user3
(4 rows)

--
-- Text Search Template
--
CREATE TEXT SEARCH TEMPLATE alt_ts_temp1 (lexize=dsimple_lexize);
CREATE TEXT SEARCH TEMPLATE
CREATE TEXT SEARCH TEMPLATE alt_ts_temp2 (lexize=dsimple_lexize);
CREATE TEXT SEARCH TEMPLATE
ALTER TEXT SEARCH TEMPLATE alt_ts_temp1 RENAME TO alt_ts_temp2; -- failed (name conflict)
psql:sql/alter_generic.sql:516: ERROR:  text search template "alt_ts_temp2" already exists in schema "alt_nsp1"
ALTER TEXT SEARCH TEMPLATE alt_ts_temp1 RENAME TO alt_ts_temp3; -- OK
ALTER TEXT SEARCH TEMPLATE
ALTER TEXT SEARCH TEMPLATE alt_ts_temp2 SET SCHEMA alt_nsp2;    -- OK
ALTER TEXT SEARCH TEMPLATE
CREATE TEXT SEARCH TEMPLATE alt_ts_temp2 (lexize=dsimple_lexize);
CREATE TEXT SEARCH TEMPLATE
ALTER TEXT SEARCH TEMPLATE alt_ts_temp2 SET SCHEMA alt_nsp2;    -- failed (name conflict)
psql:sql/alter_generic.sql:521: ERROR:  text search template "alt_ts_temp2" already exists in schema "alt_nsp2"
-- invalid: non-lowercase quoted identifiers
CREATE TEXT SEARCH TEMPLATE tstemp_case ("Init" = init_function);
psql:sql/alter_generic.sql:524: ERROR:  text search template parameter "Init" not recognized
SELECT nspname, tmplname
  FROM pg_ts_template t, pg_namespace n
  WHERE t.tmplnamespace = n.oid AND nspname like 'alt_nsp%'
  ORDER BY nspname, tmplname;
 nspname  |   tmplname   
----------+--------------
 alt_nsp1 | alt_ts_temp2
 alt_nsp1 | alt_ts_temp3
 alt_nsp2 | alt_ts_temp2
(3 rows)

--
-- Text Search Parser
--
CREATE TEXT SEARCH PARSER alt_ts_prs1
    (start = prsd_start, gettoken = prsd_nexttoken, end = prsd_end, lextypes = prsd_lextype);
CREATE TEXT SEARCH PARSER
CREATE TEXT SEARCH PARSER alt_ts_prs2
    (start = prsd_start, gettoken = prsd_nexttoken, end = prsd_end, lextypes = prsd_lextype);
CREATE TEXT SEARCH PARSER
ALTER TEXT SEARCH PARSER alt_ts_prs1 RENAME TO alt_ts_prs2; -- failed (name conflict)
psql:sql/alter_generic.sql:540: ERROR:  text search parser "alt_ts_prs2" already exists in schema "alt_nsp1"
ALTER TEXT SEARCH PARSER alt_ts_prs1 RENAME TO alt_ts_prs3; -- OK
ALTER TEXT SEARCH PARSER
ALTER TEXT SEARCH PARSER alt_ts_prs2 SET SCHEMA alt_nsp2;   -- OK
ALTER TEXT SEARCH PARSER
CREATE TEXT SEARCH PARSER alt_ts_prs2
    (start = prsd_start, gettoken = prsd_nexttoken, end = prsd_end, lextypes = prsd_lextype);
CREATE TEXT SEARCH PARSER
ALTER TEXT SEARCH PARSER alt_ts_prs2 SET SCHEMA alt_nsp2;   -- failed (name conflict)
psql:sql/alter_generic.sql:546: ERROR:  text search parser "alt_ts_prs2" already exists in schema "alt_nsp2"
-- invalid: non-lowercase quoted identifiers
CREATE TEXT SEARCH PARSER tspars_case ("Start" = start_function);
psql:sql/alter_generic.sql:549: ERROR:  text search parser parameter "Start" not recognized
SELECT nspname, prsname
  FROM pg_ts_parser t, pg_namespace n
  WHERE t.prsnamespace = n.oid AND nspname like 'alt_nsp%'
  ORDER BY nspname, prsname;
 nspname  |   prsname   
----------+-------------
 alt_nsp1 | alt_ts_prs2
 alt_nsp1 | alt_ts_prs3
 alt_nsp2 | alt_ts_prs2
(3 rows)

---
--- Cleanup resources
---
\set VERBOSITY terse \\ -- suppress cascade details
DROP FOREIGN DATA WRAPPER alt_fdw2 CASCADE;
psql:sql/alter_generic.sql:561: NOTICE:  drop cascades to server alt_fserv2
DROP FOREIGN DATA WRAPPER
DROP FOREIGN DATA WRAPPER alt_fdw3 CASCADE;
psql:sql/alter_generic.sql:562: NOTICE:  drop cascades to server alt_fserv3
DROP FOREIGN DATA WRAPPER
DROP LANGUAGE alt_lang2 CASCADE;
DROP LANGUAGE
DROP LANGUAGE alt_lang3 CASCADE;
DROP LANGUAGE
DROP SCHEMA alt_nsp1 CASCADE;
psql:sql/alter_generic.sql:567: NOTICE:  drop cascades to 26 other objects
DROP SCHEMA
DROP SCHEMA alt_nsp2 CASCADE;
psql:sql/alter_generic.sql:568: NOTICE:  drop cascades to 9 other objects
DROP SCHEMA
DROP USER regress_alter_generic_user1;
DROP ROLE
DROP USER regress_alter_generic_user2;
DROP ROLE
DROP USER regress_alter_generic_user3;
DROP ROLE
