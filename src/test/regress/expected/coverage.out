-- sharding/sharding_stmt_utils.c
drop table if exists test;
psql:sql/coverage.sql:2: NOTICE:  table "test" does not exist, skipping
DROP TABLE
create table test(
    f1 int2,
    f2 int4,
    f3 int8,
    f4 float4,
    f5 float8,
    f6 numeric,
    f7 bool,
    f8 text,
    f9 time,
    f10 timestamp,
    f11 bytea
);
CREATE TABLE
INSERT INTO
    test
VALUES
    (
        0x7fff,
        0x7fffffff,
        0x7fffffffffffffff,
        3.40282346638528860e+38,
        1.79769313486231470e+308,
        1234567890123456789012345678901234567890.12345678901234567890,
        true,
        repeat('x', 32 * 1024),
        '10:01:01',
        '2023-1-14 10:01:01',
        repeat('x', 32 * 1024)::bytea
    );
INSERT 0 1
INSERT INTO
    test
VALUES
    (
        - 0x8000,
        - 0x80000000,
        - 0x8000000000000000,
        1.40129846432481707e-45,
        4.94065645841246544e-324,
        1234567890123456789012345678901234567890.12345678901234567890,
        false,
        repeat('x', 32 * 1024),
        '10:01:01',
        '2023-1-14 10:01:01',
        repeat('x', 32 * 1024)::bytea
    );
INSERT 0 1
BEGIN;
BEGIN
SET force_remote_sql_parameterize = true;
SET
SET enable_shard_binary_protocol = true;
SET
SELECT f1 FROM test WHERE f1 = 0x7fff OR f1 = -0x8000;
   f1   
--------
  32767
 -32768
(2 rows)

SELECT f2 FROM test WHERE f2 = 0x7fffffff OR f2 = -0x80000000;
     f2      
-------------
  2147483647
 -2147483648
(2 rows)

SELECT f4 FROM test WHERE f4 = (3.40282346638528860e+38) OR f3 = (1.40129846432481707e-45); -- 浮点数不准 
 f4 
----
(0 rows)

SELECT f5 FROM test WHERE f5 = (1.79769313486231470e+308) OR f4 = (4.94065645841246544e-324); -- 浮点数不准
          f5           
-----------------------
 1.79769313486231e+308
(1 row)

SELECT f6 FROM test WHERE f6 = 1234567890123456789012345678901234567890.12345678901234567890;
                              f6                               
---------------------------------------------------------------
 1234567890123456789012345678901234567890.12345678901234567890
 1234567890123456789012345678901234567890.12345678901234567890
(2 rows)

SELECT f7 FROM test WHERE f7 = true;
 f7 
----
 t
(1 row)

--SELECT f8 FROM test WHERE f8 = repeat('x', 32 * 1024);
SELECT f9 FROM test WHERE f9 = '10:01:01';
    f9    
----------
 10:01:01
 10:01:01
(2 rows)

SELECT f10 FROM test WHERE f10 = '2023-1-14 10:01:01';
         f10         
---------------------
 2023-01-14 10:01:01
 2023-01-14 10:01:01
(2 rows)

rollback;
ROLLBACK
-- 生成超过100条不同的sql（默认缓存100条PREPARED的不同的SQL，超过就会触发PREPARE的语句的回收）
DO $$
BEGIN
    for i in 1..120 loop
    execute concat('select f1', repeat('+(f1-f1)', i), ' from test where f1=0x7fff');
    end loop;
    
    for i in 1..120 loop
    execute concat('select f1', repeat('-(f1-f1)', i), ' from test where f2=0x7fff');
    end loop;
END;
$$;
DO
-- 模拟连接断开, 使得prepare的语句被回收
DO $$
BEGIN
    execute concat('send ', (select name from pg_shard order by id limit 1), '''kill connection (select connection_id())''');
END; $$;
psql:sql/coverage.sql:83: ERROR:  Kunlun-db: MySQL storage node (1, 1) returned error: 1317, Query execution was interrupted.
CONTEXT:  SQL statement "send shard1'kill connection (select connection_id())'"
PL/pgSQL function inline_code_block line 3 at EXECUTE
-- 
DO $$
BEGIN
    for i in 1..120 loop
    execute concat('select f1', repeat('+(f1-f1)', i), ' from test where f1=0x7fff');
    end loop;
    
    for i in 1..120 loop
    execute concat('select f1', repeat('-(f1-f1)', i), ' from test where f2=0x7fff');
    end loop;
END;
$$;
DO
-- sharding/sharding_conn.c
drop table if exists test;
DROP TABLE
create table test(a int, b int);
CREATE TABLE
INSERT INTO test VALUES(1,1);
INSERT 0 1
create or replace function recursive_func(level int) returns int as $$
DECLARE result integer;
BEGIN
    if level = 0 then
        return level;
    end if;
    select sum(recursive_func(level - 1) + 1) from test INTO result;
    return result;
END
$$ language plpgsql;
CREATE FUNCTION
-- 递归调用
SELECT recursive_func(500) from test;
 recursive_func 
----------------
            500
(1 row)

drop table if exists test;
DROP TABLE
create table test(a int, b int);
CREATE TABLE
insert into test values(1,1), (2,2), (3,3);
INSERT 0 3
create or replace function return_unnamed_refcursor() returns refcursor as $$
declare
    rc refcursor;
begin
    -- open rc for select a from generate_series(1,3) s(a);
    open rc for select a from test;
    return rc;
end
$$ language plpgsql;
CREATE FUNCTION
-- 测试创建多个未的用户cursor(pg本身也存在bug，内存会蹭蹭往上涨)
create or replace function massive_cursors() returns int as $$
DECLARE
    cursors refcursor[] default '{}';
    rc refcursor;
    foo integer;
    cnt integer default 0;
BEGIN
    for i in 1..100000 LOOP
    BEGIN
        rc = return_unnamed_refcursor();
        fetch next from rc into foo;
        cursors = array_append(cursors, rc);
    END;
    END LOOP;

    for i in 1..100000 loop
    begin
        rc = cursors[i];
        fetch next from rc into foo;
        close rc;
    end;
    end loop;
    return 1;
END
$$ language plpgsql;
CREATE FUNCTION
create or replace function exec_storage_sql(sql text) returns void
as $$
DECLARE
    rc refcursor;
    shard name;
BEGIN
    -- 设置mysql连接在空闲1s之后自动断开
    open rc for execute 'select name from pg_shard';
    fetch next from rc into shard;
    while found loop
        execute concat('send ', shard, '''', sql, '''');
        fetch next from rc into shard;
    end loop;
END; 
$$ language plpgsql;
CREATE FUNCTION
-- 执行过程中连接断开
BEGIN;
BEGIN
	 
set enable_parallel_remotescan = false;
SET
   
set enable_parallel_append = false;
SET
   
select exec_storage_sql('set wait_timeout=1');
 exec_storage_sql 
------------------
 
(1 row)

												
				  
				  
 
	   
select * from test where pg_sleep(2) is null union all select * from test where pg_sleep(2) is null;
psql:sql/coverage.sql:190: ERROR:  Kunlun-db: Connection with MySQL storage node (1, 1) is gone: 2013, Lost connection to server during query. Resend the statement.
DETAIL:  Disconnected all connections to MySQL storage nodes.
																																									  
															 
rollback;
ROLLBACK
-- 使用cursor与存储节点进行交互，测试cursor交替使用
drop table if exists t1;
psql:sql/coverage.sql:196: NOTICE:  table "t1" does not exist, skipping
DROP TABLE
drop table if exists t2;
DROP TABLE
create table t1(a int, b int);
CREATE TABLE
create table t2(a int, b int);
CREATE TABLE
insert into t1 select i,i from generate_series(1,100) as s(i);
INSERT 0 100
insert into t2 select i,i from generate_series(1,100) as s(i);
INSERT 0 100
ANALYZE t1, t2;
ANALYZE
BEGIN;
BEGIN
SET force_remote_sql_parameterize = true;
SET
SET enable_shard_binary_protocol = true;
SET
SET enable_parallel_remotescan = false;
SET
SET enable_hashjoin = off;
SET
set enable_nestloop= on;
SET
set enable_mergejoin = off;
SET
set enable_material = off;
SET
set enable_remote_join_pushdown = off;
SET
set enable_remote_cursor = on;
SET
set remote_cursor_prefetch_rows = 10;
SET
select count(1) from t1, t2 where t1.a=t2.a;
 count 
-------
   100
(1 row)

select * From t1, t2 where t1.a=t2.a limit 4;
 a | b | a | b 
---+---+---+---
 1 | 1 | 1 | 1
 2 | 2 | 2 | 2
 3 | 3 | 3 | 3
 4 | 4 | 4 | 4
(4 rows)

-- 切换成非cursor模式(验证存储节点是否修复了bug？)
set enable_remote_cursor = off;
SET
select * From t1, t2 where t1.a=t2.a limit 4;
 a | b | a | b 
---+---+---+---
 1 | 1 | 1 | 1
 2 | 2 | 2 | 2
 3 | 3 | 3 | 3
 4 | 4 | 4 | 4
(4 rows)

-- 执行过程中连接断开
set enable_remote_cursor = on;
SET
select * from t1, t2 where t1.a=t2.a and exec_storage_sql('kill connection (select connection_id())') is null;
psql:sql/coverage.sql:221: ERROR:  Kunlun-db: MySQL storage node (1, 1) returned error: 1317, Query execution was interrupted.
CONTEXT:  SQL statement "send shard1'kill connection (select connection_id())'"
PL/pgSQL function exec_storage_sql(text) line 10 at EXECUTE
rollback;
psql:sql/coverage.sql:222: ERROR:  Kunlun-db: Connection with MySQL storage node (1, 1) is gone: 2013, Lost connection to server during query. Resend the statement.
DETAIL:  Disconnected all connections to MySQL storage nodes.
-- 向存储节点发起prepare时出错
drop table if exists t3;
DROP TABLE
create table t3(a int, b int);
CREATE TABLE
select exec_storage_sql(concat('drop table if exists `', database(), '_$$_', current_schema(), '`.t3'));
 exec_storage_sql 
------------------
 
(1 row)

begin;
BEGIN
set force_remote_sql_parameterize = true;
SET
set enable_shard_binary_protocol = true;
SET
select * From t3;
psql:sql/coverage.sql:231: WARNING:  MySQL storage node (1, 1) returned error: 1146, Table 'regress_$$_public.t3' doesn't exist, and it's taken as a WARNING.
psql:sql/coverage.sql:231: INFO:  The storage node complains the table does not exist. It is possible that the table is being migrated. wait 1 seconds and try again.
psql:sql/coverage.sql:231: WARNING:  MySQL storage node (1, 1) returned error: 1146, Table 'regress_$$_public.t3' doesn't exist, and it's taken as a WARNING.
psql:sql/coverage.sql:231: INFO:  The storage node complains the table does not exist. It is possible that the table is being migrated. wait 1 seconds and try again.
psql:sql/coverage.sql:231: WARNING:  MySQL storage node (1, 1) returned error: 1146, Table 'regress_$$_public.t3' doesn't exist, and it's taken as a WARNING.
psql:sql/coverage.sql:231: INFO:  The storage node complains the table does not exist. It is possible that the table is being migrated. wait 1 seconds and try again.
psql:sql/coverage.sql:231: WARNING:  MySQL storage node (1, 1) returned error: 1146, Table 'regress_$$_public.t3' doesn't exist, and it's taken as a WARNING.
psql:sql/coverage.sql:231: INFO:  The storage node complains the table does not exist. It is possible that the table is being migrated. wait 1 seconds and try again.
psql:sql/coverage.sql:231: WARNING:  MySQL storage node (1, 1) returned error: 1146, Table 'regress_$$_public.t3' doesn't exist, and it's taken as a WARNING.
psql:sql/coverage.sql:231: INFO:  The storage node complains the table does not exist. It is possible that the table is being migrated. wait 1 seconds and try again.
psql:sql/coverage.sql:231: WARNING:  MySQL storage node (1, 1) returned error: 1146, Table 'regress_$$_public.t3' doesn't exist, and it's taken as a WARNING.
psql:sql/coverage.sql:231: INFO:  The storage node complains the table does not exist. It is possible that the table is being migrated. wait 1 seconds and try again.
psql:sql/coverage.sql:231: WARNING:  MySQL storage node (1, 1) returned error: 1146, Table 'regress_$$_public.t3' doesn't exist, and it's taken as a WARNING.
psql:sql/coverage.sql:231: INFO:  The storage node complains the table does not exist. It is possible that the table is being migrated. wait 1 seconds and try again.
psql:sql/coverage.sql:231: WARNING:  MySQL storage node (1, 1) returned error: 1146, Table 'regress_$$_public.t3' doesn't exist, and it's taken as a WARNING.
psql:sql/coverage.sql:231: INFO:  The storage node complains the table does not exist. It is possible that the table is being migrated. wait 1 seconds and try again.
psql:sql/coverage.sql:231: ERROR:  Kunlun-db: MySQL storage node (1, 1) returned error: 1146, Table 'regress_$$_public.t3' doesn't exist.
rollback;
ROLLBACK
-- db返回一部分数据之后，报错
drop table if exists t1;
DROP TABLE
create table t1(a int primary key, b int);
CREATE TABLE
insert into t1 select i, i from generate_series(1,10000) s(i);
INSERT 0 10000
begin;
BEGIN
set force_remote_sql_parameterize = true;
SET
set enable_shard_binary_protocol = true;
SET
select a, power(1.09, b) from t1 order by a; -- 当a过大时，存储节点上power函数会报错
psql:sql/coverage.sql:241: ERROR:  Kunlun-db: MySQL storage node (1, 1) returned error: 1690, DOUBLE value is out of range in 'pow(?,cast(`regress_$$_public`.`t1`.`b` as decimal(10,0)))'.
rollback;
ROLLBACK
-- 更新分区表+returning（测试对同一个连接的争强和调度）
set sharding_policy = 3; -- 总是选择第一个shard作为表的持久化节点
SET
drop table if exists t1;
DROP TABLE
create table t1(a int, b int) partition by range(a);
CREATE TABLE
create table t1p1 partition of t1 for values from (0) to (1000);
CREATE TABLE
create table t1p2 partition of t1 for values from (1000) to (2000);
CREATE TABLE
insert into t1 select i,i from generate_series(1, 1999) s(i);
INSERT 0 1999
drop table if exists t2;
DROP TABLE
create table t2(like t1);
CREATE TABLE
insert into t2 select * from t1;
INSERT 0 1999
explain ANALYZE with s as (update t1 set b=b+1 returning *) select * From t2 where a not in (select a from s);

-- 触发大字段的物化
set sharding_policy = 3;
SET
drop table if exists t1;
DROP TABLE
create table t1(a int);
CREATE TABLE
insert into t1 select i from generate_series(1,100) s(i);
INSERT 0 100
begin;
BEGIN
set enable_hashjoin = off;
SET
set enable_mergejoin = off;
SET
set enable_parallel_remotescan = off;
SET
EXPLAIN ANALYZE SELECT *
FROM (
	SELECT a, repeat('x', t1.a * 100)
	FROM t1
	ORDER BY a DESC
	LIMIT 10
) tmp
WHERE a IN (
	SELECT a
	FROM t1
	ORDER BY a DESC
	LIMIT 10
);

rollback;
ROLLBACK
-- sharding/global_txid.c
drop table if exists t1, t2;
DROP TABLE
create table t1(a int, b int) with(shard=1);
CREATE TABLE
create table t2(a int, b int) with(shard=1);
CREATE TABLE
set session_debug = '+d,inject_reserve_global_txids_failure,force_reload_reserved_global_txid';
SET
BEGIN;
BEGIN
insert into t1 values(1,1);
psql:sql/coverage.sql:288: ERROR:  could not open global txid file 'global/global_txid.dat'
insert into t2 values(2,2);
psql:sql/coverage.sql:289: ERROR:  current transaction is aborted, commands ignored until end of transaction block
rollback;
ROLLBACK
set session_debug = '-d,inject_reserve_global_txids_failure,force_reload_reserved_global_txid';
SET
-- executor/nodeRemotePlan.c
-- 并行查询
drop table if exists t1;
DROP TABLE
create table t1(a int, b int);
CREATE TABLE
create index on t1(a);
CREATE INDEX
create index on t1(b);
CREATE INDEX
insert into t1 select i,i%10 from generate_series(1,10000) s(i);
INSERT 0 10000
ANALYZE t1(a, b);
ANALYZE
 -- analyze的结果会先写入ddl log，然后再被计算节点拉下来存放到本地系统表，因此需要等待几秒
select pg_sleep(2);
 pg_sleep 
----------
 
(1 row)

--select * From pg_statistic where starelid = (select oid from pg_class where relname = 't1');
BEGIN;
BEGIN
set min_parallel_index_scan_size = '1B';
SET
set min_parallel_table_scan_size = '1B';
SET
set enable_parallel_remotescan = true;
SET
set parallel_setup_cost=0;
SET
set parallel_tuple_cost =0;
SET
-- text protocal
set force_remote_sql_parameterize = 0;
SET
-- 使用等宽直方图对扫描范围进行切分
explain (costs off) select count(a) from t1;

select count(a) from t1;
 count 
-------
 10000
(1 row)

-- 使用mcv直方图对扫描范围进行切分
explain (costs off) select count(b) from t1;

select count(b) from t1;
 count 
-------
 10000
(1 row)

-- 使用in表达式对扫描范围进行切分
explain (costs off) select count(b) from t1 where b in (1,4,5,7,9);

select count(b) from t1 where b in (1,4,5,7,9);
 count 
-------
  5000
(1 row)

-- binary protocal
set force_remote_sql_parameterize = 1;
SET
set enable_shard_binary_protocol = 1;
SET
explain (costs off) select count(1) from t1;

select count(1) from t1;
 count 
-------
 10000
(1 row)

-- 关闭聚合下推
set enable_remote_agg_pushdown = off;
SET
explain (costs off) select count(1) from t1;

select count(1) from t1;
 count 
-------
 10000
(1 row)

rollback;
ROLLBACK
-- MIRROR表的测试
drop table if exists t1;
DROP TABLE
drop table if exists t2;
DROP TABLE
drop table if exists t3;
DROP TABLE
create table t1(a int, b int) with(shard=1all);
CREATE TABLE
create table t2(a int, b int) with(shard=1);
CREATE TABLE
create table t3(a int, b int) with(shard=1);
CREATE TABLE
INSERT into t1 select i,i from generate_series(1,10) s(i);
INSERT 0 10
INSERT into t2 select i,i from generate_series(1,10) s(i);
INSERT 0 10
INSERT into t3 select i,i from generate_series(1,10) s(i);
INSERT 0 10
BEGIN;
BEGIN
set enable_remote_join_pushdown = true;
SET
SELECT count(1) from t1; -- 随机发送给给某个shard
 count 
-------
    10
(1 row)

explain select count(1) from t1, t2 where t1.a=t2.a; -- 确保能够下推

select count(1) from t1, t2 where t1.a=t2.a;
 count 
-------
    10
(1 row)

explain select count(1) from t1, t3 where t1.a=t3.a; -- 确保能够下推

select count(1) from t1, t3 where t1.a=t3.a;
 count 
-------
    10
(1 row)

update t1 set a=a+1;
UPDATE 10
select count(1) from t1, t3 where t1.a=t3.a;
 count 
-------
     9
(1 row)

rollback;
ROLLBACK
-- cursor的优化
drop table if exists t1;
DROP TABLE
drop table if exists t2;
DROP TABLE
create table t1(a int, b int);
CREATE TABLE
create table t2(a int, b int);
CREATE TABLE
insert into t1 select i, i from generate_series(1,100) s(i);
INSERT 0 100
insert into t2 select i, i from generate_series(1,100) s(i);
INSERT 0 100
begin;
BEGIN
-- 使用cursor从存储节点逐行获取数据
set force_remote_sql_parameterize = 1;
SET
set enable_remote_cursor = 1;
SET
set remote_cursor_prefetch_rows = 1; 
SET
-- 只访问存储节点一次的不使用cursor
explain analyze select * from t1;

-- 用户自定义cursor（暂时不识别）
do $$
declare
    rc refcursor;
    foo int;
begin
    open rc for select a from t1;
    fetch next from rc into foo;
end;
$$;
DO
-- 非相关子查询，采用hash算法，不使用cursor
explain (costs off) select a in (select a from t2) from t1;

select a in (select a from t2) from t1;
 ?column? 
----------
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
(100 rows)

-- 相关子查询，使用cursor
explain (costs off) select a in (select a from t2 where t1.b=t2.b) from t1;

select a in (select a from t2 where t1.b=t2.b) from t1;
 ?column? 
----------
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
 t
(100 rows)

savepoint s1;
SAVEPOINT
set enable_remote_join_pushdown = off;
SET
set enable_mergejoin = off;
SET
set enable_nestloop = off;
SET
set enable_hashjoin = on;
SET
-- hash join的内表不需要cursor
explain select * From t1, t2 where t1.a=t2.a;

rollback to s1;
ROLLBACK
-- sort算子的子节点不使用cursor
set enable_remote_orderby_pushdown = off;
SET
explain select * from t1 where a in (select a from t2 order by a limit 10);

rollback;
ROLLBACK
-- executor/remotePlanUtils.c
drop table if exists t1;
DROP TABLE
		  
create table t1(a int primary key, b int);
CREATE TABLE
			
insert into t1 select i, i from generate_series(1,10) as s(i);
INSERT 0 10
-- 测试语法
-- skip locked
explain (costs off) select * from t1 for update skip locked;;

-- NOWAIT
explain (costs off) select * from t1 for update nowait;

-- 使用dblink测试并发连接之间的互斥
create database jenkins;
CREATE DATABASE
create extension if not exists dblink ;
CREATE EXTENSION
select dblink_connect('conn1', concat('hostaddr=127.0.0.1 port=', inet_server_port())); 
 dblink_connect 
----------------
 OK
(1 row)

select dblink_connect('conn2', concat('hostaddr=127.0.0.1 port=', inet_server_port()));
 dblink_connect 
----------------
 OK
(1 row)

-- conn1使用开启事务，并更新列1
select dblink('conn1', 'begin');
 dblink  
---------
 (BEGIN)
(1 row)

select dblink('conn1', 'create table t1(a int primary key, b int)');
      dblink      
------------------
 ("CREATE TABLE")
(1 row)

select dblink('conn1', 'insert into t1 select i, i from generate_series(1,10) as s(i)');
     dblink      
-----------------
 ("INSERT 0 10")
(1 row)

select dblink('conn1', 'update t1 set b=b+1 where a=1');
    dblink    
--------------
 ("UPDATE 1")
(1 row)

-- conn2
-- 预期超时错误
begin;
BEGIN
	 
set innodb_lock_wait_timeout = 1; -- 1s超时
SET
select * from dblink('conn2', 'select * from t1 for update') as t1(a int,b int);
 a  | b  
----+----
  1 |  2
  2 |  2
  3 |  3
  4 |  4
  5 |  5
  6 |  6
  7 |  7
  8 |  8
  9 |  9
 10 | 10
(10 rows)

rollback;
ROLLBACK
-- 直接报错
select * from dblink('conn2', 'select * from t1 for update nowait') as t1(a int,b int);
 a  | b  
----+----
  1 |  2
  2 |  2
  3 |  3
  4 |  4
  5 |  5
  6 |  6
  7 |  7
  8 |  8
  9 |  9
 10 | 10
(10 rows)

-- 跳过被锁住的列1
select * from dblink('conn2', 'select * from t1 for update skip locked') as t1(a int,b int);
 a  | b  
----+----
  1 |  2
  2 |  2
  3 |  3
  4 |  4
  5 |  5
  6 |  6
  7 |  7
  8 |  8
  9 |  9
 10 | 10
(10 rows)

select dblink('conn1', 'end');
  dblink  
----------
 (COMMIT)
(1 row)

select dblink_disconnect('conn1');
 dblink_disconnect 
-------------------
 OK
(1 row)

select dblink_disconnect('conn2');
 dblink_disconnect 
-------------------
 OK
(1 row)

-- remote/remote_dml.c
drop table if exists t1;
DROP TABLE
create table t1(a int primary key, b int) with (shard=1all);
CREATE TABLE
insert into t1 select i, i from generate_series(1,10) as s(i);
INSERT 0 10
alter table t1 add check(b<100);
ALTER TABLE
begin;
BEGIN
set enable_remote_orderby_pushdown = off;
SET
set enable_remote_limit_pushdown = off;
SET
-- 验证order/limit未下推时，能否正确判断update是能够下推的
explain update t1 set b=b+1 order by a limit 10;

update t1 set b=b+1 order by a limit 10;
UPDATE 10
-- 预期失败，不符合约束
savepoint sp1;
SAVEPOINT
update t1 set b=b+100 order by a limit 10;
psql:sql/coverage.sql:460: ERROR:  Kunlun-db: MySQL storage node (1, 1) returned error: 1644, new row violates check constraint.
rollback to sp1;
ROLLBACK
update t1 set b=b+100 where a in (select a from t1 order by a limit 10);
psql:sql/coverage.sql:462: ERROR:  new row for relation "t1" violates check constraint "t1_b_check"
DETAIL:  Failing row contains (1, 102).
rollback to sp1;
ROLLBACK
rollback;
ROLLBACK
-- remote_rel/ddl_logger.c
drop table if exists t1 cascade;
DROP TABLE
create table t1(a serial, b int) with(shard=1all);
CREATE TABLE
insert into t1 (b) select i  from generate_series(1,100) s(i);
INSERT 0 100
alter table t1 add column c int not null;
ALTER TABLE
-- 指定sequence名称和存储的shard位置
alter table t1 alter column c add generated by default as identity(sequence name s3 shard 1);
ALTER TABLE
-- 添加非法约束（预期报错）
alter table t1 add constraint illegal_check check(b<0);
psql:sql/coverage.sql:476: ERROR:  check constraint of relation "t1" is violated by some row
-- 预期拒绝
create table information_schema.t1(a int);
psql:sql/coverage.sql:479: ERROR:  Kunlun: Creating table in information_schema is not allowed.
-- 物化视图（需要确认其他计算节点成功回放）
drop materialized view if exists v1;
psql:sql/coverage.sql:482: NOTICE:  materialized view "v1" does not exist, skipping
DROP MATERIALIZED VIEW
create materialized view v1 as
 select b as b From t1;
SELECT 100
select * From v1 limit 10;
 b  
----
  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
(10 rows)

drop materialized view if exists v1;
DROP MATERIALIZED VIEW
create materialized view v1 with (shard=1all) as
    select b as b From t1;
SELECT 100
select * From v1 limit 10;
 b  
----
  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
(10 rows)

update t1 set b=-b;
UPDATE 100
refresh materialized view v1;
REFRESH MATERIALIZED VIEW
select * from v1 limit 10;
  b  
-----
  -1
  -2
  -3
  -4
  -5
  -6
  -7
  -8
  -9
 -10
(10 rows)

-- remote_rel/hooks.c
drop table if exists t1 cascade;
psql:sql/coverage.sql:498: NOTICE:  drop cascades to materialized view v1
DROP TABLE
set  remote_rel.enable_mirror_ddl = 1;
SET
create table t1(a int) with(shard=1all);
CREATE TABLE
-- 禁止对mirror表的ddl
set statement_timeout='1s';
SET
set remote_rel.enable_mirror_ddl = 0;
SET
drop table t1; -- 预期报错
psql:sql/coverage.sql:505: ERROR:  canceling statement due to statement timeout
create materialized view v1 with(shard=1all) as select * from t1; --预期报次
psql:sql/coverage.sql:506: ERROR:  canceling statement due to statement timeout
create materialized view v1 as select * from t1; -- ok
SELECT 0
set remote_rel.enable_mirror_ddl = 1;
SET
-- mirror表的路由fence
drop extension if exists dblink;
DROP EXTENSION
create extension if not exists dblink;
CREATE EXTENSION
select dblink_connect('conn1', concat('hostaddr=127.0.0.1 port=', inet_server_port()));
 dblink_connect 
----------------
 OK
(1 row)

select dblink('conn1', 'begin');
 dblink  
---------
 (BEGIN)
(1 row)

select dblink('conn1', 'update t1 set a=a+1');
psql:sql/coverage.sql:515: ERROR:  Kunlun-db: MySQL storage node (1, 1) returned error: 1062, Duplicate entry '2' for key 't1.PRIMARY'.
CONTEXT:  while executing query on dblink connection named "conn1"
-- 预期超时报错
-- 等到当前所有正在访问mirror表的事务提交成功才返回成功。
select mirror_route_fence();
 mirror_route_fence 
--------------------
 
(1 row)

-- 事务已提交，预期成功获取fence
select dblink('conn1', 'end');
   dblink   
------------
 (ROLLBACK)
(1 row)

select dblink_disconnect('conn1');
 dblink_disconnect 
-------------------
 OK
(1 row)

select mirror_route_fence();
 mirror_route_fence 
--------------------
 
(1 row)

-- remote_rel/remote_ddl.c
reset statement_timeout;
RESET
drop table if exists t1 cascade;
psql:sql/coverage.sql:527: NOTICE:  drop cascades to materialized view v1
DROP TABLE
-- 指定innodb的属性
create table t1(a int, b text) WITH (
    row_format = compressed, compression = zlib, encryption = 'N', autoextend_size = '16M');
CREATE TABLE
show create table t1;
 Table |                                            Create Table                                            
-------+----------------------------------------------------------------------------------------------------
 t1    | CREATE TABLE t1 (                                                                                 +
       |  a integer,                                                                                       +
       |  b text COLLATE "utf8mb4_0900_bin"                                                                +
       | ) WITH (row_format=compressed, compression=zlib, encryption='N', autoextend_size='16M', shard=1'1')
(1 row)

insert into t1 select i, md5(i::text) from generate_series(1,1000) s(i);
INSERT 0 1000
-- 修改innodb属性
alter table t1 set (row_format=dynamic, compression = lz4);
ALTER TABLE
-- 应用属性
optimize t1;
OPTIMIZE
-- 修改列类型
alter table t1 alter a type text;
ALTER TABLE
alter table t1 alter a type int using a::integer;
ALTER TABLE
-- plan/subselect.c
-- 相关子查询展开优化
drop table if exists t1 cascade;
DROP TABLE
drop table if exists t2 cascade;
DROP TABLE
create table t1(a int, b int);
CREATE TABLE
create table t2(a int, b int);
CREATE TABLE
insert into t1 select i, i%10 from generate_series(1,100) s(i);
INSERT 0 100
insert into t2 select i, i%10 from generate_series(1,100) s(i);
INSERT 0 100
analyze t1(a,b), t2(a,b);
ANALYZE
select pg_sleep(2);
 pg_sleep 
----------
 
(1 row)

begin;
BEGIN
-- 开启相关子查询展开优化
set enable_flatten_correlated_sublink = 1;
SET
explain select * from t1 where a in (select max(a) from t2 where t2.b=t1.b);

select * from t1 where a in (select max(a) from t2 where t2.b=t1.b);
  a  | b 
-----+---
  91 | 1
  92 | 2
  93 | 3
  94 | 4
  95 | 5
  96 | 6
  97 | 7
  98 | 8
  99 | 9
 100 | 0
(10 rows)

explain select * from t1 where a = (select max(a) from t2 where t2.b=t1.b);

select * from t1 where a = (select max(a) from t2 where t2.b=t1.b);
  a  | b 
-----+---
  91 | 1
  92 | 2
  93 | 3
  94 | 4
  95 | 5
  96 | 6
  97 | 7
  98 | 8
  99 | 9
 100 | 0
(10 rows)

-- 关闭相关子查询展开优化
set enable_flatten_correlated_sublink = 0;
SET
select * from t1 where a in (select max(a) from t2 where t2.b=t1.b);
  a  | b 
-----+---
  91 | 1
  92 | 2
  93 | 3
  94 | 4
  95 | 5
  96 | 6
  97 | 7
  98 | 8
  99 | 9
 100 | 0
(10 rows)

rollback;
ROLLBACK
