--
-- MISC
--
--
-- BTREE
--
--UPDATE onek
--   SET unique1 = onek.unique1 + 1;
--UPDATE onek
--   SET unique1 = onek.unique1 - 1;
--
-- BTREE partial
--
-- UPDATE onek2
--   SET unique1 = onek2.unique1 + 1;
--UPDATE onek2
--   SET unique1 = onek2.unique1 - 1;
--
-- BTREE shutting out non-functional updates
--
-- the following two tests seem to take a long time on some
-- systems.    This non-func update stuff needs to be examined
-- more closely.  			- jolly (2/22/96)
--
--UPDATE tenk1
--  SET stringu1 = reverse_name(onek.stringu1)
--   FROM onek
--   WHERE onek.stringu1 = 'JBAAAA' and
--	  onek.stringu1 = tenk1.stringu1;
--UPDATE tenk1
--   SET stringu1 = reverse_name(onek2.stringu1)
--   FROM onek2
--   WHERE onek2.stringu1 = 'JCAAAA' and
--	  onek2.stringu1 = tenk1.stringu1;
--DROP TABLE tenk1;
--UPDATE person*
--   SET age = age + 1;
--UPDATE person*
--   SET age = age + 3
--   WHERE name = 'linda';
--
-- inheritance stress test
--
drop table if exists a_star;
DROP TABLE
CREATE TABLE a_star (
	class		char,
	a 			int4
);
CREATE TABLE
INSERT INTO a_star (class, a) VALUES ('a', 1);
INSERT 0 1
INSERT INTO a_star (class, a) VALUES ('a', 2);
INSERT 0 1
INSERT INTO a_star (class) VALUES ('a');
INSERT 0 1
SELECT * FROM a_star*;
 class | a 
-------+---
 a     | 1
 a     | 2
 a     |  
(3 rows)

--SELECT *
--   FROM b_star* x
--   WHERE x.b = text 'bumble' or x.a < 3;
--SELECT class, a
--   FROM c_star* x
--   WHERE x.c ~ text 'hi';
--SELECT class, b, c
--   FROM d_star* x
--   WHERE x.a < 100;
--SELECT class, c FROM e_star* x WHERE x.c NOTNULL;
--SELECT * FROM f_star* x WHERE x.c ISNULL;
-- grouping and aggregation on inherited sets have been busted in the past...
SELECT sum(a) FROM a_star*;
 sum 
-----
   3
(1 row)

SELECT class, sum(a) FROM a_star* GROUP BY class ORDER BY class;
 class | sum 
-------+-----
 a     |   3
(1 row)

--ALTER TABLE f_star RENAME COLUMN f TO ff;
--ALTER TABLE e_star* RENAME COLUMN e TO ee;
--ALTER TABLE d_star* RENAME COLUMN d TO dd;
--ALTER TABLE c_star* RENAME COLUMN c TO cc;
--ALTER TABLE b_star* RENAME COLUMN b TO bb;
ALTER TABLE a_star* RENAME COLUMN a TO aa;
ALTER TABLE
SELECT class, aa
   FROM a_star* x
   WHERE aa ISNULL;
 class | aa 
-------+----
 a     |   
(1 row)

-- As of Postgres 7.1, ALTER implicitly recurses,
-- so this should be same as ALTER a_star*
ALTER TABLE a_star RENAME COLUMN aa TO foo;
ALTER TABLE
SELECT class, foo
   FROM a_star* x
   WHERE x.foo >= 2;
 class | foo 
-------+-----
 a     |   2
(1 row)

ALTER TABLE a_star RENAME COLUMN foo TO aa;
ALTER TABLE
SELECT *
   from a_star*
   WHERE aa < 1000;
 class | aa 
-------+----
 a     |  1
 a     |  2
(2 rows)

--ALTER TABLE f_star ADD COLUMN f int4;
--UPDATE f_star SET f = 10;
--ALTER TABLE e_star* ADD COLUMN e int4;
--UPDATE e_star* SET e = 42;
--SELECT * FROM e_star*;
ALTER TABLE a_star* ADD COLUMN a text;
ALTER TABLE
-- That ALTER TABLE should have added TOAST tables.
--SELECT relname, reltoastrelid <> 0 AS has_toast_table
--   FROM pg_class
--   WHERE oid::regclass IN ('a_star', 'c_star')
--   ORDER BY 1;
--UPDATE b_star*
--   SET a = text 'gazpacho'
--   WHERE aa > 4;
SELECT class, aa, a FROM a_star*;
 class | aa | a 
-------+----+---
 a     |  1 | 
 a     |  2 | 
 a     |    | 
(3 rows)

--
-- versions
--
--
-- postquel functions
--
--
-- mike does post_hacking,
-- joe and sally play basketball, and
-- everyone else does nothing.
--
SELECT p.name, name(p.hobbies) FROM ONLY person p;
 name | name 
------+------
(0 rows)

--
-- as above, but jeff also does post_hacking.
--
SELECT p.name, name(p.hobbies) FROM person* p;
 name | name 
------+------
(0 rows)

--
-- the next two queries demonstrate how functions generate bogus duplicates.
-- this is a "feature" ..
--
SELECT DISTINCT hobbies_r.name, name(hobbies_r.equipment) FROM hobbies_r
  ORDER BY 1,2;
 name | name 
------+------
(0 rows)

SELECT hobbies_r.name, (hobbies_r.equipment).name FROM hobbies_r;
 name | name 
------+------
(0 rows)

--
-- mike needs advil and peet's coffee,
-- joe and sally need hightops, and
-- everyone else is fine.
--
SELECT p.name, name(p.hobbies), name(equipment(p.hobbies)) FROM ONLY person p;
 name | name | name 
------+------+------
(0 rows)

--
-- as above, but jeff needs advil and peet's coffee as well.
--
SELECT p.name, name(p.hobbies), name(equipment(p.hobbies)) FROM person* p;
 name | name | name 
------+------+------
(0 rows)

--
-- just like the last two, but make sure that the target list fixup and
-- unflattening is being done correctly.
--
SELECT name(equipment(p.hobbies)), p.name, name(p.hobbies) FROM ONLY person p;
 name | name | name 
------+------+------
(0 rows)

SELECT (p.hobbies).equipment.name, p.name, name(p.hobbies) FROM person* p;
 name | name | name 
------+------+------
(0 rows)

SELECT (p.hobbies).equipment.name, name(p.hobbies), p.name FROM ONLY person p;
 name | name | name 
------+------+------
(0 rows)

SELECT name(equipment(p.hobbies)), name(p.hobbies), p.name FROM person* p;
 name | name | name 
------+------+------
(0 rows)

SELECT name(equipment(hobby_construct(text 'skywalking', text 'mer')));
 name 
------
(0 rows)

SELECT name(equipment(hobby_construct_named(text 'skywalking', text 'mer')));
 name 
------
(0 rows)

SELECT name(equipment_named(hobby_construct_named(text 'skywalking', text 'mer')));
 name 
------
(0 rows)

SELECT name(equipment_named_ambiguous_1a(hobby_construct_named(text 'skywalking', text 'mer')));
 name 
------
(0 rows)

SELECT name(equipment_named_ambiguous_1b(hobby_construct_named(text 'skywalking', text 'mer')));
 name 
------
(0 rows)

SELECT name(equipment_named_ambiguous_1c(hobby_construct_named(text 'skywalking', text 'mer')));
 name 
------
(0 rows)

SELECT name(equipment_named_ambiguous_2a(text 'skywalking'));
 name 
------
(0 rows)

SELECT name(equipment_named_ambiguous_2b(text 'skywalking'));
 name 
------
(0 rows)

SELECT hobbies_by_name('basketball');
 hobbies_by_name 
-----------------
 
(1 row)

SELECT name, overpaid(emp.*) FROM emp;
psql:sql/misc.sql:218: ERROR:  attribute "salary" does not exist
--
-- Try a few cases with SQL-spec row constructor expressions
--
SELECT * FROM equipment(ROW('skywalking', 'mer'));
 name | hobby 
------+-------
(0 rows)

SELECT name(equipment(ROW('skywalking', 'mer')));
 name 
------
(0 rows)

SELECT *, name(equipment(h.*)) FROM hobbies_r h;
 name | person | name 
------+--------+------
(0 rows)

SELECT *, (equipment(CAST((h.*) AS hobbies_r))).name FROM hobbies_r h;
 name | person | name 
------+--------+------
(0 rows)

--
-- functional joins
--
--
-- instance rules
--
--
-- rewrite rules
--
