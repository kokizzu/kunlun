--
-- Test of Row-level security feature
--
-- Clean up in case a prior regression run failed
-- Suppress NOTICE messages when users/groups don't exist
SET client_min_messages TO 'warning';
SET
DROP USER IF EXISTS regress_rls_alice;
DROP ROLE
DROP USER IF EXISTS regress_rls_bob;
DROP ROLE
DROP USER IF EXISTS regress_rls_carol;
DROP ROLE
DROP USER IF EXISTS regress_rls_dave;
DROP ROLE
DROP USER IF EXISTS regress_rls_exempt_user;
DROP ROLE
DROP ROLE IF EXISTS regress_rls_group1;
DROP ROLE
DROP ROLE IF EXISTS regress_rls_group2;
DROP ROLE
DROP SCHEMA IF EXISTS regress_rls_schema CASCADE;
DROP SCHEMA
RESET client_min_messages;
RESET
-- initial setup
CREATE USER regress_rls_alice NOLOGIN;
CREATE ROLE
CREATE USER regress_rls_bob NOLOGIN;
CREATE ROLE
CREATE USER regress_rls_carol NOLOGIN;
CREATE ROLE
CREATE USER regress_rls_dave NOLOGIN;
CREATE ROLE
CREATE USER regress_rls_exempt_user BYPASSRLS NOLOGIN;
CREATE ROLE
CREATE ROLE regress_rls_group1 NOLOGIN;
CREATE ROLE
CREATE ROLE regress_rls_group2 NOLOGIN;
CREATE ROLE
GRANT regress_rls_group1 TO regress_rls_bob;
GRANT ROLE
GRANT regress_rls_group2 TO regress_rls_carol;
GRANT ROLE
CREATE SCHEMA regress_rls_schema;
CREATE SCHEMA
GRANT ALL ON SCHEMA regress_rls_schema to public;
GRANT
SET search_path = regress_rls_schema;
SET
-- setup of malicious function
CREATE OR REPLACE FUNCTION f_leak(text) RETURNS bool
    COST 0.0000001 LANGUAGE plpgsql
    AS 'BEGIN RAISE NOTICE ''f_leak => %'', $1; RETURN true; END';
CREATE FUNCTION
GRANT EXECUTE ON FUNCTION f_leak(text) TO public;
GRANT
-- BASIC Row-Level Security Scenario
SET SESSION AUTHORIZATION regress_rls_alice;
SET
CREATE TABLE uaccount (
    pguser      name primary key,
    seclv       int
);
CREATE TABLE
GRANT SELECT ON uaccount TO public;
GRANT
INSERT INTO uaccount VALUES
    ('regress_rls_alice', 99),
    ('regress_rls_bob', 1),
    ('regress_rls_carol', 2),
    ('regress_rls_dave', 3);
INSERT 0 4
	
CREATE TABLE category (
    cid        int primary key,
    cname      text
);
CREATE TABLE
GRANT ALL ON category TO public;
GRANT
INSERT INTO category VALUES
    (11, 'novel'),
    (22, 'science fiction'),
    (33, 'technology'),
    (44, 'manga');
INSERT 0 4
	
CREATE TABLE document (
    did         int primary key,
    cid         int,
    dlevel      int not null,
    dauthor     name,
    dtitle      text
);
CREATE TABLE
GRANT ALL ON document TO public;
GRANT
INSERT INTO document VALUES
    ( 1, 11, 1, 'regress_rls_bob', 'my first novel'),
    ( 2, 11, 2, 'regress_rls_bob', 'my second novel'),
    ( 3, 22, 2, 'regress_rls_bob', 'my science fiction'),
    ( 4, 44, 1, 'regress_rls_bob', 'my first manga'),
    ( 5, 44, 2, 'regress_rls_bob', 'my second manga'),
    ( 6, 22, 1, 'regress_rls_carol', 'great science fiction'),
    ( 7, 33, 2, 'regress_rls_carol', 'great technology book'),
    ( 8, 44, 1, 'regress_rls_carol', 'great manga'),
    ( 9, 22, 1, 'regress_rls_dave', 'awesome science fiction'),
    (10, 33, 2, 'regress_rls_dave', 'awesome technology book');
INSERT 0 10
ALTER TABLE document ENABLE ROW LEVEL SECURITY;
ALTER TABLE
-- user's security level must be higher than or equal to document's
CREATE POLICY p1 ON document AS PERMISSIVE
    USING (dlevel <= (SELECT seclv FROM uaccount WHERE pguser = current_user));
CREATE POLICY
-- try to create a policy of bogus type
CREATE POLICY p1 ON document AS UGLY
    USING (dlevel <= (SELECT seclv FROM uaccount WHERE pguser = current_user));
psql:sql/rowsecurity.sql:97: ERROR:  unrecognized row security option "ugly"
LINE 1: CREATE POLICY p1 ON document AS UGLY
                                        ^
HINT:  Only PERMISSIVE or RESTRICTIVE policies are supported currently.
-- but Dave isn't allowed to anything at cid 50 or above
-- this is to make sure that we sort the policies by name first
-- when applying WITH CHECK, a later INSERT by Dave should fail due
-- to p1r first
CREATE POLICY p2r ON document AS RESTRICTIVE TO regress_rls_dave
    USING (cid <> 44 AND cid < 50);
CREATE POLICY
-- and Dave isn't allowed to see manga documents
CREATE POLICY p1r ON document AS RESTRICTIVE TO regress_rls_dave
    USING (cid <> 44);
CREATE POLICY
\dp
                                                                  Access privileges
       Schema       |   Name   | Type  |              Access privileges              | Column privileges |                  Policies                  
--------------------+----------+-------+---------------------------------------------+-------------------+--------------------------------------------
 regress_rls_schema | category | table | regress_rls_alice=arwdDxt/regress_rls_alice+|                   | 
                    |          |       | =arwdDxt/regress_rls_alice                  |                   | 
 regress_rls_schema | document | table | regress_rls_alice=arwdDxt/regress_rls_alice+|                   | p1:                                       +
                    |          |       | =arwdDxt/regress_rls_alice                  |                   |   (u): (dlevel <= ( SELECT uaccount.seclv +
                    |          |       |                                             |                   |    FROM uaccount                          +
                    |          |       |                                             |                   |   WHERE (uaccount.pguser = CURRENT_USER)))+
                    |          |       |                                             |                   | p2r (RESTRICTIVE):                        +
                    |          |       |                                             |                   |   (u): ((cid <> 44) AND (cid < 50))       +
                    |          |       |                                             |                   |   to: regress_rls_dave                    +
                    |          |       |                                             |                   | p1r (RESTRICTIVE):                        +
                    |          |       |                                             |                   |   (u): (cid <> 44)                        +
                    |          |       |                                             |                   |   to: regress_rls_dave
 regress_rls_schema | uaccount | table | regress_rls_alice=arwdDxt/regress_rls_alice+|                   | 
                    |          |       | =r/regress_rls_alice                        |                   | 
(3 rows)

\d document
            Table "regress_rls_schema.document"
 Column  |  Type   |    Collation     | Nullable | Default 
---------+---------+------------------+----------+---------
 did     | integer |                  | not null | 
 cid     | integer |                  |          | 
 dlevel  | integer |                  | not null | 
 dauthor | name    |                  |          | 
 dtitle  | text    | utf8mb4_0900_bin |          | 
Indexes:
    "document_pkey" PRIMARY KEY, btree (did NULLS FIRST)
Policies:
    POLICY "p1"
      USING ((dlevel <= ( SELECT uaccount.seclv
   FROM uaccount
  WHERE (uaccount.pguser = CURRENT_USER))))
    POLICY "p1r" AS RESTRICTIVE
      TO regress_rls_dave
      USING ((cid <> 44))
    POLICY "p2r" AS RESTRICTIVE
      TO regress_rls_dave
      USING (((cid <> 44) AND (cid < 50)))

SELECT * FROM pg_policies WHERE schemaname = 'regress_rls_schema' AND tablename = 'document' ORDER BY policyname;
     schemaname     | tablename | policyname | permissive  |       roles        | cmd |                    qual                    | with_check 
--------------------+-----------+------------+-------------+--------------------+-----+--------------------------------------------+------------
 regress_rls_schema | document  | p1         | PERMISSIVE  | {public}           | ALL | (dlevel <= ( SELECT uaccount.seclv        +| 
                    |           |            |             |                    |     |    FROM uaccount                          +| 
                    |           |            |             |                    |     |   WHERE (uaccount.pguser = CURRENT_USER))) | 
 regress_rls_schema | document  | p1r        | RESTRICTIVE | {regress_rls_dave} | ALL | (cid <> 44)                                | 
 regress_rls_schema | document  | p2r        | RESTRICTIVE | {regress_rls_dave} | ALL | ((cid <> 44) AND (cid < 50))               | 
(3 rows)

-- viewpoint from regress_rls_bob
SET SESSION AUTHORIZATION regress_rls_bob;
SET
SET row_security TO ON;
SET
--SELECT * FROM document WHERE f_leak(dtitle) ORDER BY did;
--SELECT * FROM document NATURAL JOIN category WHERE f_leak(dtitle) ORDER BY did;
-- try a sampled version
--SELECT * FROM document TABLESAMPLE BERNOULLI(50) REPEATABLE(0)
--  WHERE f_leak(dtitle) ORDER BY did;
-- viewpoint from regress_rls_carol
SET SESSION AUTHORIZATION regress_rls_carol;
SET
SELECT * FROM document WHERE f_leak(dtitle) ORDER BY did;
psql:sql/rowsecurity.sql:125: NOTICE:  f_leak => my first novel
psql:sql/rowsecurity.sql:125: NOTICE:  f_leak => my second novel
psql:sql/rowsecurity.sql:125: NOTICE:  f_leak => my science fiction
psql:sql/rowsecurity.sql:125: NOTICE:  f_leak => my first manga
psql:sql/rowsecurity.sql:125: NOTICE:  f_leak => my second manga
psql:sql/rowsecurity.sql:125: NOTICE:  f_leak => great science fiction
psql:sql/rowsecurity.sql:125: NOTICE:  f_leak => great technology book
psql:sql/rowsecurity.sql:125: NOTICE:  f_leak => great manga
psql:sql/rowsecurity.sql:125: NOTICE:  f_leak => awesome science fiction
psql:sql/rowsecurity.sql:125: NOTICE:  f_leak => awesome technology book
 did | cid | dlevel |      dauthor      |         dtitle          
-----+-----+--------+-------------------+-------------------------
   1 |  11 |      1 | regress_rls_bob   | my first novel
   2 |  11 |      2 | regress_rls_bob   | my second novel
   3 |  22 |      2 | regress_rls_bob   | my science fiction
   4 |  44 |      1 | regress_rls_bob   | my first manga
   5 |  44 |      2 | regress_rls_bob   | my second manga
   6 |  22 |      1 | regress_rls_carol | great science fiction
   7 |  33 |      2 | regress_rls_carol | great technology book
   8 |  44 |      1 | regress_rls_carol | great manga
   9 |  22 |      1 | regress_rls_dave  | awesome science fiction
  10 |  33 |      2 | regress_rls_dave  | awesome technology book
(10 rows)

SELECT * FROM document NATURAL JOIN category WHERE f_leak(dtitle) ORDER BY did;
psql:sql/rowsecurity.sql:126: NOTICE:  f_leak => my first novel
psql:sql/rowsecurity.sql:126: NOTICE:  f_leak => my second novel
psql:sql/rowsecurity.sql:126: NOTICE:  f_leak => my science fiction
psql:sql/rowsecurity.sql:126: NOTICE:  f_leak => my first manga
psql:sql/rowsecurity.sql:126: NOTICE:  f_leak => my second manga
psql:sql/rowsecurity.sql:126: NOTICE:  f_leak => great science fiction
psql:sql/rowsecurity.sql:126: NOTICE:  f_leak => great technology book
psql:sql/rowsecurity.sql:126: NOTICE:  f_leak => great manga
psql:sql/rowsecurity.sql:126: NOTICE:  f_leak => awesome science fiction
psql:sql/rowsecurity.sql:126: NOTICE:  f_leak => awesome technology book
 cid | did | dlevel |      dauthor      |         dtitle          |      cname      
-----+-----+--------+-------------------+-------------------------+-----------------
  11 |   1 |      1 | regress_rls_bob   | my first novel          | novel
  11 |   2 |      2 | regress_rls_bob   | my second novel         | novel
  22 |   3 |      2 | regress_rls_bob   | my science fiction      | science fiction
  44 |   4 |      1 | regress_rls_bob   | my first manga          | manga
  44 |   5 |      2 | regress_rls_bob   | my second manga         | manga
  22 |   6 |      1 | regress_rls_carol | great science fiction   | science fiction
  33 |   7 |      2 | regress_rls_carol | great technology book   | technology
  44 |   8 |      1 | regress_rls_carol | great manga             | manga
  22 |   9 |      1 | regress_rls_dave  | awesome science fiction | science fiction
  33 |  10 |      2 | regress_rls_dave  | awesome technology book | technology
(10 rows)

-- try a sampled version, not support
-- SELECT * FROM document TABLESAMPLE BERNOULLI(50) REPEATABLE(0)
--  WHERE f_leak(dtitle) ORDER BY did;
EXPLAIN (COSTS OFF) SELECT * FROM document WHERE f_leak(dtitle);

EXPLAIN (COSTS OFF) SELECT * FROM document NATURAL JOIN category WHERE f_leak(dtitle);

-- viewpoint from regress_rls_dave
SET SESSION AUTHORIZATION regress_rls_dave;
SET
SELECT * FROM document WHERE f_leak(dtitle) ORDER BY did;
psql:sql/rowsecurity.sql:137: NOTICE:  f_leak => my first novel
psql:sql/rowsecurity.sql:137: NOTICE:  f_leak => my second novel
psql:sql/rowsecurity.sql:137: NOTICE:  f_leak => my science fiction
psql:sql/rowsecurity.sql:137: NOTICE:  f_leak => great science fiction
psql:sql/rowsecurity.sql:137: NOTICE:  f_leak => great technology book
psql:sql/rowsecurity.sql:137: NOTICE:  f_leak => awesome science fiction
psql:sql/rowsecurity.sql:137: NOTICE:  f_leak => awesome technology book
 did | cid | dlevel |      dauthor      |         dtitle          
-----+-----+--------+-------------------+-------------------------
   1 |  11 |      1 | regress_rls_bob   | my first novel
   2 |  11 |      2 | regress_rls_bob   | my second novel
   3 |  22 |      2 | regress_rls_bob   | my science fiction
   6 |  22 |      1 | regress_rls_carol | great science fiction
   7 |  33 |      2 | regress_rls_carol | great technology book
   9 |  22 |      1 | regress_rls_dave  | awesome science fiction
  10 |  33 |      2 | regress_rls_dave  | awesome technology book
(7 rows)

SELECT * FROM document NATURAL JOIN category WHERE f_leak(dtitle) ORDER BY did;
psql:sql/rowsecurity.sql:138: NOTICE:  f_leak => my first novel
psql:sql/rowsecurity.sql:138: NOTICE:  f_leak => my second novel
psql:sql/rowsecurity.sql:138: NOTICE:  f_leak => my science fiction
psql:sql/rowsecurity.sql:138: NOTICE:  f_leak => great science fiction
psql:sql/rowsecurity.sql:138: NOTICE:  f_leak => great technology book
psql:sql/rowsecurity.sql:138: NOTICE:  f_leak => awesome science fiction
psql:sql/rowsecurity.sql:138: NOTICE:  f_leak => awesome technology book
 cid | did | dlevel |      dauthor      |         dtitle          |      cname      
-----+-----+--------+-------------------+-------------------------+-----------------
  11 |   1 |      1 | regress_rls_bob   | my first novel          | novel
  11 |   2 |      2 | regress_rls_bob   | my second novel         | novel
  22 |   3 |      2 | regress_rls_bob   | my science fiction      | science fiction
  22 |   6 |      1 | regress_rls_carol | great science fiction   | science fiction
  33 |   7 |      2 | regress_rls_carol | great technology book   | technology
  22 |   9 |      1 | regress_rls_dave  | awesome science fiction | science fiction
  33 |  10 |      2 | regress_rls_dave  | awesome technology book | technology
(7 rows)

EXPLAIN (COSTS OFF) SELECT * FROM document WHERE f_leak(dtitle);

EXPLAIN (COSTS OFF) SELECT * FROM document NATURAL JOIN category WHERE f_leak(dtitle);

-- 44 would technically fail for both p2r and p1r, but we should get an error
-- back from p1r for this because it sorts first
INSERT INTO document VALUES (100, 44, 1, 'regress_rls_dave', 'testing sorting of policies'); -- fail
psql:sql/rowsecurity.sql:145: ERROR:  new row violates row-level security policy "p1r" for table "document"
-- Just to see a p2r error
INSERT INTO document VALUES (100, 55, 1, 'regress_rls_dave', 'testing sorting of policies'); -- fail
psql:sql/rowsecurity.sql:147: ERROR:  new row violates row-level security policy "p2r" for table "document"
-- only owner can change policies
ALTER POLICY p1 ON document USING (true);    --fail
psql:sql/rowsecurity.sql:150: ERROR:  must be owner of table document
DROP POLICY p1 ON document;                  --fail
psql:sql/rowsecurity.sql:151: ERROR:  must be owner of relation document
SET SESSION AUTHORIZATION regress_rls_alice;
SET
ALTER POLICY p1 ON document USING (dauthor = current_user);
ALTER POLICY
-- viewpoint from regress_rls_bob again
SET SESSION AUTHORIZATION regress_rls_bob;
SET
SELECT * FROM document WHERE f_leak(dtitle) ORDER BY did;
psql:sql/rowsecurity.sql:157: NOTICE:  f_leak => my first novel
psql:sql/rowsecurity.sql:157: NOTICE:  f_leak => my second novel
psql:sql/rowsecurity.sql:157: NOTICE:  f_leak => my science fiction
psql:sql/rowsecurity.sql:157: NOTICE:  f_leak => my first manga
psql:sql/rowsecurity.sql:157: NOTICE:  f_leak => my second manga
 did | cid | dlevel |     dauthor     |       dtitle       
-----+-----+--------+-----------------+--------------------
   1 |  11 |      1 | regress_rls_bob | my first novel
   2 |  11 |      2 | regress_rls_bob | my second novel
   3 |  22 |      2 | regress_rls_bob | my science fiction
   4 |  44 |      1 | regress_rls_bob | my first manga
   5 |  44 |      2 | regress_rls_bob | my second manga
(5 rows)

SELECT * FROM document NATURAL JOIN category WHERE f_leak(dtitle) ORDER by did;
psql:sql/rowsecurity.sql:158: NOTICE:  f_leak => my first novel
psql:sql/rowsecurity.sql:158: NOTICE:  f_leak => my second novel
psql:sql/rowsecurity.sql:158: NOTICE:  f_leak => my science fiction
psql:sql/rowsecurity.sql:158: NOTICE:  f_leak => my first manga
psql:sql/rowsecurity.sql:158: NOTICE:  f_leak => my second manga
 cid | did | dlevel |     dauthor     |       dtitle       |      cname      
-----+-----+--------+-----------------+--------------------+-----------------
  11 |   1 |      1 | regress_rls_bob | my first novel     | novel
  11 |   2 |      2 | regress_rls_bob | my second novel    | novel
  22 |   3 |      2 | regress_rls_bob | my science fiction | science fiction
  44 |   4 |      1 | regress_rls_bob | my first manga     | manga
  44 |   5 |      2 | regress_rls_bob | my second manga    | manga
(5 rows)

-- viewpoint from rls_regres_carol again
SET SESSION AUTHORIZATION regress_rls_carol;
SET
SELECT * FROM document WHERE f_leak(dtitle) ORDER BY did;
psql:sql/rowsecurity.sql:162: NOTICE:  f_leak => great science fiction
psql:sql/rowsecurity.sql:162: NOTICE:  f_leak => great technology book
psql:sql/rowsecurity.sql:162: NOTICE:  f_leak => great manga
 did | cid | dlevel |      dauthor      |        dtitle         
-----+-----+--------+-------------------+-----------------------
   6 |  22 |      1 | regress_rls_carol | great science fiction
   7 |  33 |      2 | regress_rls_carol | great technology book
   8 |  44 |      1 | regress_rls_carol | great manga
(3 rows)

SELECT * FROM document NATURAL JOIN category WHERE f_leak(dtitle) ORDER by did;
psql:sql/rowsecurity.sql:163: NOTICE:  f_leak => great science fiction
psql:sql/rowsecurity.sql:163: NOTICE:  f_leak => great technology book
psql:sql/rowsecurity.sql:163: NOTICE:  f_leak => great manga
 cid | did | dlevel |      dauthor      |        dtitle         |      cname      
-----+-----+--------+-------------------+-----------------------+-----------------
  22 |   6 |      1 | regress_rls_carol | great science fiction | science fiction
  33 |   7 |      2 | regress_rls_carol | great technology book | technology
  44 |   8 |      1 | regress_rls_carol | great manga           | manga
(3 rows)

EXPLAIN (COSTS OFF) SELECT * FROM document WHERE f_leak(dtitle);

EXPLAIN (COSTS OFF) SELECT * FROM document NATURAL JOIN category WHERE f_leak(dtitle);

-- interaction of FK/PK constraints
SET SESSION AUTHORIZATION regress_rls_alice;
SET
CREATE POLICY p2 ON category
    USING (CASE WHEN current_user = 'regress_rls_bob' THEN cid IN (11, 33)
           WHEN current_user = 'regress_rls_carol' THEN cid IN (22, 44)
           ELSE false END);
CREATE POLICY
ALTER TABLE category ENABLE ROW LEVEL SECURITY;
ALTER TABLE
-- cannot delete PK referenced by invisible FK
SET SESSION AUTHORIZATION regress_rls_bob;
SET
SELECT * FROM document d FULL OUTER JOIN category c on d.cid = c.cid ORDER BY d.did, c.cid;
 did | cid | dlevel |     dauthor     |       dtitle       | cid |   cname    
-----+-----+--------+-----------------+--------------------+-----+------------
     |     |        |                 |                    |  33 | technology
   1 |  11 |      1 | regress_rls_bob | my first novel     |  11 | novel
   2 |  11 |      2 | regress_rls_bob | my second novel    |  11 | novel
   3 |  22 |      2 | regress_rls_bob | my science fiction |     | 
   4 |  44 |      1 | regress_rls_bob | my first manga     |     | 
   5 |  44 |      2 | regress_rls_bob | my second manga    |     | 
(6 rows)

DELETE FROM category WHERE cid = 33;    -- fails with FK violation
DELETE 1
-- can insert FK referencing invisible PK
SET SESSION AUTHORIZATION regress_rls_carol;
SET
SELECT * FROM document d FULL OUTER JOIN category c on d.cid = c.cid ORDER BY d.did, c.cid;
 did | cid | dlevel |      dauthor      |        dtitle         | cid |      cname      
-----+-----+--------+-------------------+-----------------------+-----+-----------------
   6 |  22 |      1 | regress_rls_carol | great science fiction |  22 | science fiction
   7 |  33 |      2 | regress_rls_carol | great technology book |     | 
   8 |  44 |      1 | regress_rls_carol | great manga           |  44 | manga
(3 rows)

INSERT INTO document VALUES (11, 33, 1, current_user, 'hoge');
INSERT 0 1
-- UNIQUE or PRIMARY KEY constraint violation DOES reveal presence of row
SET SESSION AUTHORIZATION regress_rls_bob;
SET
INSERT INTO document VALUES (8, 44, 1, 'regress_rls_bob', 'my third manga'); -- Must fail with unique violation, revealing presence of did we can't see
psql:sql/rowsecurity.sql:189: ERROR:  Kunlun-db: MySQL storage node (1, 1) returned error: 1062, Duplicate entry '8' for key 'document.PRIMARY'.
SELECT * FROM document WHERE did = 8; -- and confirm we can't see it
 did | cid | dlevel | dauthor | dtitle 
-----+-----+--------+---------+--------
(0 rows)

-- RLS policies are checked before constraints
INSERT INTO document VALUES (8, 44, 1, 'regress_rls_carol', 'my third manga'); -- Should fail with RLS check violation, not duplicate key violation
psql:sql/rowsecurity.sql:193: ERROR:  new row violates row-level security policy for table "document"
UPDATE document SET did = 8, dauthor = 'regress_rls_carol' WHERE did = 5; -- Should fail with RLS check violation, not duplicate key violation
psql:sql/rowsecurity.sql:194: ERROR:  Kunlun-db: MySQL storage node (1, 1) returned error: 1644, new row violates check constraint.
-- database superuser does bypass RLS policy when enabled
RESET SESSION AUTHORIZATION;
RESET
SET row_security TO ON;
SET
SELECT * FROM document order by 1,2,3,4,5;
 did | cid | dlevel |      dauthor      |         dtitle          
-----+-----+--------+-------------------+-------------------------
   1 |  11 |      1 | regress_rls_bob   | my first novel
   2 |  11 |      2 | regress_rls_bob   | my second novel
   3 |  22 |      2 | regress_rls_bob   | my science fiction
   4 |  44 |      1 | regress_rls_bob   | my first manga
   5 |  44 |      2 | regress_rls_bob   | my second manga
   6 |  22 |      1 | regress_rls_carol | great science fiction
   7 |  33 |      2 | regress_rls_carol | great technology book
   8 |  44 |      1 | regress_rls_carol | great manga
   9 |  22 |      1 | regress_rls_dave  | awesome science fiction
  10 |  33 |      2 | regress_rls_dave  | awesome technology book
  11 |  33 |      1 | regress_rls_carol | hoge
(11 rows)

SELECT * FROM category;
 cid |      cname      
-----+-----------------
  11 | novel
  22 | science fiction
  44 | manga
(3 rows)

-- database superuser does bypass RLS policy when disabled
RESET SESSION AUTHORIZATION;
RESET
SET row_security TO OFF;
SET
SELECT * FROM document order by 1,2,3,4,5;
 did | cid | dlevel |      dauthor      |         dtitle          
-----+-----+--------+-------------------+-------------------------
   1 |  11 |      1 | regress_rls_bob   | my first novel
   2 |  11 |      2 | regress_rls_bob   | my second novel
   3 |  22 |      2 | regress_rls_bob   | my science fiction
   4 |  44 |      1 | regress_rls_bob   | my first manga
   5 |  44 |      2 | regress_rls_bob   | my second manga
   6 |  22 |      1 | regress_rls_carol | great science fiction
   7 |  33 |      2 | regress_rls_carol | great technology book
   8 |  44 |      1 | regress_rls_carol | great manga
   9 |  22 |      1 | regress_rls_dave  | awesome science fiction
  10 |  33 |      2 | regress_rls_dave  | awesome technology book
  11 |  33 |      1 | regress_rls_carol | hoge
(11 rows)

SELECT * FROM category;
 cid |      cname      
-----+-----------------
  11 | novel
  22 | science fiction
  44 | manga
(3 rows)

-- database non-superuser with bypass privilege can bypass RLS policy when disabled
SET SESSION AUTHORIZATION regress_rls_exempt_user;
SET
SET row_security TO OFF;
SET
SELECT * FROM document order by 1,2,3,4,5;
 did | cid | dlevel |      dauthor      |         dtitle          
-----+-----+--------+-------------------+-------------------------
   1 |  11 |      1 | regress_rls_bob   | my first novel
   2 |  11 |      2 | regress_rls_bob   | my second novel
   3 |  22 |      2 | regress_rls_bob   | my science fiction
   4 |  44 |      1 | regress_rls_bob   | my first manga
   5 |  44 |      2 | regress_rls_bob   | my second manga
   6 |  22 |      1 | regress_rls_carol | great science fiction
   7 |  33 |      2 | regress_rls_carol | great technology book
   8 |  44 |      1 | regress_rls_carol | great manga
   9 |  22 |      1 | regress_rls_dave  | awesome science fiction
  10 |  33 |      2 | regress_rls_dave  | awesome technology book
  11 |  33 |      1 | regress_rls_carol | hoge
(11 rows)

SELECT * FROM category;
 cid |      cname      
-----+-----------------
  11 | novel
  22 | science fiction
  44 | manga
(3 rows)

-- RLS policy does not apply to table owner when RLS enabled.
SET SESSION AUTHORIZATION regress_rls_alice;
SET
SET row_security TO ON;
SET
SELECT * FROM document order by 1,2,3,4,5;
 did | cid | dlevel |      dauthor      |         dtitle          
-----+-----+--------+-------------------+-------------------------
   1 |  11 |      1 | regress_rls_bob   | my first novel
   2 |  11 |      2 | regress_rls_bob   | my second novel
   3 |  22 |      2 | regress_rls_bob   | my science fiction
   4 |  44 |      1 | regress_rls_bob   | my first manga
   5 |  44 |      2 | regress_rls_bob   | my second manga
   6 |  22 |      1 | regress_rls_carol | great science fiction
   7 |  33 |      2 | regress_rls_carol | great technology book
   8 |  44 |      1 | regress_rls_carol | great manga
   9 |  22 |      1 | regress_rls_dave  | awesome science fiction
  10 |  33 |      2 | regress_rls_dave  | awesome technology book
  11 |  33 |      1 | regress_rls_carol | hoge
(11 rows)

SELECT * FROM category;
 cid |      cname      
-----+-----------------
  11 | novel
  22 | science fiction
  44 | manga
(3 rows)

-- RLS policy does not apply to table owner when RLS disabled.
SET SESSION AUTHORIZATION regress_rls_alice;
SET
SET row_security TO OFF;
SET
SELECT * FROM document order by 1,2,3,4,5;
 did | cid | dlevel |      dauthor      |         dtitle          
-----+-----+--------+-------------------+-------------------------
   1 |  11 |      1 | regress_rls_bob   | my first novel
   2 |  11 |      2 | regress_rls_bob   | my second novel
   3 |  22 |      2 | regress_rls_bob   | my science fiction
   4 |  44 |      1 | regress_rls_bob   | my first manga
   5 |  44 |      2 | regress_rls_bob   | my second manga
   6 |  22 |      1 | regress_rls_carol | great science fiction
   7 |  33 |      2 | regress_rls_carol | great technology book
   8 |  44 |      1 | regress_rls_carol | great manga
   9 |  22 |      1 | regress_rls_dave  | awesome science fiction
  10 |  33 |      2 | regress_rls_dave  | awesome technology book
  11 |  33 |      1 | regress_rls_carol | hoge
(11 rows)

SELECT * FROM category;
 cid |      cname      
-----+-----------------
  11 | novel
  22 | science fiction
  44 | manga
(3 rows)

--
-- Table inheritance and RLS policy
--
SET SESSION AUTHORIZATION regress_rls_alice;
SET
SET row_security TO ON;
SET
CREATE TABLE t1 (a int primary key, b text);
CREATE TABLE
--ALTER TABLE t1 DROP COLUMN junk1;    -- just a disturbing factor
GRANT ALL ON t1 TO public;
GRANT
COPY t1 FROM stdin;
COPY 4
CREATE TABLE t2 (c float) INHERITS (t1);
CREATE TABLE
alter table t2 add primary key (a);
ALTER TABLE
GRANT ALL ON t2 TO public;
GRANT
COPY t2 FROM stdin;
COPY 4
CREATE TABLE t3 (c text, b text, a int) INHERITS (t1);
psql:sql/rowsecurity.sql:257: NOTICE:  merging column "b" with inherited definition
psql:sql/rowsecurity.sql:257: NOTICE:  moving and merging column "a" with inherited definition
DETAIL:  User-specified column moved to the position of the inherited column.
CREATE TABLE
--ALTER TABLE t3 INHERIT t1;
GRANT ALL ON t3 TO public;
GRANT
COPY t3 FROM stdin;
COPY 3
CREATE POLICY p1 ON t1 FOR ALL TO PUBLIC USING (a % 2 = 0); -- be even number
CREATE POLICY
CREATE POLICY p2 ON t2 FOR ALL TO PUBLIC USING (a % 2 = 1); -- be odd number
CREATE POLICY
ALTER TABLE t1 ENABLE ROW LEVEL SECURITY;
ALTER TABLE
ALTER TABLE t2 ENABLE ROW LEVEL SECURITY;
ALTER TABLE
SET SESSION AUTHORIZATION regress_rls_bob;
SET
SELECT * FROM t1;
 a |  b  
---+-----
 2 | bbb
 4 | dad
 2 | bcd
 4 | def
 2 | yyy
(5 rows)

EXPLAIN (COSTS OFF) SELECT * FROM t1;

SELECT * FROM t1 WHERE f_leak(b);
psql:sql/rowsecurity.sql:278: NOTICE:  f_leak => bbb
psql:sql/rowsecurity.sql:278: NOTICE:  f_leak => dad
psql:sql/rowsecurity.sql:278: NOTICE:  f_leak => bcd
psql:sql/rowsecurity.sql:278: NOTICE:  f_leak => def
psql:sql/rowsecurity.sql:278: NOTICE:  f_leak => yyy
 a |  b  
---+-----
 2 | bbb
 4 | dad
 2 | bcd
 4 | def
 2 | yyy
(5 rows)

EXPLAIN (COSTS OFF) SELECT * FROM t1 WHERE f_leak(b);

-- superuser is allowed to bypass RLS checks
RESET SESSION AUTHORIZATION;
RESET
SET row_security TO OFF;
SET
SELECT * FROM t1 WHERE f_leak(b);
psql:sql/rowsecurity.sql:284: NOTICE:  f_leak => aba
psql:sql/rowsecurity.sql:284: NOTICE:  f_leak => bbb
psql:sql/rowsecurity.sql:284: NOTICE:  f_leak => ccc
psql:sql/rowsecurity.sql:284: NOTICE:  f_leak => dad
psql:sql/rowsecurity.sql:284: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:284: NOTICE:  f_leak => bcd
psql:sql/rowsecurity.sql:284: NOTICE:  f_leak => cde
psql:sql/rowsecurity.sql:284: NOTICE:  f_leak => def
psql:sql/rowsecurity.sql:284: NOTICE:  f_leak => xxx
psql:sql/rowsecurity.sql:284: NOTICE:  f_leak => yyy
psql:sql/rowsecurity.sql:284: NOTICE:  f_leak => zzz
 a |  b  
---+-----
 1 | aba
 2 | bbb
 3 | ccc
 4 | dad
 1 | abc
 2 | bcd
 3 | cde
 4 | def
 1 | xxx
 2 | yyy
 3 | zzz
(11 rows)

EXPLAIN (COSTS OFF) SELECT * FROM t1 WHERE f_leak(b);

-- non-superuser with bypass privilege can bypass RLS policy when disabled
SET SESSION AUTHORIZATION regress_rls_exempt_user;
SET
SET row_security TO OFF;
SET
SELECT * FROM t1 WHERE f_leak(b);
psql:sql/rowsecurity.sql:290: NOTICE:  f_leak => aba
psql:sql/rowsecurity.sql:290: NOTICE:  f_leak => bbb
psql:sql/rowsecurity.sql:290: NOTICE:  f_leak => ccc
psql:sql/rowsecurity.sql:290: NOTICE:  f_leak => dad
psql:sql/rowsecurity.sql:290: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:290: NOTICE:  f_leak => bcd
psql:sql/rowsecurity.sql:290: NOTICE:  f_leak => cde
psql:sql/rowsecurity.sql:290: NOTICE:  f_leak => def
psql:sql/rowsecurity.sql:290: NOTICE:  f_leak => xxx
psql:sql/rowsecurity.sql:290: NOTICE:  f_leak => yyy
psql:sql/rowsecurity.sql:290: NOTICE:  f_leak => zzz
 a |  b  
---+-----
 1 | aba
 2 | bbb
 3 | ccc
 4 | dad
 1 | abc
 2 | bcd
 3 | cde
 4 | def
 1 | xxx
 2 | yyy
 3 | zzz
(11 rows)

EXPLAIN (COSTS OFF) SELECT * FROM t1 WHERE f_leak(b);

--
-- Partitioned Tables
--
SET SESSION AUTHORIZATION regress_rls_alice;
SET
CREATE TABLE part_document (
    did         int,
    cid         int,
    dlevel      int not null,
    dauthor     name,
    dtitle      text
) PARTITION BY RANGE (cid);
CREATE TABLE
GRANT ALL ON part_document TO public;
GRANT
-- Create partitions for document categories
CREATE TABLE part_document_fiction PARTITION OF part_document FOR VALUES FROM (11) to (12);
CREATE TABLE
CREATE TABLE part_document_satire PARTITION OF part_document FOR VALUES FROM (55) to (56);
CREATE TABLE
CREATE TABLE part_document_nonfiction PARTITION OF part_document FOR VALUES FROM (99) to (100);
CREATE TABLE
GRANT ALL ON part_document_fiction TO public;
GRANT
GRANT ALL ON part_document_satire TO public;
GRANT
GRANT ALL ON part_document_nonfiction TO public;
GRANT
INSERT INTO part_document VALUES
    ( 1, 11, 1, 'regress_rls_bob', 'my first novel'),
    ( 2, 11, 2, 'regress_rls_bob', 'my second novel'),
    ( 3, 99, 2, 'regress_rls_bob', 'my science textbook'),
    ( 4, 55, 1, 'regress_rls_bob', 'my first satire'),
    ( 5, 99, 2, 'regress_rls_bob', 'my history book'),
    ( 6, 11, 1, 'regress_rls_carol', 'great science fiction'),
    ( 7, 99, 2, 'regress_rls_carol', 'great technology book'),
    ( 8, 55, 2, 'regress_rls_carol', 'great satire'),
    ( 9, 11, 1, 'regress_rls_dave', 'awesome science fiction'),
    (10, 99, 2, 'regress_rls_dave', 'awesome technology book');
INSERT 0 10
ALTER TABLE part_document ENABLE ROW LEVEL SECURITY;
ALTER TABLE
-- Create policy on parent
-- user's security level must be higher than or equal to document's
CREATE POLICY pp1 ON part_document AS PERMISSIVE
    USING (dlevel <= (SELECT seclv FROM uaccount WHERE pguser = current_user));
CREATE POLICY
-- Dave is only allowed to see cid < 55
CREATE POLICY pp1r ON part_document AS RESTRICTIVE TO regress_rls_dave
    USING (cid < 55);
CREATE POLICY
\d+ part_document
                       Partitioned table "regress_rls_schema.part_document"
 Column  |  Type   |    Collation     | Nullable | Default | Storage  | Stats target | Description 
---------+---------+------------------+----------+---------+----------+--------------+-------------
 did     | integer |                  |          |         | plain    |              | 
 cid     | integer |                  |          |         | plain    |              | 
 dlevel  | integer |                  | not null |         | plain    |              | 
 dauthor | name    |                  |          |         | plain    |              | 
 dtitle  | text    | utf8mb4_0900_bin |          |         | extended |              | 
Partition key: RANGE (cid)
Policies:
    POLICY "pp1"
      USING ((dlevel <= ( SELECT uaccount.seclv
   FROM uaccount
  WHERE (uaccount.pguser = CURRENT_USER))))
    POLICY "pp1r" AS RESTRICTIVE
      TO regress_rls_dave
      USING ((cid < 55))
Partitions: part_document_fiction FOR VALUES FROM (11) TO (12),
            part_document_nonfiction FOR VALUES FROM (99) TO (100),
            part_document_satire FOR VALUES FROM (55) TO (56)

SELECT * FROM pg_policies WHERE schemaname = 'regress_rls_schema' AND tablename like '%part_document%' ORDER BY policyname;
     schemaname     |   tablename   | policyname | permissive  |       roles        | cmd |                    qual                    | with_check 
--------------------+---------------+------------+-------------+--------------------+-----+--------------------------------------------+------------
 regress_rls_schema | part_document | pp1        | PERMISSIVE  | {public}           | ALL | (dlevel <= ( SELECT uaccount.seclv        +| 
                    |               |            |             |                    |     |    FROM uaccount                          +| 
                    |               |            |             |                    |     |   WHERE (uaccount.pguser = CURRENT_USER))) | 
 regress_rls_schema | part_document | pp1r       | RESTRICTIVE | {regress_rls_dave} | ALL | (cid < 55)                                 | 
(2 rows)

-- viewpoint from regress_rls_bob
SET SESSION AUTHORIZATION regress_rls_bob;
SET
SET row_security TO ON;
SET
SELECT * FROM part_document WHERE f_leak(dtitle) ORDER BY did;
psql:sql/rowsecurity.sql:345: NOTICE:  f_leak => my first novel
psql:sql/rowsecurity.sql:345: NOTICE:  f_leak => great science fiction
psql:sql/rowsecurity.sql:345: NOTICE:  f_leak => awesome science fiction
psql:sql/rowsecurity.sql:345: NOTICE:  f_leak => my first satire
 did | cid | dlevel |      dauthor      |         dtitle          
-----+-----+--------+-------------------+-------------------------
   1 |  11 |      1 | regress_rls_bob   | my first novel
   4 |  55 |      1 | regress_rls_bob   | my first satire
   6 |  11 |      1 | regress_rls_carol | great science fiction
   9 |  11 |      1 | regress_rls_dave  | awesome science fiction
(4 rows)

EXPLAIN (COSTS OFF) SELECT * FROM part_document WHERE f_leak(dtitle);

-- viewpoint from regress_rls_carol
SET SESSION AUTHORIZATION regress_rls_carol;
SET
SELECT * FROM part_document WHERE f_leak(dtitle) ORDER BY did;
psql:sql/rowsecurity.sql:350: NOTICE:  f_leak => my first novel
psql:sql/rowsecurity.sql:350: NOTICE:  f_leak => my second novel
psql:sql/rowsecurity.sql:350: NOTICE:  f_leak => great science fiction
psql:sql/rowsecurity.sql:350: NOTICE:  f_leak => awesome science fiction
psql:sql/rowsecurity.sql:350: NOTICE:  f_leak => my first satire
psql:sql/rowsecurity.sql:350: NOTICE:  f_leak => great satire
psql:sql/rowsecurity.sql:350: NOTICE:  f_leak => my science textbook
psql:sql/rowsecurity.sql:350: NOTICE:  f_leak => my history book
psql:sql/rowsecurity.sql:350: NOTICE:  f_leak => great technology book
psql:sql/rowsecurity.sql:350: NOTICE:  f_leak => awesome technology book
 did | cid | dlevel |      dauthor      |         dtitle          
-----+-----+--------+-------------------+-------------------------
   1 |  11 |      1 | regress_rls_bob   | my first novel
   2 |  11 |      2 | regress_rls_bob   | my second novel
   3 |  99 |      2 | regress_rls_bob   | my science textbook
   4 |  55 |      1 | regress_rls_bob   | my first satire
   5 |  99 |      2 | regress_rls_bob   | my history book
   6 |  11 |      1 | regress_rls_carol | great science fiction
   7 |  99 |      2 | regress_rls_carol | great technology book
   8 |  55 |      2 | regress_rls_carol | great satire
   9 |  11 |      1 | regress_rls_dave  | awesome science fiction
  10 |  99 |      2 | regress_rls_dave  | awesome technology book
(10 rows)

EXPLAIN (COSTS OFF) SELECT * FROM part_document WHERE f_leak(dtitle);

-- viewpoint from regress_rls_dave
SET SESSION AUTHORIZATION regress_rls_dave;
SET
SELECT * FROM part_document WHERE f_leak(dtitle) ORDER BY did;
psql:sql/rowsecurity.sql:355: NOTICE:  f_leak => my first novel
psql:sql/rowsecurity.sql:355: NOTICE:  f_leak => my second novel
psql:sql/rowsecurity.sql:355: NOTICE:  f_leak => great science fiction
psql:sql/rowsecurity.sql:355: NOTICE:  f_leak => awesome science fiction
 did | cid | dlevel |      dauthor      |         dtitle          
-----+-----+--------+-------------------+-------------------------
   1 |  11 |      1 | regress_rls_bob   | my first novel
   2 |  11 |      2 | regress_rls_bob   | my second novel
   6 |  11 |      1 | regress_rls_carol | great science fiction
   9 |  11 |      1 | regress_rls_dave  | awesome science fiction
(4 rows)

EXPLAIN (COSTS OFF) SELECT * FROM part_document WHERE f_leak(dtitle);

-- pp1 ERROR
INSERT INTO part_document VALUES (100, 11, 5, 'regress_rls_dave', 'testing pp1'); -- fail
psql:sql/rowsecurity.sql:359: ERROR:  new row violates row-level security policy for table "part_document"
-- pp1r ERROR
INSERT INTO part_document VALUES (100, 99, 1, 'regress_rls_dave', 'testing pp1r'); -- fail
psql:sql/rowsecurity.sql:361: ERROR:  new row violates row-level security policy "pp1r" for table "part_document"
-- Show that RLS policy does not apply for direct inserts to children
-- This should fail with RLS POLICY pp1r violation.
INSERT INTO part_document VALUES (100, 55, 1, 'regress_rls_dave', 'testing RLS with partitions'); -- fail
psql:sql/rowsecurity.sql:365: ERROR:  new row violates row-level security policy "pp1r" for table "part_document"
-- But this should succeed.
INSERT INTO part_document_satire VALUES (100, 55, 1, 'regress_rls_dave', 'testing RLS with partitions'); -- success
INSERT 0 1
-- We still cannot see the row using the parent
SELECT * FROM part_document WHERE f_leak(dtitle) ORDER BY did;
psql:sql/rowsecurity.sql:369: NOTICE:  f_leak => my first novel
psql:sql/rowsecurity.sql:369: NOTICE:  f_leak => my second novel
psql:sql/rowsecurity.sql:369: NOTICE:  f_leak => great science fiction
psql:sql/rowsecurity.sql:369: NOTICE:  f_leak => awesome science fiction
 did | cid | dlevel |      dauthor      |         dtitle          
-----+-----+--------+-------------------+-------------------------
   1 |  11 |      1 | regress_rls_bob   | my first novel
   2 |  11 |      2 | regress_rls_bob   | my second novel
   6 |  11 |      1 | regress_rls_carol | great science fiction
   9 |  11 |      1 | regress_rls_dave  | awesome science fiction
(4 rows)

-- But we can if we look directly
SELECT * FROM part_document_satire WHERE f_leak(dtitle) ORDER BY did;
psql:sql/rowsecurity.sql:371: NOTICE:  f_leak => my first satire
psql:sql/rowsecurity.sql:371: NOTICE:  f_leak => great satire
psql:sql/rowsecurity.sql:371: NOTICE:  f_leak => testing RLS with partitions
 did | cid | dlevel |      dauthor      |           dtitle            
-----+-----+--------+-------------------+-----------------------------
   4 |  55 |      1 | regress_rls_bob   | my first satire
   8 |  55 |      2 | regress_rls_carol | great satire
 100 |  55 |      1 | regress_rls_dave  | testing RLS with partitions
(3 rows)

-- Turn on RLS and create policy on child to show RLS is checked before constraints
SET SESSION AUTHORIZATION regress_rls_alice;
SET
ALTER TABLE part_document_satire ENABLE ROW LEVEL SECURITY;
ALTER TABLE
CREATE POLICY pp3 ON part_document_satire AS RESTRICTIVE
    USING (cid < 55);
CREATE POLICY
-- This should fail with RLS violation now.
SET SESSION AUTHORIZATION regress_rls_dave;
SET
INSERT INTO part_document_satire VALUES (101, 55, 1, 'regress_rls_dave', 'testing RLS with partitions'); -- fail
psql:sql/rowsecurity.sql:380: ERROR:  new row violates row-level security policy for table "part_document_satire"
-- And now we cannot see directly into the partition either, due to RLS
SELECT * FROM part_document_satire WHERE f_leak(dtitle) ORDER BY did;
 did | cid | dlevel | dauthor | dtitle 
-----+-----+--------+---------+--------
(0 rows)

-- The parent looks same as before
-- viewpoint from regress_rls_dave
SELECT * FROM part_document WHERE f_leak(dtitle) ORDER BY did;
psql:sql/rowsecurity.sql:385: NOTICE:  f_leak => my first novel
psql:sql/rowsecurity.sql:385: NOTICE:  f_leak => my second novel
psql:sql/rowsecurity.sql:385: NOTICE:  f_leak => great science fiction
psql:sql/rowsecurity.sql:385: NOTICE:  f_leak => awesome science fiction
 did | cid | dlevel |      dauthor      |         dtitle          
-----+-----+--------+-------------------+-------------------------
   1 |  11 |      1 | regress_rls_bob   | my first novel
   2 |  11 |      2 | regress_rls_bob   | my second novel
   6 |  11 |      1 | regress_rls_carol | great science fiction
   9 |  11 |      1 | regress_rls_dave  | awesome science fiction
(4 rows)

EXPLAIN (COSTS OFF) SELECT * FROM part_document WHERE f_leak(dtitle);

-- viewpoint from regress_rls_carol
SET SESSION AUTHORIZATION regress_rls_carol;
SET
SELECT * FROM part_document WHERE f_leak(dtitle) ORDER BY did;
psql:sql/rowsecurity.sql:390: NOTICE:  f_leak => my first novel
psql:sql/rowsecurity.sql:390: NOTICE:  f_leak => my second novel
psql:sql/rowsecurity.sql:390: NOTICE:  f_leak => great science fiction
psql:sql/rowsecurity.sql:390: NOTICE:  f_leak => awesome science fiction
psql:sql/rowsecurity.sql:390: NOTICE:  f_leak => my first satire
psql:sql/rowsecurity.sql:390: NOTICE:  f_leak => great satire
psql:sql/rowsecurity.sql:390: NOTICE:  f_leak => testing RLS with partitions
psql:sql/rowsecurity.sql:390: NOTICE:  f_leak => my science textbook
psql:sql/rowsecurity.sql:390: NOTICE:  f_leak => my history book
psql:sql/rowsecurity.sql:390: NOTICE:  f_leak => great technology book
psql:sql/rowsecurity.sql:390: NOTICE:  f_leak => awesome technology book
 did | cid | dlevel |      dauthor      |           dtitle            
-----+-----+--------+-------------------+-----------------------------
   1 |  11 |      1 | regress_rls_bob   | my first novel
   2 |  11 |      2 | regress_rls_bob   | my second novel
   3 |  99 |      2 | regress_rls_bob   | my science textbook
   4 |  55 |      1 | regress_rls_bob   | my first satire
   5 |  99 |      2 | regress_rls_bob   | my history book
   6 |  11 |      1 | regress_rls_carol | great science fiction
   7 |  99 |      2 | regress_rls_carol | great technology book
   8 |  55 |      2 | regress_rls_carol | great satire
   9 |  11 |      1 | regress_rls_dave  | awesome science fiction
  10 |  99 |      2 | regress_rls_dave  | awesome technology book
 100 |  55 |      1 | regress_rls_dave  | testing RLS with partitions
(11 rows)

EXPLAIN (COSTS OFF) SELECT * FROM part_document WHERE f_leak(dtitle);

-- only owner can change policies
ALTER POLICY pp1 ON part_document USING (true);    --fail
psql:sql/rowsecurity.sql:394: ERROR:  must be owner of table part_document
DROP POLICY pp1 ON part_document;                  --fail
psql:sql/rowsecurity.sql:395: ERROR:  must be owner of relation part_document
SET SESSION AUTHORIZATION regress_rls_alice;
SET
ALTER POLICY pp1 ON part_document USING (dauthor = current_user);
ALTER POLICY
-- viewpoint from regress_rls_bob again
SET SESSION AUTHORIZATION regress_rls_bob;
SET
SELECT * FROM part_document WHERE f_leak(dtitle) ORDER BY did;
psql:sql/rowsecurity.sql:401: NOTICE:  f_leak => my first novel
psql:sql/rowsecurity.sql:401: NOTICE:  f_leak => my second novel
psql:sql/rowsecurity.sql:401: NOTICE:  f_leak => my first satire
psql:sql/rowsecurity.sql:401: NOTICE:  f_leak => my science textbook
psql:sql/rowsecurity.sql:401: NOTICE:  f_leak => my history book
 did | cid | dlevel |     dauthor     |       dtitle        
-----+-----+--------+-----------------+---------------------
   1 |  11 |      1 | regress_rls_bob | my first novel
   2 |  11 |      2 | regress_rls_bob | my second novel
   3 |  99 |      2 | regress_rls_bob | my science textbook
   4 |  55 |      1 | regress_rls_bob | my first satire
   5 |  99 |      2 | regress_rls_bob | my history book
(5 rows)

-- viewpoint from rls_regres_carol again
SET SESSION AUTHORIZATION regress_rls_carol;
SET
SELECT * FROM part_document WHERE f_leak(dtitle) ORDER BY did;
psql:sql/rowsecurity.sql:405: NOTICE:  f_leak => great science fiction
psql:sql/rowsecurity.sql:405: NOTICE:  f_leak => great satire
psql:sql/rowsecurity.sql:405: NOTICE:  f_leak => great technology book
 did | cid | dlevel |      dauthor      |        dtitle         
-----+-----+--------+-------------------+-----------------------
   6 |  11 |      1 | regress_rls_carol | great science fiction
   7 |  99 |      2 | regress_rls_carol | great technology book
   8 |  55 |      2 | regress_rls_carol | great satire
(3 rows)

EXPLAIN (COSTS OFF) SELECT * FROM part_document WHERE f_leak(dtitle);

-- database superuser does bypass RLS policy when enabled
RESET SESSION AUTHORIZATION;
RESET
SET row_security TO ON;
SET
--SELECT * FROM part_document ORDER BY did;
SELECT * FROM part_document ORDER BY did,cid,dlevel,dauthor,dtitle;
 did | cid | dlevel |      dauthor      |           dtitle            
-----+-----+--------+-------------------+-----------------------------
   1 |  11 |      1 | regress_rls_bob   | my first novel
   2 |  11 |      2 | regress_rls_bob   | my second novel
   3 |  99 |      2 | regress_rls_bob   | my science textbook
   4 |  55 |      1 | regress_rls_bob   | my first satire
   5 |  99 |      2 | regress_rls_bob   | my history book
   6 |  11 |      1 | regress_rls_carol | great science fiction
   7 |  99 |      2 | regress_rls_carol | great technology book
   8 |  55 |      2 | regress_rls_carol | great satire
   9 |  11 |      1 | regress_rls_dave  | awesome science fiction
  10 |  99 |      2 | regress_rls_dave  | awesome technology book
 100 |  55 |      1 | regress_rls_dave  | testing RLS with partitions
(11 rows)

SELECT * FROM part_document_satire ORDER by did;
 did | cid | dlevel |      dauthor      |           dtitle            
-----+-----+--------+-------------------+-----------------------------
   4 |  55 |      1 | regress_rls_bob   | my first satire
   8 |  55 |      2 | regress_rls_carol | great satire
 100 |  55 |      1 | regress_rls_dave  | testing RLS with partitions
(3 rows)

-- database non-superuser with bypass privilege can bypass RLS policy when disabled
SET SESSION AUTHORIZATION regress_rls_exempt_user;
SET
SET row_security TO OFF;
SET
--SELECT * FROM part_document ORDER BY did;
SELECT * FROM part_document ORDER BY did,cid,dlevel,dauthor,dtitle;
 did | cid | dlevel |      dauthor      |           dtitle            
-----+-----+--------+-------------------+-----------------------------
   1 |  11 |      1 | regress_rls_bob   | my first novel
   2 |  11 |      2 | regress_rls_bob   | my second novel
   3 |  99 |      2 | regress_rls_bob   | my science textbook
   4 |  55 |      1 | regress_rls_bob   | my first satire
   5 |  99 |      2 | regress_rls_bob   | my history book
   6 |  11 |      1 | regress_rls_carol | great science fiction
   7 |  99 |      2 | regress_rls_carol | great technology book
   8 |  55 |      2 | regress_rls_carol | great satire
   9 |  11 |      1 | regress_rls_dave  | awesome science fiction
  10 |  99 |      2 | regress_rls_dave  | awesome technology book
 100 |  55 |      1 | regress_rls_dave  | testing RLS with partitions
(11 rows)

SELECT * FROM part_document_satire ORDER by did;
 did | cid | dlevel |      dauthor      |           dtitle            
-----+-----+--------+-------------------+-----------------------------
   4 |  55 |      1 | regress_rls_bob   | my first satire
   8 |  55 |      2 | regress_rls_carol | great satire
 100 |  55 |      1 | regress_rls_dave  | testing RLS with partitions
(3 rows)

-- RLS policy does not apply to table owner when RLS enabled.
SET SESSION AUTHORIZATION regress_rls_alice;
SET
SET row_security TO ON;
SET
--SELECT * FROM part_document ORDER by did;
SELECT * FROM part_document ORDER by did,cid,dlevel,dauthor,dtitle;
 did | cid | dlevel |      dauthor      |           dtitle            
-----+-----+--------+-------------------+-----------------------------
   1 |  11 |      1 | regress_rls_bob   | my first novel
   2 |  11 |      2 | regress_rls_bob   | my second novel
   3 |  99 |      2 | regress_rls_bob   | my science textbook
   4 |  55 |      1 | regress_rls_bob   | my first satire
   5 |  99 |      2 | regress_rls_bob   | my history book
   6 |  11 |      1 | regress_rls_carol | great science fiction
   7 |  99 |      2 | regress_rls_carol | great technology book
   8 |  55 |      2 | regress_rls_carol | great satire
   9 |  11 |      1 | regress_rls_dave  | awesome science fiction
  10 |  99 |      2 | regress_rls_dave  | awesome technology book
 100 |  55 |      1 | regress_rls_dave  | testing RLS with partitions
(11 rows)

SELECT * FROM part_document_satire ORDER by did;
 did | cid | dlevel |      dauthor      |           dtitle            
-----+-----+--------+-------------------+-----------------------------
   4 |  55 |      1 | regress_rls_bob   | my first satire
   8 |  55 |      2 | regress_rls_carol | great satire
 100 |  55 |      1 | regress_rls_dave  | testing RLS with partitions
(3 rows)

-- When RLS disabled, other users get ERROR.
SET SESSION AUTHORIZATION regress_rls_dave;
SET
SET row_security TO OFF;
SET
--SELECT * FROM part_document ORDER by did;
SELECT * FROM part_document ORDER by did,cid,dlevel,dauthor,dtitle;
psql:sql/rowsecurity.sql:434: ERROR:  query would be affected by row-level security policy for table "part_document"
SELECT * FROM part_document_satire ORDER by did;
psql:sql/rowsecurity.sql:435: ERROR:  query would be affected by row-level security policy for table "part_document_satire"
-- Check behavior with a policy that uses a SubPlan not an InitPlan.
SET SESSION AUTHORIZATION regress_rls_alice;
SET
SET row_security TO ON;
SET
CREATE POLICY pp3 ON part_document AS RESTRICTIVE
    USING ((SELECT dlevel <= seclv FROM uaccount WHERE pguser = current_user));
CREATE POLICY
SET SESSION AUTHORIZATION regress_rls_carol;
SET
INSERT INTO part_document VALUES (100, 11, 5, 'regress_rls_carol', 'testing pp3'); -- fail
psql:sql/rowsecurity.sql:444: ERROR:  new row violates row-level security policy "pp3" for table "part_document"
----- Dependencies -----
SET SESSION AUTHORIZATION regress_rls_alice;
SET
SET row_security TO ON;
SET
CREATE TABLE dependee (x integer, y integer);
CREATE TABLE
CREATE TABLE dependent (x integer, y integer);
CREATE TABLE
CREATE POLICY d1 ON dependent FOR ALL
    TO PUBLIC
    USING (x = (SELECT d.x FROM dependee d WHERE d.y = y));
CREATE POLICY
DROP TABLE dependee; -- Should fail without CASCADE due to dependency on row security qual?
psql:sql/rowsecurity.sql:458: ERROR:  cannot drop table dependee because other objects depend on it
DETAIL:  policy d1 on table dependent depends on table dependee
HINT:  Use DROP ... CASCADE to drop the dependent objects too.
DROP TABLE dependee CASCADE;
psql:sql/rowsecurity.sql:460: NOTICE:  drop cascades to policy d1 on table dependent
DROP TABLE
EXPLAIN (COSTS OFF) SELECT * FROM dependent; -- After drop, should be unqualified

-----   RECURSION    ----
--
-- Simple recursion
--
SET SESSION AUTHORIZATION regress_rls_alice;
SET
CREATE TABLE rec1 (x integer, y integer);
CREATE TABLE
CREATE POLICY r1 ON rec1 USING (x = (SELECT r.x FROM rec1 r WHERE y = r.y));
CREATE POLICY
ALTER TABLE rec1 ENABLE ROW LEVEL SECURITY;
ALTER TABLE
SET SESSION AUTHORIZATION regress_rls_bob;
SET
SELECT * FROM rec1; -- fail, direct recursion
psql:sql/rowsecurity.sql:475: ERROR:  infinite recursion detected in policy for relation "rec1"
--
-- Mutual recursion
--
SET SESSION AUTHORIZATION regress_rls_alice;
SET
CREATE TABLE rec2 (a integer, b integer);
CREATE TABLE
ALTER POLICY r1 ON rec1 USING (x = (SELECT a FROM rec2 WHERE b = y));
ALTER POLICY
CREATE POLICY r2 ON rec2 USING (a = (SELECT x FROM rec1 WHERE y = b));
CREATE POLICY
ALTER TABLE rec2 ENABLE ROW LEVEL SECURITY;
ALTER TABLE
SET SESSION AUTHORIZATION regress_rls_bob;
SET
SELECT * FROM rec1;    -- fail, mutual recursion
psql:sql/rowsecurity.sql:489: ERROR:  infinite recursion detected in policy for relation "rec1"
--
-- Mutual recursion via views
--
SET SESSION AUTHORIZATION regress_rls_bob;
SET
CREATE VIEW rec1v AS SELECT * FROM rec1;
CREATE VIEW
CREATE VIEW rec2v AS SELECT * FROM rec2;
CREATE VIEW
SET SESSION AUTHORIZATION regress_rls_alice;
SET
ALTER POLICY r1 ON rec1 USING (x = (SELECT a FROM rec2v WHERE b = y));
ALTER POLICY
ALTER POLICY r2 ON rec2 USING (a = (SELECT x FROM rec1v WHERE y = b));
ALTER POLICY
SET SESSION AUTHORIZATION regress_rls_bob;
SET
SELECT * FROM rec1;    -- fail, mutual recursion via views
psql:sql/rowsecurity.sql:502: ERROR:  infinite recursion detected in policy for relation "rec1"
--
-- Mutual recursion via .s.b views
--
SET SESSION AUTHORIZATION regress_rls_bob;
SET
\set VERBOSITY terse \\ -- suppress cascade details
DROP VIEW rec1v, rec2v CASCADE;
psql:sql/rowsecurity.sql:510: NOTICE:  drop cascades to 2 other objects
DROP VIEW
\set VERBOSITY default
CREATE VIEW rec1v WITH (security_barrier) AS SELECT * FROM rec1;
CREATE VIEW
CREATE VIEW rec2v WITH (security_barrier) AS SELECT * FROM rec2;
CREATE VIEW
SET SESSION AUTHORIZATION regress_rls_alice;
SET
CREATE POLICY r1 ON rec1 USING (x = (SELECT a FROM rec2v WHERE b = y));
CREATE POLICY
CREATE POLICY r2 ON rec2 USING (a = (SELECT x FROM rec1v WHERE y = b));
CREATE POLICY
SET SESSION AUTHORIZATION regress_rls_bob;
SET
SELECT * FROM rec1;    -- fail, mutual recursion via s.b. views
psql:sql/rowsecurity.sql:520: ERROR:  infinite recursion detected in policy for relation "rec1"
--
-- recursive RLS and VIEWs in policy
--
SET SESSION AUTHORIZATION regress_rls_alice;
SET
CREATE TABLE s1 (a int, b text);
CREATE TABLE
INSERT INTO s1 (SELECT x, md5(x::text) FROM generate_series(-10,10) x);
INSERT 0 21
CREATE TABLE s2 (x int, y text);
CREATE TABLE
INSERT INTO s2 (SELECT x, md5(x::text) FROM generate_series(-6,6) x);
INSERT 0 13
GRANT SELECT ON s1, s2 TO regress_rls_bob;
GRANT
CREATE POLICY p1 ON s1 USING (a in (select x from s2 where y like '%2f%'));
CREATE POLICY
CREATE POLICY p2 ON s2 USING (x in (select a from s1 where b like '%22%'));
CREATE POLICY
CREATE POLICY p3 ON s1 FOR INSERT WITH CHECK (a = (SELECT a FROM s1));
CREATE POLICY
ALTER TABLE s1 ENABLE ROW LEVEL SECURITY;
ALTER TABLE
ALTER TABLE s2 ENABLE ROW LEVEL SECURITY;
ALTER TABLE
SET SESSION AUTHORIZATION regress_rls_bob;
SET
CREATE VIEW v2 AS SELECT * FROM s2 WHERE y like '%af%';
CREATE VIEW
SELECT * FROM s1 WHERE f_leak(b); -- fail (infinite recursion)
psql:sql/rowsecurity.sql:543: ERROR:  infinite recursion detected in policy for relation "s1"
INSERT INTO s1 VALUES (1, 'foo'); -- fail (infinite recursion)
psql:sql/rowsecurity.sql:545: ERROR:  infinite recursion detected in policy for relation "s1"
SET SESSION AUTHORIZATION regress_rls_alice;
SET
DROP POLICY p3 on s1;
DROP POLICY
ALTER POLICY p2 ON s2 USING (x % 2 = 0);
ALTER POLICY
SET SESSION AUTHORIZATION regress_rls_bob;
SET
SELECT * FROM s1 WHERE f_leak(b);	-- OK
psql:sql/rowsecurity.sql:552: NOTICE:  f_leak => c81e728d9d4c2f636f067f89cc14862c
psql:sql/rowsecurity.sql:552: NOTICE:  f_leak => a87ff679a2f3e71d9181a67b7542122c
 a |                b                 
---+----------------------------------
 2 | c81e728d9d4c2f636f067f89cc14862c
 4 | a87ff679a2f3e71d9181a67b7542122c
(2 rows)

EXPLAIN (COSTS OFF) SELECT * FROM only s1 WHERE f_leak(b);

SET SESSION AUTHORIZATION regress_rls_alice;
SET
ALTER POLICY p1 ON s1 USING (a in (select x from v2)); -- using VIEW in RLS policy
ALTER POLICY
SET SESSION AUTHORIZATION regress_rls_bob;
SET
SELECT * FROM s1 WHERE f_leak(b);	-- OK
psql:sql/rowsecurity.sql:558: NOTICE:  f_leak => 0267aaf632e87a63288a08331f22c7c3
psql:sql/rowsecurity.sql:558: NOTICE:  f_leak => 1679091c5a880faf6fb5e6087eb1b2dc
 a  |                b                 
----+----------------------------------
 -4 | 0267aaf632e87a63288a08331f22c7c3
  6 | 1679091c5a880faf6fb5e6087eb1b2dc
(2 rows)

EXPLAIN (COSTS OFF) SELECT * FROM s1 WHERE f_leak(b);

SELECT (SELECT x FROM s1 LIMIT 1) xx, * FROM s2 WHERE y like '%28%';
 xx | x  |                y                 
----+----+----------------------------------
 -6 | -6 | 596a3d04481816330f07e4f97510c28f
 -4 | -4 | 0267aaf632e87a63288a08331f22c7c3
  2 |  2 | c81e728d9d4c2f636f067f89cc14862c
(3 rows)

EXPLAIN (COSTS OFF) SELECT (SELECT x FROM s1 LIMIT 1) xx, * FROM s2 WHERE y like '%28%';

SET SESSION AUTHORIZATION regress_rls_alice;
SET
ALTER POLICY p2 ON s2 USING (x in (select a from s1 where b like '%d2%'));
ALTER POLICY
SET SESSION AUTHORIZATION regress_rls_bob;
SET
SELECT * FROM s1 WHERE f_leak(b);	-- fail (infinite recursion via view)
psql:sql/rowsecurity.sql:567: ERROR:  infinite recursion detected in policy for relation "s1"
-- prepared statement with regress_rls_alice privilege
PREPARE p1(int) AS SELECT * FROM t1 WHERE a <= $1;
PREPARE
EXECUTE p1(2);
 a |  b  
---+-----
 2 | bbb
 2 | bcd
 2 | yyy
(3 rows)

EXPLAIN (COSTS OFF) EXECUTE p1(2);

-- superuser is allowed to bypass RLS checks
RESET SESSION AUTHORIZATION;
RESET
SET row_security TO OFF;
SET
SELECT * FROM t1 WHERE f_leak(b);
psql:sql/rowsecurity.sql:577: NOTICE:  f_leak => aba
psql:sql/rowsecurity.sql:577: NOTICE:  f_leak => bbb
psql:sql/rowsecurity.sql:577: NOTICE:  f_leak => ccc
psql:sql/rowsecurity.sql:577: NOTICE:  f_leak => dad
psql:sql/rowsecurity.sql:577: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:577: NOTICE:  f_leak => bcd
psql:sql/rowsecurity.sql:577: NOTICE:  f_leak => cde
psql:sql/rowsecurity.sql:577: NOTICE:  f_leak => def
psql:sql/rowsecurity.sql:577: NOTICE:  f_leak => xxx
psql:sql/rowsecurity.sql:577: NOTICE:  f_leak => yyy
psql:sql/rowsecurity.sql:577: NOTICE:  f_leak => zzz
 a |  b  
---+-----
 1 | aba
 2 | bbb
 3 | ccc
 4 | dad
 1 | abc
 2 | bcd
 3 | cde
 4 | def
 1 | xxx
 2 | yyy
 3 | zzz
(11 rows)

EXPLAIN (COSTS OFF) SELECT * FROM t1 WHERE f_leak(b);

-- plan cache should be invalidated
EXECUTE p1(2);
 a |  b  
---+-----
 1 | aba
 2 | bbb
 1 | abc
 2 | bcd
 1 | xxx
 2 | yyy
(6 rows)

EXPLAIN (COSTS OFF) EXECUTE p1(2);

PREPARE p2(int) AS SELECT * FROM t1 WHERE a = $1;
PREPARE
EXECUTE p2(2);
 a |  b  
---+-----
 2 | bbb
 2 | bcd
 2 | yyy
(3 rows)

EXPLAIN (COSTS OFF) EXECUTE p2(2);

-- also, case when privilege switch from superuser
SET SESSION AUTHORIZATION regress_rls_bob;
SET
SET row_security TO ON;
SET
EXECUTE p2(2);
 a |  b  
---+-----
 2 | bbb
 2 | bcd
 2 | yyy
(3 rows)

EXPLAIN (COSTS OFF) EXECUTE p2(2);

--
-- UPDATE / DELETE and Row-level security
--
SET SESSION AUTHORIZATION regress_rls_bob;
SET
EXPLAIN (COSTS OFF) UPDATE t1 SET b = b || b WHERE f_leak(b);
psql:sql/rowsecurity.sql:599: ERROR:  Kunlun-db: The result relation requires a primary key for such update/delete.
UPDATE t1 SET b = b || b WHERE f_leak(b);
psql:sql/rowsecurity.sql:600: ERROR:  Kunlun-db: The result relation requires a primary key for such update/delete.
EXPLAIN (COSTS OFF) UPDATE only t1 SET b = b || '_updt' WHERE f_leak(b);

UPDATE only t1 SET b = b || '_updt' WHERE f_leak(b);
psql:sql/rowsecurity.sql:603: NOTICE:  f_leak => bbb
psql:sql/rowsecurity.sql:603: NOTICE:  f_leak => dad
UPDATE 2
-- returning clause with system column
UPDATE only t1 SET b = b WHERE f_leak(b) RETURNING oid, *, t1;
psql:sql/rowsecurity.sql:606: ERROR:  column "oid" does not exist
LINE 1: ...PDATE only t1 SET b = b WHERE f_leak(b) RETURNING oid, *, t1...
                                                             ^
UPDATE t1 SET b = b WHERE f_leak(b) RETURNING *;
psql:sql/rowsecurity.sql:607: ERROR:  Kunlun-db: The result relation requires a primary key for such update/delete.
UPDATE t1 SET b = b WHERE f_leak(b) RETURNING oid, *, t1;
psql:sql/rowsecurity.sql:608: ERROR:  column "oid" does not exist
LINE 1: UPDATE t1 SET b = b WHERE f_leak(b) RETURNING oid, *, t1;
                                                      ^
-- updates with from clause
EXPLAIN (COSTS OFF) UPDATE t2 SET b=t2.b FROM t3
WHERE t2.a = 3 and t3.a = 2 AND f_leak(t2.b) AND f_leak(t3.b);

UPDATE t2 SET b=t2.b FROM t3
WHERE t2.a = 3 and t3.a = 2 AND f_leak(t2.b) AND f_leak(t3.b);
psql:sql/rowsecurity.sql:615: NOTICE:  f_leak => cde
psql:sql/rowsecurity.sql:615: NOTICE:  f_leak => yyy
UPDATE 1
EXPLAIN (COSTS OFF) UPDATE t1 SET b=t1.b FROM t2
WHERE t1.a = 3 and t2.a = 3 AND f_leak(t1.b) AND f_leak(t2.b);
psql:sql/rowsecurity.sql:618: ERROR:  Kunlun-db: The result relation requires a primary key for such update/delete.
UPDATE t1 SET b=t1.b FROM t2
WHERE t1.a = 3 and t2.a = 3 AND f_leak(t1.b) AND f_leak(t2.b);
psql:sql/rowsecurity.sql:621: ERROR:  Kunlun-db: The result relation requires a primary key for such update/delete.
EXPLAIN (COSTS OFF) UPDATE t2 SET b=t2.b FROM t1
WHERE t1.a = 3 and t2.a = 3 AND f_leak(t1.b) AND f_leak(t2.b);

UPDATE t2 SET b=t2.b FROM t1
WHERE t1.a = 3 and t2.a = 3 AND f_leak(t1.b) AND f_leak(t2.b);
psql:sql/rowsecurity.sql:627: NOTICE:  f_leak => cde
UPDATE 0
-- updates with from clause self join
EXPLAIN (COSTS OFF) UPDATE t2 t2_1 SET b = t2_2.b FROM t2 t2_2
WHERE t2_1.a = 3 AND t2_2.a = t2_1.a AND t2_2.b = t2_1.b
AND f_leak(t2_1.b) AND f_leak(t2_2.b) RETURNING *, t2_1, t2_2;

UPDATE t2 t2_1 SET b = t2_2.b FROM t2 t2_2
WHERE t2_1.a = 3 AND t2_2.a = t2_1.a AND t2_2.b = t2_1.b
AND f_leak(t2_1.b) AND f_leak(t2_2.b) RETURNING *, t2_1, t2_2;
psql:sql/rowsecurity.sql:636: NOTICE:  f_leak => cde
psql:sql/rowsecurity.sql:636: NOTICE:  f_leak => cde
 a |  b  |  c  | a |  b  |  c  |    t2_1     |    t2_2     
---+-----+-----+---+-----+-----+-------------+-------------
 3 | cde | 3.3 | 3 | cde | 3.3 | (3,cde,3.3) | (3,cde,3.3)
(1 row)

UPDATE 1
EXPLAIN (COSTS OFF) UPDATE t1 t1_1 SET b = t1_2.b FROM t1 t1_2
WHERE t1_1.a = 4 AND t1_2.a = t1_1.a AND t1_2.b = t1_1.b
AND f_leak(t1_1.b) AND f_leak(t1_2.b) RETURNING *, t1_1, t1_2;
psql:sql/rowsecurity.sql:640: ERROR:  Kunlun-db: The result relation requires a primary key for such update/delete.
UPDATE t1 t1_1 SET b = t1_2.b FROM t1 t1_2
WHERE t1_1.a = 4 AND t1_2.a = t1_1.a AND t1_2.b = t1_1.b
AND f_leak(t1_1.b) AND f_leak(t1_2.b) RETURNING *, t1_1, t1_2;
psql:sql/rowsecurity.sql:644: ERROR:  Kunlun-db: The result relation requires a primary key for such update/delete.
RESET SESSION AUTHORIZATION;
RESET
SET row_security TO OFF;
SET
SELECT * FROM t1 ORDER BY a,b;
 a |    b     
---+----------
 1 | aba
 1 | abc
 1 | xxx
 2 | bbb_updt
 2 | bcd
 2 | yyy
 3 | ccc
 3 | cde
 3 | zzz
 4 | dad_updt
 4 | def
(11 rows)

SET SESSION AUTHORIZATION regress_rls_bob;
SET
SET row_security TO ON;
SET
EXPLAIN (COSTS OFF) DELETE FROM only t1 WHERE f_leak(b);

EXPLAIN (COSTS OFF) DELETE FROM t1 WHERE f_leak(b);
psql:sql/rowsecurity.sql:654: ERROR:  Kunlun-db: The result relation requires a primary key for such update/delete.
DELETE FROM only t1 WHERE f_leak(b) RETURNING *, t1;
psql:sql/rowsecurity.sql:656: NOTICE:  f_leak => bbb_updt
psql:sql/rowsecurity.sql:656: NOTICE:  f_leak => dad_updt
 a |    b     |      t1      
---+----------+--------------
 2 | bbb_updt | (2,bbb_updt)
 4 | dad_updt | (4,dad_updt)
(2 rows)

DELETE 2
DELETE FROM t1 WHERE f_leak(b) RETURNING *, t1;
psql:sql/rowsecurity.sql:657: ERROR:  Kunlun-db: The result relation requires a primary key for such update/delete.
--
-- S.b. view on top of Row-level security
--
SET SESSION AUTHORIZATION regress_rls_alice;
SET
CREATE TABLE b1 (a int, b text);
CREATE TABLE
INSERT INTO b1 (SELECT x, md5(x::text) FROM generate_series(-10,10) x);
INSERT 0 21
CREATE POLICY p1 ON b1 USING (a % 2 = 0);
CREATE POLICY
ALTER TABLE b1 ENABLE ROW LEVEL SECURITY;
ALTER TABLE
GRANT ALL ON b1 TO regress_rls_bob;
GRANT
SET SESSION AUTHORIZATION regress_rls_bob;
SET
--CREATE VIEW bv1 WITH (security_barrier) AS SELECT * FROM b1 WHERE a > 0 WITH CHECK OPTION;
--views with CHECK options are not supported
CREATE VIEW bv1 WITH (security_barrier) AS SELECT * FROM b1 WHERE a > 0;
CREATE VIEW
GRANT ALL ON bv1 TO regress_rls_carol;
GRANT
SET SESSION AUTHORIZATION regress_rls_carol;
SET
EXPLAIN (COSTS OFF) SELECT * FROM bv1 WHERE f_leak(b);

SELECT * FROM bv1 WHERE f_leak(b);
psql:sql/rowsecurity.sql:686: NOTICE:  f_leak => c81e728d9d4c2f636f067f89cc14862c
psql:sql/rowsecurity.sql:686: NOTICE:  f_leak => a87ff679a2f3e71d9181a67b7542122c
psql:sql/rowsecurity.sql:686: NOTICE:  f_leak => 1679091c5a880faf6fb5e6087eb1b2dc
psql:sql/rowsecurity.sql:686: NOTICE:  f_leak => c9f0f895fb98ab9159f51fd0297e236d
psql:sql/rowsecurity.sql:686: NOTICE:  f_leak => d3d9446802a44259755d38e6d163e820
 a  |                b                 
----+----------------------------------
  2 | c81e728d9d4c2f636f067f89cc14862c
  4 | a87ff679a2f3e71d9181a67b7542122c
  6 | 1679091c5a880faf6fb5e6087eb1b2dc
  8 | c9f0f895fb98ab9159f51fd0297e236d
 10 | d3d9446802a44259755d38e6d163e820
(5 rows)

INSERT INTO bv1 VALUES (-1, 'xxx'); -- should fail view WCO
psql:sql/rowsecurity.sql:688: ERROR:  new row violates row-level security policy for table "b1"
INSERT INTO bv1 VALUES (11, 'xxx'); -- should fail RLS check
psql:sql/rowsecurity.sql:689: ERROR:  new row violates row-level security policy for table "b1"
INSERT INTO bv1 VALUES (12, 'xxx'); -- ok
INSERT 0 1
EXPLAIN (COSTS OFF) UPDATE bv1 SET b = 'yyy' WHERE a = 4 AND f_leak(b);

UPDATE bv1 SET b = 'yyy' WHERE a = 4 AND f_leak(b);
psql:sql/rowsecurity.sql:693: NOTICE:  f_leak => a87ff679a2f3e71d9181a67b7542122c
psql:sql/rowsecurity.sql:693: ERROR:  could not open relation with OID 0
EXPLAIN (COSTS OFF) DELETE FROM bv1 WHERE a = 6 AND f_leak(b);

DELETE FROM bv1 WHERE a = 6 AND f_leak(b);
psql:sql/rowsecurity.sql:696: NOTICE:  f_leak => 1679091c5a880faf6fb5e6087eb1b2dc
psql:sql/rowsecurity.sql:696: ERROR:  could not open relation with OID 0
SET SESSION AUTHORIZATION regress_rls_alice;
SET
SELECT * FROM b1;
  a  |                b                 
-----+----------------------------------
 -10 | 1b0fd9efa5279c4203b7c70233f86dbf
  -9 | 252e691406782824eec43d7eadc3d256
  -8 | a8d2ec85eaf98407310b72eb73dda247
  -7 | 74687a12d3915d3c4d83f1af7b3683d5
  -6 | 596a3d04481816330f07e4f97510c28f
  -5 | 47c1b025fa18ea96c33fbb6718688c0f
  -4 | 0267aaf632e87a63288a08331f22c7c3
  -3 | b3149ecea4628efd23d2f86e5a723472
  -2 | 5d7b9adcbe1c629ec722529dd12e5129
  -1 | 6bb61e3b7bce0931da574d19d1d82c88
   0 | cfcd208495d565ef66e7dff9f98764da
   1 | c4ca4238a0b923820dcc509a6f75849b
   2 | c81e728d9d4c2f636f067f89cc14862c
   3 | eccbc87e4b5ce2fe28308fd9f2a7baf3
   4 | a87ff679a2f3e71d9181a67b7542122c
   5 | e4da3b7fbbce2345d7772b0674a318d5
   6 | 1679091c5a880faf6fb5e6087eb1b2dc
   7 | 8f14e45fceea167a5a36dedd4bea2543
   8 | c9f0f895fb98ab9159f51fd0297e236d
   9 | 45c48cce2e2d7fbdea1afc51c7c6ad26
  10 | d3d9446802a44259755d38e6d163e820
  12 | xxx
(22 rows)

--
-- INSERT ... ON CONFLICT DO UPDATE and Row-level security
--
SET SESSION AUTHORIZATION regress_rls_alice;
SET
DROP POLICY p1 ON document;
DROP POLICY
DROP POLICY p1r ON document;
DROP POLICY
CREATE POLICY p1 ON document FOR SELECT USING (true);
CREATE POLICY
CREATE POLICY p2 ON document FOR INSERT WITH CHECK (dauthor = current_user);
CREATE POLICY
CREATE POLICY p3 ON document FOR UPDATE
  USING (cid = (SELECT cid from category WHERE cname = 'novel'))
  WITH CHECK (dauthor = current_user);
CREATE POLICY
SET SESSION AUTHORIZATION regress_rls_bob;
SET
-- Exists...
SELECT * FROM document WHERE did = 2;
 did | cid | dlevel |     dauthor     |     dtitle      
-----+-----+--------+-----------------+-----------------
   2 |  11 |      2 | regress_rls_bob | my second novel
(1 row)

-- ...so violates actual WITH CHECK OPTION within UPDATE (not INSERT, since
-- alternative UPDATE path happens to be taken):
INSERT INTO document VALUES (2, (SELECT cid from category WHERE cname = 'novel'), 1, 'regress_rls_carol', 'my first novel')
    ON CONFLICT (did) DO UPDATE SET dtitle = EXCLUDED.dtitle, dauthor = EXCLUDED.dauthor;
psql:sql/rowsecurity.sql:721: ERROR:  new row violates row-level security policy for table "document"
-- Violates USING qual for UPDATE policy p3.
--
-- UPDATE path is taken, but UPDATE fails purely because *existing* row to be
-- updated is not a "novel"/cid 11 (row is not leaked, even though we have
-- SELECT privileges sufficient to see the row in this instance):
INSERT INTO document VALUES (33, 22, 1, 'regress_rls_bob', 'okay science fiction'); -- preparation for next statement
INSERT 0 1
INSERT INTO document VALUES (33, (SELECT cid from category WHERE cname = 'novel'), 1, 'regress_rls_bob', 'Some novel, replaces sci-fi') -- takes UPDATE path
    ON CONFLICT (did) DO UPDATE SET dtitle = EXCLUDED.dtitle;
INSERT 0 2
-- Fine (we UPDATE, since INSERT WCOs and UPDATE security barrier quals + WCOs
-- not violated):
INSERT INTO document VALUES (2, (SELECT cid from category WHERE cname = 'novel'), 1, 'regress_rls_bob', 'my first novel')
    ON CONFLICT (did) DO UPDATE SET dtitle = EXCLUDED.dtitle RETURNING *;
 did | cid | dlevel |     dauthor     |     dtitle     
-----+-----+--------+-----------------+----------------
   2 |  11 |      1 | regress_rls_bob | my first novel
(1 row)

INSERT 0 2
-- Fine (we INSERT, so "cid = 33" ("technology") isn't evaluated):
INSERT INTO document VALUES (78, (SELECT cid from category WHERE cname = 'novel'), 1, 'regress_rls_bob', 'some technology novel')
    ON CONFLICT (did) DO UPDATE SET dtitle = EXCLUDED.dtitle, cid = 33 RETURNING *;
 did | cid | dlevel |     dauthor     |        dtitle         
-----+-----+--------+-----------------+-----------------------
  78 |  11 |      1 | regress_rls_bob | some technology novel
(1 row)

INSERT 0 1
-- Fine (same query, but we UPDATE, so "cid = 33", ("technology") is not the
-- case in respect of *existing* tuple):
INSERT INTO document VALUES (78, (SELECT cid from category WHERE cname = 'novel'), 1, 'regress_rls_bob', 'some technology novel')
    ON CONFLICT (did) DO UPDATE SET dtitle = EXCLUDED.dtitle, cid = 33 RETURNING *;
 did | cid | dlevel |     dauthor     |        dtitle         
-----+-----+--------+-----------------+-----------------------
  78 |  11 |      1 | regress_rls_bob | some technology novel
(1 row)

INSERT 0 2
-- Same query a third time, but now fails due to existing tuple finally not
-- passing quals:
INSERT INTO document VALUES (78, (SELECT cid from category WHERE cname = 'novel'), 1, 'regress_rls_bob', 'some technology novel')
    ON CONFLICT (did) DO UPDATE SET dtitle = EXCLUDED.dtitle, cid = 33 RETURNING *;
 did | cid | dlevel |     dauthor     |        dtitle         
-----+-----+--------+-----------------+-----------------------
  78 |  11 |      1 | regress_rls_bob | some technology novel
(1 row)

INSERT 0 0
-- Don't fail just because INSERT doesn't satisfy WITH CHECK option that
-- originated as a barrier/USING() qual from the UPDATE.  Note that the UPDATE
-- path *isn't* taken, and so UPDATE-related policy does not apply:
INSERT INTO document VALUES (79, (SELECT cid from category WHERE cname = 'technology'), 1, 'regress_rls_bob', 'technology book, can only insert')
    ON CONFLICT (did) DO UPDATE SET dtitle = EXCLUDED.dtitle RETURNING *;
 did | cid | dlevel |     dauthor     |              dtitle              
-----+-----+--------+-----------------+----------------------------------
  79 |     |      1 | regress_rls_bob | technology book, can only insert
(1 row)

INSERT 0 1
-- But this time, the same statement fails, because the UPDATE path is taken,
-- and updating the row just inserted falls afoul of security barrier qual
-- (enforced as WCO) -- what we might have updated target tuple to is
-- irrelevant, in fact.
INSERT INTO document VALUES (79, (SELECT cid from category WHERE cname = 'technology'), 1, 'regress_rls_bob', 'technology book, can only insert')
    ON CONFLICT (did) DO UPDATE SET dtitle = EXCLUDED.dtitle RETURNING *;
 did | cid | dlevel |     dauthor     |              dtitle              
-----+-----+--------+-----------------+----------------------------------
  79 |     |      1 | regress_rls_bob | technology book, can only insert
(1 row)

INSERT 0 0
-- Test default USING qual enforced as WCO
SET SESSION AUTHORIZATION regress_rls_alice;
SET
DROP POLICY p1 ON document;
DROP POLICY
DROP POLICY p2 ON document;
DROP POLICY
DROP POLICY p3 ON document;
DROP POLICY
CREATE POLICY p3_with_default ON document FOR UPDATE
  USING (cid = (SELECT cid from category WHERE cname = 'novel'));
CREATE POLICY
SET SESSION AUTHORIZATION regress_rls_bob;
SET
-- Just because WCO-style enforcement of USING quals occurs with
-- existing/target tuple does not mean that the implementation can be allowed
-- to fail to also enforce this qual against the final tuple appended to
-- relation (since in the absence of an explicit WCO, this is also interpreted
-- as an UPDATE/ALL WCO in general).
--
-- UPDATE path is taken here (fails due to existing tuple).  Note that this is
-- not reported as a "USING expression", because it's an RLS UPDATE check that originated as
-- a USING qual for the purposes of RLS in general, as opposed to an explicit
-- USING qual that is ordinarily a security barrier.  We leave it up to the
-- UPDATE to make this fail:
INSERT INTO document VALUES (79, (SELECT cid from category WHERE cname = 'technology'), 1, 'regress_rls_bob', 'technology book, can only insert')
    ON CONFLICT (did) DO UPDATE SET dtitle = EXCLUDED.dtitle RETURNING *;
psql:sql/rowsecurity.sql:779: ERROR:  new row violates row-level security policy for table "document"
-- UPDATE path is taken here.  Existing tuple passes, since its cid
-- corresponds to "novel", but default USING qual is enforced against
-- post-UPDATE tuple too (as always when updating with a policy that lacks an
-- explicit WCO), and so this fails:
INSERT INTO document VALUES (2, (SELECT cid from category WHERE cname = 'technology'), 1, 'regress_rls_bob', 'my first novel')
    ON CONFLICT (did) DO UPDATE SET cid = EXCLUDED.cid, dtitle = EXCLUDED.dtitle RETURNING *;
psql:sql/rowsecurity.sql:786: ERROR:  new row violates row-level security policy for table "document"
SET SESSION AUTHORIZATION regress_rls_alice;
SET
DROP POLICY p3_with_default ON document;
DROP POLICY
--
-- Test ALL policies with ON CONFLICT DO UPDATE (much the same as existing UPDATE
-- tests)
--
CREATE POLICY p3_with_all ON document FOR ALL
  USING (cid = (SELECT cid from category WHERE cname = 'novel'))
  WITH CHECK (dauthor = current_user);
CREATE POLICY
SET SESSION AUTHORIZATION regress_rls_bob;
SET
-- Fails, since ALL WCO is enforced in insert path:
INSERT INTO document VALUES (80, (SELECT cid from category WHERE cname = 'novel'), 1, 'regress_rls_carol', 'my first novel')
    ON CONFLICT (did) DO UPDATE SET dtitle = EXCLUDED.dtitle, cid = 33;
psql:sql/rowsecurity.sql:802: ERROR:  new row violates row-level security policy for table "document"
-- Fails, since ALL policy USING qual is enforced (existing, target tuple is in
-- violation, since it has the "manga" cid):
INSERT INTO document VALUES (4, (SELECT cid from category WHERE cname = 'novel'), 1, 'regress_rls_bob', 'my first novel')
    ON CONFLICT (did) DO UPDATE SET dtitle = EXCLUDED.dtitle;
psql:sql/rowsecurity.sql:806: ERROR:  Kunlun-db: The row level security constraint cannot be serialized
-- Fails, since ALL WCO are enforced:
INSERT INTO document VALUES (1, (SELECT cid from category WHERE cname = 'novel'), 1, 'regress_rls_bob', 'my first novel')
    ON CONFLICT (did) DO UPDATE SET dauthor = 'regress_rls_carol';
psql:sql/rowsecurity.sql:809: ERROR:  Kunlun-db: The row level security constraint cannot be serialized
--
-- ROLE/GROUP
--
SET SESSION AUTHORIZATION regress_rls_alice;
SET
CREATE TABLE z1 (a int, b text);
CREATE TABLE
CREATE TABLE z2 (a int, b text);
CREATE TABLE
GRANT SELECT ON z1,z2 TO regress_rls_group1, regress_rls_group2,
    regress_rls_bob, regress_rls_carol;
GRANT
INSERT INTO z1 VALUES
    (1, 'aba'),
    (2, 'bbb'),
    (3, 'ccc'),
    (4, 'dad');
INSERT 0 4
CREATE POLICY p1 ON z1 TO regress_rls_group1 USING (a % 2 = 0);
CREATE POLICY
CREATE POLICY p2 ON z1 TO regress_rls_group2 USING (a % 2 = 1);
CREATE POLICY
ALTER TABLE z1 ENABLE ROW LEVEL SECURITY;
ALTER TABLE
SET SESSION AUTHORIZATION regress_rls_bob;
SET
SELECT * FROM z1 WHERE f_leak(b);
psql:sql/rowsecurity.sql:832: NOTICE:  f_leak => bbb
psql:sql/rowsecurity.sql:832: NOTICE:  f_leak => dad
 a |  b  
---+-----
 2 | bbb
 4 | dad
(2 rows)

EXPLAIN (COSTS OFF) SELECT * FROM z1 WHERE f_leak(b);

PREPARE plancache_test AS SELECT * FROM z1 WHERE f_leak(b);
PREPARE
EXPLAIN (COSTS OFF) EXECUTE plancache_test;

PREPARE plancache_test2 AS WITH q AS (SELECT * FROM z1 WHERE f_leak(b)) SELECT * FROM q,z2;
PREPARE
EXPLAIN (COSTS OFF) EXECUTE plancache_test2;

PREPARE plancache_test3 AS WITH q AS (SELECT * FROM z2) SELECT * FROM q,z1 WHERE f_leak(z1.b);
PREPARE
EXPLAIN (COSTS OFF) EXECUTE plancache_test3;

SET ROLE regress_rls_group1;
SET
SELECT * FROM z1 WHERE f_leak(b);
psql:sql/rowsecurity.sql:844: NOTICE:  f_leak => bbb
psql:sql/rowsecurity.sql:844: NOTICE:  f_leak => dad
 a |  b  
---+-----
 2 | bbb
 4 | dad
(2 rows)

EXPLAIN (COSTS OFF) SELECT * FROM z1 WHERE f_leak(b);

EXPLAIN (COSTS OFF) EXECUTE plancache_test;

EXPLAIN (COSTS OFF) EXECUTE plancache_test2;

EXPLAIN (COSTS OFF) EXECUTE plancache_test3;

SET SESSION AUTHORIZATION regress_rls_carol;
SET
SELECT * FROM z1 WHERE f_leak(b);
psql:sql/rowsecurity.sql:852: NOTICE:  f_leak => aba
psql:sql/rowsecurity.sql:852: NOTICE:  f_leak => ccc
 a |  b  
---+-----
 1 | aba
 3 | ccc
(2 rows)

EXPLAIN (COSTS OFF) SELECT * FROM z1 WHERE f_leak(b);

EXPLAIN (COSTS OFF) EXECUTE plancache_test;

EXPLAIN (COSTS OFF) EXECUTE plancache_test2;

EXPLAIN (COSTS OFF) EXECUTE plancache_test3;

SET ROLE regress_rls_group2;
SET
SELECT * FROM z1 WHERE f_leak(b);
psql:sql/rowsecurity.sql:860: NOTICE:  f_leak => aba
psql:sql/rowsecurity.sql:860: NOTICE:  f_leak => ccc
 a |  b  
---+-----
 1 | aba
 3 | ccc
(2 rows)

EXPLAIN (COSTS OFF) SELECT * FROM z1 WHERE f_leak(b);

EXPLAIN (COSTS OFF) EXECUTE plancache_test;

EXPLAIN (COSTS OFF) EXECUTE plancache_test2;

EXPLAIN (COSTS OFF) EXECUTE plancache_test3;

--
-- Views should follow policy for view owner.
--
-- View and Table owner are the same.
SET SESSION AUTHORIZATION regress_rls_alice;
SET
CREATE VIEW rls_view AS SELECT * FROM z1 WHERE f_leak(b);
CREATE VIEW
GRANT SELECT ON rls_view TO regress_rls_bob;
GRANT
-- Query as role that is not owner of view or table.  Should return all records.
SET SESSION AUTHORIZATION regress_rls_bob;
SET
SELECT * FROM rls_view;
psql:sql/rowsecurity.sql:876: NOTICE:  f_leak => aba
psql:sql/rowsecurity.sql:876: NOTICE:  f_leak => bbb
psql:sql/rowsecurity.sql:876: NOTICE:  f_leak => ccc
psql:sql/rowsecurity.sql:876: NOTICE:  f_leak => dad
 a |  b  
---+-----
 1 | aba
 2 | bbb
 3 | ccc
 4 | dad
(4 rows)

EXPLAIN (COSTS OFF) SELECT * FROM rls_view;

-- Query as view/table owner.  Should return all records.
SET SESSION AUTHORIZATION regress_rls_alice;
SET
SELECT * FROM rls_view;
psql:sql/rowsecurity.sql:881: NOTICE:  f_leak => aba
psql:sql/rowsecurity.sql:881: NOTICE:  f_leak => bbb
psql:sql/rowsecurity.sql:881: NOTICE:  f_leak => ccc
psql:sql/rowsecurity.sql:881: NOTICE:  f_leak => dad
 a |  b  
---+-----
 1 | aba
 2 | bbb
 3 | ccc
 4 | dad
(4 rows)

EXPLAIN (COSTS OFF) SELECT * FROM rls_view;

DROP VIEW rls_view;
DROP VIEW
-- View and Table owners are different.
SET SESSION AUTHORIZATION regress_rls_bob;
SET
CREATE VIEW rls_view AS SELECT * FROM z1 WHERE f_leak(b);
CREATE VIEW
GRANT SELECT ON rls_view TO regress_rls_alice;
GRANT
-- Query as role that is not owner of view but is owner of table.
-- Should return records based on view owner policies.
SET SESSION AUTHORIZATION regress_rls_alice;
SET
SELECT * FROM rls_view;
psql:sql/rowsecurity.sql:893: NOTICE:  f_leak => bbb
psql:sql/rowsecurity.sql:893: NOTICE:  f_leak => dad
 a |  b  
---+-----
 2 | bbb
 4 | dad
(2 rows)

EXPLAIN (COSTS OFF) SELECT * FROM rls_view;

-- Query as role that is not owner of table but is owner of view.
-- Should return records based on view owner policies.
SET SESSION AUTHORIZATION regress_rls_bob;
SET
SELECT * FROM rls_view;
psql:sql/rowsecurity.sql:899: NOTICE:  f_leak => bbb
psql:sql/rowsecurity.sql:899: NOTICE:  f_leak => dad
 a |  b  
---+-----
 2 | bbb
 4 | dad
(2 rows)

EXPLAIN (COSTS OFF) SELECT * FROM rls_view;

-- Query as role that is not the owner of the table or view without permissions.
SET SESSION AUTHORIZATION regress_rls_carol;
SET
SELECT * FROM rls_view; --fail - permission denied.
psql:sql/rowsecurity.sql:904: ERROR:  permission denied for view rls_view
EXPLAIN (COSTS OFF) SELECT * FROM rls_view; --fail - permission denied.
psql:sql/rowsecurity.sql:905: ERROR:  permission denied for view rls_view
-- Query as role that is not the owner of the table or view with permissions.
SET SESSION AUTHORIZATION regress_rls_bob;
SET
GRANT SELECT ON rls_view TO regress_rls_carol;
GRANT
SELECT * FROM rls_view;
psql:sql/rowsecurity.sql:910: NOTICE:  f_leak => bbb
psql:sql/rowsecurity.sql:910: NOTICE:  f_leak => dad
 a |  b  
---+-----
 2 | bbb
 4 | dad
(2 rows)

EXPLAIN (COSTS OFF) SELECT * FROM rls_view;

SET SESSION AUTHORIZATION regress_rls_bob;
SET
DROP VIEW rls_view;
DROP VIEW
--
-- Command specific
--
SET SESSION AUTHORIZATION regress_rls_alice;
SET
CREATE TABLE x1 (a int primary key, b text, c text);
CREATE TABLE
GRANT ALL ON x1 TO PUBLIC;
GRANT
INSERT INTO x1 VALUES
    (1, 'abc', 'regress_rls_bob'),
    (2, 'bcd', 'regress_rls_bob'),
    (3, 'cde', 'regress_rls_carol'),
    (4, 'def', 'regress_rls_carol'),
    (5, 'efg', 'regress_rls_bob'),
    (6, 'fgh', 'regress_rls_bob'),
    (7, 'fgh', 'regress_rls_carol'),
    (8, 'fgh', 'regress_rls_carol');
INSERT 0 8
CREATE POLICY p0 ON x1 FOR ALL USING (c = current_user);
CREATE POLICY
CREATE POLICY p1 ON x1 FOR SELECT USING (a % 2 = 0);
CREATE POLICY
CREATE POLICY p2 ON x1 FOR INSERT WITH CHECK (a % 2 = 1);
CREATE POLICY
CREATE POLICY p3 ON x1 FOR UPDATE USING (a % 2 = 0);
CREATE POLICY
CREATE POLICY p4 ON x1 FOR DELETE USING (a < 8);
CREATE POLICY
ALTER TABLE x1 ENABLE ROW LEVEL SECURITY;
ALTER TABLE
SET SESSION AUTHORIZATION regress_rls_bob;
SET
SELECT * FROM x1 WHERE f_leak(b) ORDER BY a ASC;
psql:sql/rowsecurity.sql:943: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:943: NOTICE:  f_leak => bcd
psql:sql/rowsecurity.sql:943: NOTICE:  f_leak => def
psql:sql/rowsecurity.sql:943: NOTICE:  f_leak => efg
psql:sql/rowsecurity.sql:943: NOTICE:  f_leak => fgh
psql:sql/rowsecurity.sql:943: NOTICE:  f_leak => fgh
 a |  b  |         c         
---+-----+-------------------
 1 | abc | regress_rls_bob
 2 | bcd | regress_rls_bob
 4 | def | regress_rls_carol
 5 | efg | regress_rls_bob
 6 | fgh | regress_rls_bob
 8 | fgh | regress_rls_carol
(6 rows)

UPDATE x1 SET b = b || '_updt' WHERE f_leak(b) RETURNING *;
psql:sql/rowsecurity.sql:944: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:944: NOTICE:  f_leak => bcd
psql:sql/rowsecurity.sql:944: NOTICE:  f_leak => def
psql:sql/rowsecurity.sql:944: NOTICE:  f_leak => efg
psql:sql/rowsecurity.sql:944: NOTICE:  f_leak => fgh
psql:sql/rowsecurity.sql:944: NOTICE:  f_leak => fgh
 a |    b     |         c         
---+----------+-------------------
 1 | abc_updt | regress_rls_bob
 2 | bcd_updt | regress_rls_bob
 4 | def_updt | regress_rls_carol
 5 | efg_updt | regress_rls_bob
 6 | fgh_updt | regress_rls_bob
 8 | fgh_updt | regress_rls_carol
(6 rows)

UPDATE 6
SET SESSION AUTHORIZATION regress_rls_carol;
SET
SELECT * FROM x1 WHERE f_leak(b) ORDER BY a ASC;
psql:sql/rowsecurity.sql:947: NOTICE:  f_leak => bcd_updt
psql:sql/rowsecurity.sql:947: NOTICE:  f_leak => cde
psql:sql/rowsecurity.sql:947: NOTICE:  f_leak => def_updt
psql:sql/rowsecurity.sql:947: NOTICE:  f_leak => fgh_updt
psql:sql/rowsecurity.sql:947: NOTICE:  f_leak => fgh
psql:sql/rowsecurity.sql:947: NOTICE:  f_leak => fgh_updt
 a |    b     |         c         
---+----------+-------------------
 2 | bcd_updt | regress_rls_bob
 3 | cde      | regress_rls_carol
 4 | def_updt | regress_rls_carol
 6 | fgh_updt | regress_rls_bob
 7 | fgh      | regress_rls_carol
 8 | fgh_updt | regress_rls_carol
(6 rows)

UPDATE x1 SET b = b || '_updt' WHERE f_leak(b) RETURNING *;
psql:sql/rowsecurity.sql:948: NOTICE:  f_leak => bcd_updt
psql:sql/rowsecurity.sql:948: NOTICE:  f_leak => cde
psql:sql/rowsecurity.sql:948: NOTICE:  f_leak => def_updt
psql:sql/rowsecurity.sql:948: NOTICE:  f_leak => fgh_updt
psql:sql/rowsecurity.sql:948: NOTICE:  f_leak => fgh
psql:sql/rowsecurity.sql:948: NOTICE:  f_leak => fgh_updt
 a |       b       |         c         
---+---------------+-------------------
 2 | bcd_updt_updt | regress_rls_bob
 3 | cde_updt      | regress_rls_carol
 4 | def_updt_updt | regress_rls_carol
 6 | fgh_updt_updt | regress_rls_bob
 7 | fgh_updt      | regress_rls_carol
 8 | fgh_updt_updt | regress_rls_carol
(6 rows)

UPDATE 6
DELETE FROM x1 WHERE f_leak(b) RETURNING *;
psql:sql/rowsecurity.sql:949: NOTICE:  f_leak => bcd_updt_updt
psql:sql/rowsecurity.sql:949: NOTICE:  f_leak => cde_updt
psql:sql/rowsecurity.sql:949: NOTICE:  f_leak => def_updt_updt
psql:sql/rowsecurity.sql:949: NOTICE:  f_leak => fgh_updt_updt
psql:sql/rowsecurity.sql:949: NOTICE:  f_leak => fgh_updt
psql:sql/rowsecurity.sql:949: NOTICE:  f_leak => fgh_updt_updt
 a |       b       |         c         
---+---------------+-------------------
 2 | bcd_updt_updt | regress_rls_bob
 3 | cde_updt      | regress_rls_carol
 4 | def_updt_updt | regress_rls_carol
 6 | fgh_updt_updt | regress_rls_bob
 7 | fgh_updt      | regress_rls_carol
 8 | fgh_updt_updt | regress_rls_carol
(6 rows)

DELETE 6
--
-- Duplicate Policy Names
--
SET SESSION AUTHORIZATION regress_rls_alice;
SET
CREATE TABLE y1 (a int, b text);
CREATE TABLE
CREATE TABLE y2 (a int, b text);
CREATE TABLE
GRANT ALL ON y1, y2 TO regress_rls_bob;
GRANT
CREATE POLICY p1 ON y1 FOR ALL USING (a % 2 = 0);
CREATE POLICY
CREATE POLICY p2 ON y1 FOR SELECT USING (a > 2);
CREATE POLICY
CREATE POLICY p1 ON y1 FOR SELECT USING (a % 2 = 1);  --fail
psql:sql/rowsecurity.sql:961: ERROR:  policy "p1" for table "y1" already exists
CREATE POLICY p1 ON y2 FOR ALL USING (a % 2 = 0);  --OK
CREATE POLICY
ALTER TABLE y1 ENABLE ROW LEVEL SECURITY;
ALTER TABLE
ALTER TABLE y2 ENABLE ROW LEVEL SECURITY;
ALTER TABLE
--
-- Expression structure with SBV
--
-- Create view as table owner.  RLS should NOT be applied.
SET SESSION AUTHORIZATION regress_rls_alice;
SET
CREATE VIEW rls_sbv WITH (security_barrier) AS
    SELECT * FROM y1 WHERE f_leak(b);
CREATE VIEW
EXPLAIN (COSTS OFF) SELECT * FROM rls_sbv WHERE (a = 1);

DROP VIEW rls_sbv;
DROP VIEW
-- Create view as role that does not own table.  RLS should be applied.
SET SESSION AUTHORIZATION regress_rls_bob;
SET
CREATE VIEW rls_sbv WITH (security_barrier) AS
    SELECT * FROM y1 WHERE f_leak(b);
CREATE VIEW
EXPLAIN (COSTS OFF) SELECT * FROM rls_sbv WHERE (a = 1);

DROP VIEW rls_sbv;
DROP VIEW
--
-- Expression structure
--
SET SESSION AUTHORIZATION regress_rls_alice;
SET
INSERT INTO y2 (SELECT x, md5(x::text) FROM generate_series(0,20) x);
INSERT 0 21
CREATE POLICY p2 ON y2 USING (a % 3 = 0);
CREATE POLICY
CREATE POLICY p3 ON y2 USING (a % 4 = 0);
CREATE POLICY
SET SESSION AUTHORIZATION regress_rls_bob;
SET
SELECT * FROM y2 WHERE f_leak(b);
psql:sql/rowsecurity.sql:993: NOTICE:  f_leak => cfcd208495d565ef66e7dff9f98764da
psql:sql/rowsecurity.sql:993: NOTICE:  f_leak => c81e728d9d4c2f636f067f89cc14862c
psql:sql/rowsecurity.sql:993: NOTICE:  f_leak => eccbc87e4b5ce2fe28308fd9f2a7baf3
psql:sql/rowsecurity.sql:993: NOTICE:  f_leak => a87ff679a2f3e71d9181a67b7542122c
psql:sql/rowsecurity.sql:993: NOTICE:  f_leak => 1679091c5a880faf6fb5e6087eb1b2dc
psql:sql/rowsecurity.sql:993: NOTICE:  f_leak => c9f0f895fb98ab9159f51fd0297e236d
psql:sql/rowsecurity.sql:993: NOTICE:  f_leak => 45c48cce2e2d7fbdea1afc51c7c6ad26
psql:sql/rowsecurity.sql:993: NOTICE:  f_leak => d3d9446802a44259755d38e6d163e820
psql:sql/rowsecurity.sql:993: NOTICE:  f_leak => c20ad4d76fe97759aa27a0c99bff6710
psql:sql/rowsecurity.sql:993: NOTICE:  f_leak => aab3238922bcc25a6f606eb525ffdc56
psql:sql/rowsecurity.sql:993: NOTICE:  f_leak => 9bf31c7ff062936a96d3c8bd1f8f2ff3
psql:sql/rowsecurity.sql:993: NOTICE:  f_leak => c74d97b01eae257e44aa9d5bade97baf
psql:sql/rowsecurity.sql:993: NOTICE:  f_leak => 6f4922f45568161a8cdf4ad2299f6d23
psql:sql/rowsecurity.sql:993: NOTICE:  f_leak => 98f13708210194c475687be6106a3b84
 a  |                b                 
----+----------------------------------
  0 | cfcd208495d565ef66e7dff9f98764da
  2 | c81e728d9d4c2f636f067f89cc14862c
  3 | eccbc87e4b5ce2fe28308fd9f2a7baf3
  4 | a87ff679a2f3e71d9181a67b7542122c
  6 | 1679091c5a880faf6fb5e6087eb1b2dc
  8 | c9f0f895fb98ab9159f51fd0297e236d
  9 | 45c48cce2e2d7fbdea1afc51c7c6ad26
 10 | d3d9446802a44259755d38e6d163e820
 12 | c20ad4d76fe97759aa27a0c99bff6710
 14 | aab3238922bcc25a6f606eb525ffdc56
 15 | 9bf31c7ff062936a96d3c8bd1f8f2ff3
 16 | c74d97b01eae257e44aa9d5bade97baf
 18 | 6f4922f45568161a8cdf4ad2299f6d23
 20 | 98f13708210194c475687be6106a3b84
(14 rows)

EXPLAIN (COSTS OFF) SELECT * FROM y2 WHERE f_leak(b);

--
-- Qual push-down of leaky functions, when not referring to table
--
SELECT * FROM y2 WHERE f_leak('abc');
psql:sql/rowsecurity.sql:999: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:999: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:999: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:999: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:999: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:999: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:999: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:999: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:999: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:999: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:999: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:999: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:999: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:999: NOTICE:  f_leak => abc
 a  |                b                 
----+----------------------------------
  0 | cfcd208495d565ef66e7dff9f98764da
  2 | c81e728d9d4c2f636f067f89cc14862c
  3 | eccbc87e4b5ce2fe28308fd9f2a7baf3
  4 | a87ff679a2f3e71d9181a67b7542122c
  6 | 1679091c5a880faf6fb5e6087eb1b2dc
  8 | c9f0f895fb98ab9159f51fd0297e236d
  9 | 45c48cce2e2d7fbdea1afc51c7c6ad26
 10 | d3d9446802a44259755d38e6d163e820
 12 | c20ad4d76fe97759aa27a0c99bff6710
 14 | aab3238922bcc25a6f606eb525ffdc56
 15 | 9bf31c7ff062936a96d3c8bd1f8f2ff3
 16 | c74d97b01eae257e44aa9d5bade97baf
 18 | 6f4922f45568161a8cdf4ad2299f6d23
 20 | 98f13708210194c475687be6106a3b84
(14 rows)

EXPLAIN (COSTS OFF) SELECT * FROM y2 WHERE f_leak('abc');

CREATE TABLE test_qual_pushdown (
    abc text
);
CREATE TABLE
INSERT INTO test_qual_pushdown VALUES ('abc'),('def');
INSERT 0 2
SELECT * FROM y2 JOIN test_qual_pushdown ON (b = abc) WHERE f_leak(abc);
psql:sql/rowsecurity.sql:1008: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:1008: NOTICE:  f_leak => def
psql:sql/rowsecurity.sql:1008: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:1008: NOTICE:  f_leak => def
psql:sql/rowsecurity.sql:1008: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:1008: NOTICE:  f_leak => def
psql:sql/rowsecurity.sql:1008: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:1008: NOTICE:  f_leak => def
psql:sql/rowsecurity.sql:1008: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:1008: NOTICE:  f_leak => def
psql:sql/rowsecurity.sql:1008: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:1008: NOTICE:  f_leak => def
psql:sql/rowsecurity.sql:1008: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:1008: NOTICE:  f_leak => def
psql:sql/rowsecurity.sql:1008: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:1008: NOTICE:  f_leak => def
psql:sql/rowsecurity.sql:1008: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:1008: NOTICE:  f_leak => def
psql:sql/rowsecurity.sql:1008: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:1008: NOTICE:  f_leak => def
psql:sql/rowsecurity.sql:1008: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:1008: NOTICE:  f_leak => def
psql:sql/rowsecurity.sql:1008: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:1008: NOTICE:  f_leak => def
psql:sql/rowsecurity.sql:1008: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:1008: NOTICE:  f_leak => def
psql:sql/rowsecurity.sql:1008: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:1008: NOTICE:  f_leak => def
 a | b | abc 
---+---+-----
(0 rows)

EXPLAIN (COSTS OFF) SELECT * FROM y2 JOIN test_qual_pushdown ON (b = abc) WHERE f_leak(abc);

SELECT * FROM y2 JOIN test_qual_pushdown ON (b = abc) WHERE f_leak(b);
psql:sql/rowsecurity.sql:1011: NOTICE:  f_leak => cfcd208495d565ef66e7dff9f98764da
psql:sql/rowsecurity.sql:1011: NOTICE:  f_leak => c81e728d9d4c2f636f067f89cc14862c
psql:sql/rowsecurity.sql:1011: NOTICE:  f_leak => eccbc87e4b5ce2fe28308fd9f2a7baf3
psql:sql/rowsecurity.sql:1011: NOTICE:  f_leak => a87ff679a2f3e71d9181a67b7542122c
psql:sql/rowsecurity.sql:1011: NOTICE:  f_leak => 1679091c5a880faf6fb5e6087eb1b2dc
psql:sql/rowsecurity.sql:1011: NOTICE:  f_leak => c9f0f895fb98ab9159f51fd0297e236d
psql:sql/rowsecurity.sql:1011: NOTICE:  f_leak => 45c48cce2e2d7fbdea1afc51c7c6ad26
psql:sql/rowsecurity.sql:1011: NOTICE:  f_leak => d3d9446802a44259755d38e6d163e820
psql:sql/rowsecurity.sql:1011: NOTICE:  f_leak => c20ad4d76fe97759aa27a0c99bff6710
psql:sql/rowsecurity.sql:1011: NOTICE:  f_leak => aab3238922bcc25a6f606eb525ffdc56
psql:sql/rowsecurity.sql:1011: NOTICE:  f_leak => 9bf31c7ff062936a96d3c8bd1f8f2ff3
psql:sql/rowsecurity.sql:1011: NOTICE:  f_leak => c74d97b01eae257e44aa9d5bade97baf
psql:sql/rowsecurity.sql:1011: NOTICE:  f_leak => 6f4922f45568161a8cdf4ad2299f6d23
psql:sql/rowsecurity.sql:1011: NOTICE:  f_leak => 98f13708210194c475687be6106a3b84
 a | b | abc 
---+---+-----
(0 rows)

EXPLAIN (COSTS OFF) SELECT * FROM y2 JOIN test_qual_pushdown ON (b = abc) WHERE f_leak(b);

DROP TABLE test_qual_pushdown;
DROP TABLE
--
-- Plancache invalidate on user change.
--
RESET SESSION AUTHORIZATION;
RESET
\set VERBOSITY terse \\ -- suppress cascade details
DROP TABLE t1 CASCADE;
psql:sql/rowsecurity.sql:1022: NOTICE:  drop cascades to 2 other objects
DROP TABLE
\set VERBOSITY default
CREATE TABLE t1 (a integer);
CREATE TABLE
GRANT SELECT ON t1 TO regress_rls_bob, regress_rls_carol;
GRANT
CREATE POLICY p1 ON t1 TO regress_rls_bob USING ((a % 2) = 0);
CREATE POLICY
CREATE POLICY p2 ON t1 TO regress_rls_carol USING ((a % 4) = 0);
CREATE POLICY
ALTER TABLE t1 ENABLE ROW LEVEL SECURITY;
ALTER TABLE
-- Prepare as regress_rls_bob
SET ROLE regress_rls_bob;
SET
PREPARE role_inval AS SELECT * FROM t1;
PREPARE
-- Check plan
EXPLAIN (COSTS OFF) EXECUTE role_inval;

-- Change to regress_rls_carol
SET ROLE regress_rls_carol;
SET
-- Check plan- should be different
EXPLAIN (COSTS OFF) EXECUTE role_inval;

-- Change back to regress_rls_bob
SET ROLE regress_rls_bob;
SET
-- Check plan- should be back to original
EXPLAIN (COSTS OFF) EXECUTE role_inval;

--
-- CTE and RLS
--
RESET SESSION AUTHORIZATION;
RESET
DROP TABLE t1 CASCADE;
DROP TABLE
CREATE TABLE t1 (a integer, b text);
CREATE TABLE
CREATE POLICY p1 ON t1 USING (a % 2 = 0);
CREATE POLICY
ALTER TABLE t1 ENABLE ROW LEVEL SECURITY;
ALTER TABLE
GRANT ALL ON t1 TO regress_rls_bob;
GRANT
INSERT INTO t1 (SELECT x, md5(x::text) FROM generate_series(0,20) x);
INSERT 0 21
SET SESSION AUTHORIZATION regress_rls_bob;
SET
WITH cte1 AS (SELECT * FROM t1 WHERE f_leak(b)) SELECT * FROM cte1;
psql:sql/rowsecurity.sql:1066: NOTICE:  f_leak => cfcd208495d565ef66e7dff9f98764da
psql:sql/rowsecurity.sql:1066: NOTICE:  f_leak => c81e728d9d4c2f636f067f89cc14862c
psql:sql/rowsecurity.sql:1066: NOTICE:  f_leak => a87ff679a2f3e71d9181a67b7542122c
psql:sql/rowsecurity.sql:1066: NOTICE:  f_leak => 1679091c5a880faf6fb5e6087eb1b2dc
psql:sql/rowsecurity.sql:1066: NOTICE:  f_leak => c9f0f895fb98ab9159f51fd0297e236d
psql:sql/rowsecurity.sql:1066: NOTICE:  f_leak => d3d9446802a44259755d38e6d163e820
psql:sql/rowsecurity.sql:1066: NOTICE:  f_leak => c20ad4d76fe97759aa27a0c99bff6710
psql:sql/rowsecurity.sql:1066: NOTICE:  f_leak => aab3238922bcc25a6f606eb525ffdc56
psql:sql/rowsecurity.sql:1066: NOTICE:  f_leak => c74d97b01eae257e44aa9d5bade97baf
psql:sql/rowsecurity.sql:1066: NOTICE:  f_leak => 6f4922f45568161a8cdf4ad2299f6d23
psql:sql/rowsecurity.sql:1066: NOTICE:  f_leak => 98f13708210194c475687be6106a3b84
 a  |                b                 
----+----------------------------------
  0 | cfcd208495d565ef66e7dff9f98764da
  2 | c81e728d9d4c2f636f067f89cc14862c
  4 | a87ff679a2f3e71d9181a67b7542122c
  6 | 1679091c5a880faf6fb5e6087eb1b2dc
  8 | c9f0f895fb98ab9159f51fd0297e236d
 10 | d3d9446802a44259755d38e6d163e820
 12 | c20ad4d76fe97759aa27a0c99bff6710
 14 | aab3238922bcc25a6f606eb525ffdc56
 16 | c74d97b01eae257e44aa9d5bade97baf
 18 | 6f4922f45568161a8cdf4ad2299f6d23
 20 | 98f13708210194c475687be6106a3b84
(11 rows)

EXPLAIN (COSTS OFF) WITH cte1 AS (SELECT * FROM t1 WHERE f_leak(b)) SELECT * FROM cte1;

WITH cte1 AS (UPDATE t1 SET a = a + 1 RETURNING *) SELECT * FROM cte1; --fail
psql:sql/rowsecurity.sql:1069: ERROR:  Kunlun-db: MySQL storage node (1, 1) returned error: 1644, new row violates check constraint.
WITH cte1 AS (UPDATE t1 SET a = a + 2 RETURNING *) SELECT * FROM cte1; --ok
 a  |                b                 
----+----------------------------------
  2 | cfcd208495d565ef66e7dff9f98764da
  4 | c81e728d9d4c2f636f067f89cc14862c
  6 | a87ff679a2f3e71d9181a67b7542122c
  8 | 1679091c5a880faf6fb5e6087eb1b2dc
 10 | c9f0f895fb98ab9159f51fd0297e236d
 12 | d3d9446802a44259755d38e6d163e820
 14 | c20ad4d76fe97759aa27a0c99bff6710
 16 | aab3238922bcc25a6f606eb525ffdc56
 18 | c74d97b01eae257e44aa9d5bade97baf
 20 | 6f4922f45568161a8cdf4ad2299f6d23
 22 | 98f13708210194c475687be6106a3b84
(11 rows)

WITH cte1 AS (INSERT INTO t1 VALUES (21, 'Fail') RETURNING *) SELECT * FROM cte1; --fail
psql:sql/rowsecurity.sql:1072: ERROR:  new row violates row-level security policy for table "t1"
WITH cte1 AS (INSERT INTO t1 VALUES (20, 'Success') RETURNING *) SELECT * FROM cte1; --ok
 a  |    b    
----+---------
 20 | Success
(1 row)

--
-- Rename Policy
--
RESET SESSION AUTHORIZATION;
RESET
ALTER POLICY p1 ON t1 RENAME TO p1; --fail
psql:sql/rowsecurity.sql:1079: ERROR:  policy "p1" for table "t1" already exists
SELECT polname, relname
    FROM pg_policy pol
    JOIN pg_class pc ON (pc.oid = pol.polrelid)
    WHERE relname = 't1';
 polname | relname 
---------+---------
 p1      | t1
(1 row)

ALTER POLICY p1 ON t1 RENAME TO p2; --ok
ALTER POLICY
SELECT polname, relname
    FROM pg_policy pol
    JOIN pg_class pc ON (pc.oid = pol.polrelid)
    WHERE relname = 't1';
 polname | relname 
---------+---------
 p2      | t1
(1 row)

--
-- Check INSERT SELECT
--
SET SESSION AUTHORIZATION regress_rls_bob;
SET
CREATE TABLE t2 (a integer, b text);
CREATE TABLE
INSERT INTO t2 (SELECT * FROM t1);
INSERT 0 12
EXPLAIN (COSTS OFF) INSERT INTO t2 (SELECT * FROM t1);

SELECT * FROM t2;
 a  |                b                 
----+----------------------------------
  2 | cfcd208495d565ef66e7dff9f98764da
  4 | c81e728d9d4c2f636f067f89cc14862c
  6 | a87ff679a2f3e71d9181a67b7542122c
  8 | 1679091c5a880faf6fb5e6087eb1b2dc
 10 | c9f0f895fb98ab9159f51fd0297e236d
 12 | d3d9446802a44259755d38e6d163e820
 14 | c20ad4d76fe97759aa27a0c99bff6710
 16 | aab3238922bcc25a6f606eb525ffdc56
 18 | c74d97b01eae257e44aa9d5bade97baf
 20 | 6f4922f45568161a8cdf4ad2299f6d23
 22 | 98f13708210194c475687be6106a3b84
 20 | Success
(12 rows)

EXPLAIN (COSTS OFF) SELECT * FROM t2;

--CREATE TABLE t3 AS SELECT * FROM t1;
--SELECT * FROM t3;
--SELECT * INTO t4 FROM t1;
--SELECT * FROM t4;
--
-- RLS with JOIN
--
SET SESSION AUTHORIZATION regress_rls_alice;
SET
CREATE TABLE blog (id integer, author text, post text);
CREATE TABLE
CREATE TABLE comment (blog_id integer, message text);
CREATE TABLE
 
GRANT ALL ON blog, comment TO regress_rls_bob;
GRANT
CREATE POLICY blog_1 ON blog USING (id % 2 = 0);
CREATE POLICY
ALTER TABLE blog ENABLE ROW LEVEL SECURITY;
ALTER TABLE
INSERT INTO blog VALUES
    (1, 'alice', 'blog #1'),
    (2, 'bob', 'blog #1'),
    (3, 'alice', 'blog #2'),
    (4, 'alice', 'blog #3'),
    (5, 'john', 'blog #1');
INSERT 0 5
INSERT INTO comment VALUES
    (1, 'cool blog'),
    (1, 'fun blog'),
    (3, 'crazy blog'),
    (5, 'what?'),
    (4, 'insane!'),
    (2, 'who did it?');
INSERT 0 6
SET SESSION AUTHORIZATION regress_rls_bob;
SET
-- Check RLS JOIN with Non-RLS.
SELECT id, author, message FROM blog JOIN comment ON id = blog_id;
 id | author |   message   
----+--------+-------------
  4 | alice  | insane!
  2 | bob    | who did it?
(2 rows)

																							 
-- Check Non-RLS JOIN with RLS.
SELECT id, author, message FROM comment JOIN blog ON id = blog_id;
 id | author |   message   
----+--------+-------------
  4 | alice  | insane!
  2 | bob    | who did it?
(2 rows)

SET SESSION AUTHORIZATION regress_rls_alice;
SET
CREATE POLICY comment_1 ON comment USING (blog_id < 4);
CREATE POLICY
ALTER TABLE comment ENABLE ROW LEVEL SECURITY;
ALTER TABLE
SET SESSION AUTHORIZATION regress_rls_bob;
SET
-- Check RLS JOIN RLS
SELECT id, author, message FROM blog JOIN comment ON id = blog_id;
 id | author |   message   
----+--------+-------------
  2 | bob    | who did it?
(1 row)

																							 
								  
SELECT id, author, message FROM comment JOIN blog ON id = blog_id;
 id | author |   message   
----+--------+-------------
  2 | bob    | who did it?
(1 row)

					   
SET SESSION AUTHORIZATION regress_rls_alice;
SET
					 
					   
DROP TABLE blog, comment;
DROP TABLE
--
-- Default Deny Policy
--
RESET SESSION AUTHORIZATION;
RESET
DROP POLICY p2 ON t1;
DROP POLICY
ALTER TABLE t1 OWNER TO regress_rls_alice;
ALTER TABLE
-- Check that default deny does not apply to superuser.
RESET SESSION AUTHORIZATION;
RESET
SELECT * FROM t1;
 a  |                b                 
----+----------------------------------
  2 | cfcd208495d565ef66e7dff9f98764da
  1 | c4ca4238a0b923820dcc509a6f75849b
  4 | c81e728d9d4c2f636f067f89cc14862c
  3 | eccbc87e4b5ce2fe28308fd9f2a7baf3
  6 | a87ff679a2f3e71d9181a67b7542122c
  5 | e4da3b7fbbce2345d7772b0674a318d5
  8 | 1679091c5a880faf6fb5e6087eb1b2dc
  7 | 8f14e45fceea167a5a36dedd4bea2543
 10 | c9f0f895fb98ab9159f51fd0297e236d
  9 | 45c48cce2e2d7fbdea1afc51c7c6ad26
 12 | d3d9446802a44259755d38e6d163e820
 11 | 6512bd43d9caa6e02c990b0a82652dca
 14 | c20ad4d76fe97759aa27a0c99bff6710
 13 | c51ce410c124a10e0db5e4b97fc2af39
 16 | aab3238922bcc25a6f606eb525ffdc56
 15 | 9bf31c7ff062936a96d3c8bd1f8f2ff3
 18 | c74d97b01eae257e44aa9d5bade97baf
 17 | 70efdf2ec9b086079795c442636b55fb
 20 | 6f4922f45568161a8cdf4ad2299f6d23
 19 | 1f0e3dad99908345f7439f8ffabdffc4
 22 | 98f13708210194c475687be6106a3b84
 20 | Success
(22 rows)

EXPLAIN (COSTS OFF) SELECT * FROM t1;

-- Check that default deny does not apply to table owner.
SET SESSION AUTHORIZATION regress_rls_alice;
SET
SELECT * FROM t1;
 a  |                b                 
----+----------------------------------
  2 | cfcd208495d565ef66e7dff9f98764da
  1 | c4ca4238a0b923820dcc509a6f75849b
  4 | c81e728d9d4c2f636f067f89cc14862c
  3 | eccbc87e4b5ce2fe28308fd9f2a7baf3
  6 | a87ff679a2f3e71d9181a67b7542122c
  5 | e4da3b7fbbce2345d7772b0674a318d5
  8 | 1679091c5a880faf6fb5e6087eb1b2dc
  7 | 8f14e45fceea167a5a36dedd4bea2543
 10 | c9f0f895fb98ab9159f51fd0297e236d
  9 | 45c48cce2e2d7fbdea1afc51c7c6ad26
 12 | d3d9446802a44259755d38e6d163e820
 11 | 6512bd43d9caa6e02c990b0a82652dca
 14 | c20ad4d76fe97759aa27a0c99bff6710
 13 | c51ce410c124a10e0db5e4b97fc2af39
 16 | aab3238922bcc25a6f606eb525ffdc56
 15 | 9bf31c7ff062936a96d3c8bd1f8f2ff3
 18 | c74d97b01eae257e44aa9d5bade97baf
 17 | 70efdf2ec9b086079795c442636b55fb
 20 | 6f4922f45568161a8cdf4ad2299f6d23
 19 | 1f0e3dad99908345f7439f8ffabdffc4
 22 | 98f13708210194c475687be6106a3b84
 20 | Success
(22 rows)

EXPLAIN (COSTS OFF) SELECT * FROM t1;

-- Check that default deny applies to non-owner/non-superuser when RLS on.
SET SESSION AUTHORIZATION regress_rls_bob;
SET
SET row_security TO ON;
SET
SELECT * FROM t1;
 a | b 
---+---
(0 rows)

EXPLAIN (COSTS OFF) SELECT * FROM t1;

SET SESSION AUTHORIZATION regress_rls_bob;
SET
SELECT * FROM t1;
 a | b 
---+---
(0 rows)

EXPLAIN (COSTS OFF) SELECT * FROM t1;

--
-- COPY TO/FROM
--
RESET SESSION AUTHORIZATION;
RESET
DROP TABLE copy_t CASCADE;
psql:sql/rowsecurity.sql:1190: ERROR:  table "copy_t" does not exist
CREATE TABLE copy_t (a integer, b text);
CREATE TABLE
CREATE POLICY p1 ON copy_t USING (a % 2 = 0);
CREATE POLICY
ALTER TABLE copy_t ENABLE ROW LEVEL SECURITY;
ALTER TABLE
GRANT ALL ON copy_t TO regress_rls_bob, regress_rls_exempt_user;
GRANT
INSERT INTO copy_t (SELECT x, md5(x::text) FROM generate_series(0,10) x);
INSERT 0 11
-- Check COPY TO as Superuser/owner.
RESET SESSION AUTHORIZATION;
RESET
SET row_security TO OFF;
SET
COPY (SELECT * FROM copy_t ORDER BY a ASC) TO STDOUT WITH DELIMITER ',';
0,cfcd208495d565ef66e7dff9f98764da
1,c4ca4238a0b923820dcc509a6f75849b
2,c81e728d9d4c2f636f067f89cc14862c
3,eccbc87e4b5ce2fe28308fd9f2a7baf3
4,a87ff679a2f3e71d9181a67b7542122c
5,e4da3b7fbbce2345d7772b0674a318d5
6,1679091c5a880faf6fb5e6087eb1b2dc
7,8f14e45fceea167a5a36dedd4bea2543
8,c9f0f895fb98ab9159f51fd0297e236d
9,45c48cce2e2d7fbdea1afc51c7c6ad26
10,d3d9446802a44259755d38e6d163e820
SET row_security TO ON;
SET
COPY (SELECT * FROM copy_t ORDER BY a ASC) TO STDOUT WITH DELIMITER ',';
0,cfcd208495d565ef66e7dff9f98764da
1,c4ca4238a0b923820dcc509a6f75849b
2,c81e728d9d4c2f636f067f89cc14862c
3,eccbc87e4b5ce2fe28308fd9f2a7baf3
4,a87ff679a2f3e71d9181a67b7542122c
5,e4da3b7fbbce2345d7772b0674a318d5
6,1679091c5a880faf6fb5e6087eb1b2dc
7,8f14e45fceea167a5a36dedd4bea2543
8,c9f0f895fb98ab9159f51fd0297e236d
9,45c48cce2e2d7fbdea1afc51c7c6ad26
10,d3d9446802a44259755d38e6d163e820
-- Check COPY TO as user with permissions.
SET SESSION AUTHORIZATION regress_rls_bob;
SET
SET row_security TO OFF;
SET
COPY (SELECT * FROM copy_t ORDER BY a ASC) TO STDOUT WITH DELIMITER ','; --fail - would be affected by RLS
psql:sql/rowsecurity.sql:1210: ERROR:  query would be affected by row-level security policy for table "copy_t"
SET row_security TO ON;
SET
COPY (SELECT * FROM copy_t ORDER BY a ASC) TO STDOUT WITH DELIMITER ','; --ok
0,cfcd208495d565ef66e7dff9f98764da
2,c81e728d9d4c2f636f067f89cc14862c
4,a87ff679a2f3e71d9181a67b7542122c
6,1679091c5a880faf6fb5e6087eb1b2dc
8,c9f0f895fb98ab9159f51fd0297e236d
10,d3d9446802a44259755d38e6d163e820
-- Check COPY TO as user with permissions and BYPASSRLS
SET SESSION AUTHORIZATION regress_rls_exempt_user;
SET
SET row_security TO OFF;
SET
COPY (SELECT * FROM copy_t ORDER BY a ASC) TO STDOUT WITH DELIMITER ','; --ok
0,cfcd208495d565ef66e7dff9f98764da
1,c4ca4238a0b923820dcc509a6f75849b
2,c81e728d9d4c2f636f067f89cc14862c
3,eccbc87e4b5ce2fe28308fd9f2a7baf3
4,a87ff679a2f3e71d9181a67b7542122c
5,e4da3b7fbbce2345d7772b0674a318d5
6,1679091c5a880faf6fb5e6087eb1b2dc
7,8f14e45fceea167a5a36dedd4bea2543
8,c9f0f895fb98ab9159f51fd0297e236d
9,45c48cce2e2d7fbdea1afc51c7c6ad26
10,d3d9446802a44259755d38e6d163e820
SET row_security TO ON;
SET
COPY (SELECT * FROM copy_t ORDER BY a ASC) TO STDOUT WITH DELIMITER ','; --ok
0,cfcd208495d565ef66e7dff9f98764da
1,c4ca4238a0b923820dcc509a6f75849b
2,c81e728d9d4c2f636f067f89cc14862c
3,eccbc87e4b5ce2fe28308fd9f2a7baf3
4,a87ff679a2f3e71d9181a67b7542122c
5,e4da3b7fbbce2345d7772b0674a318d5
6,1679091c5a880faf6fb5e6087eb1b2dc
7,8f14e45fceea167a5a36dedd4bea2543
8,c9f0f895fb98ab9159f51fd0297e236d
9,45c48cce2e2d7fbdea1afc51c7c6ad26
10,d3d9446802a44259755d38e6d163e820
-- Check COPY TO as user without permissions. SET row_security TO OFF;
SET SESSION AUTHORIZATION regress_rls_carol;
SET
SET row_security TO OFF;
SET
COPY (SELECT * FROM copy_t ORDER BY a ASC) TO STDOUT WITH DELIMITER ','; --fail - would be affected by RLS
psql:sql/rowsecurity.sql:1224: ERROR:  query would be affected by row-level security policy for table "copy_t"
SET row_security TO ON;
SET
COPY (SELECT * FROM copy_t ORDER BY a ASC) TO STDOUT WITH DELIMITER ','; --fail - permission denied
psql:sql/rowsecurity.sql:1226: ERROR:  permission denied for table copy_t
-- Check COPY relation TO; keep it just one row to avoid reordering issues
RESET SESSION AUTHORIZATION;
RESET
SET row_security TO ON;
SET
CREATE TABLE copy_rel_to (a integer, b text);
CREATE TABLE
CREATE POLICY p1 ON copy_rel_to USING (a % 2 = 0);
CREATE POLICY
ALTER TABLE copy_rel_to ENABLE ROW LEVEL SECURITY;
ALTER TABLE
GRANT ALL ON copy_rel_to TO regress_rls_bob, regress_rls_exempt_user;
GRANT
INSERT INTO copy_rel_to VALUES (1, md5('1'));
INSERT 0 1
-- Check COPY TO as Superuser/owner.
RESET SESSION AUTHORIZATION;
RESET
SET row_security TO OFF;
SET
COPY copy_rel_to TO STDOUT WITH DELIMITER ',';
1,c4ca4238a0b923820dcc509a6f75849b
SET row_security TO ON;
SET
COPY copy_rel_to TO STDOUT WITH DELIMITER ',';
1,c4ca4238a0b923820dcc509a6f75849b
-- Check COPY TO as user with permissions.
SET SESSION AUTHORIZATION regress_rls_bob;
SET
SET row_security TO OFF;
SET
COPY copy_rel_to TO STDOUT WITH DELIMITER ','; --fail - would be affected by RLS
psql:sql/rowsecurity.sql:1250: ERROR:  query would be affected by row-level security policy for table "copy_rel_to"
SET row_security TO ON;
SET
COPY copy_rel_to TO STDOUT WITH DELIMITER ','; --ok
-- Check COPY TO as user with permissions and BYPASSRLS
SET SESSION AUTHORIZATION regress_rls_exempt_user;
SET
SET row_security TO OFF;
SET
COPY copy_rel_to TO STDOUT WITH DELIMITER ','; --ok
1,c4ca4238a0b923820dcc509a6f75849b
SET row_security TO ON;
SET
COPY copy_rel_to TO STDOUT WITH DELIMITER ','; --ok
1,c4ca4238a0b923820dcc509a6f75849b
-- Check COPY TO as user without permissions. SET row_security TO OFF;
SET SESSION AUTHORIZATION regress_rls_carol;
SET
SET row_security TO OFF;
SET
COPY copy_rel_to TO STDOUT WITH DELIMITER ','; --fail - permission denied
psql:sql/rowsecurity.sql:1264: ERROR:  permission denied for table copy_rel_to
SET row_security TO ON;
SET
COPY copy_rel_to TO STDOUT WITH DELIMITER ','; --fail - permission denied
psql:sql/rowsecurity.sql:1266: ERROR:  permission denied for table copy_rel_to
-- Check COPY FROM as Superuser/owner.
RESET SESSION AUTHORIZATION;
RESET
SET row_security TO OFF;
SET
COPY copy_t FROM STDIN; --ok
COPY 4
SET row_security TO ON;
SET
COPY copy_t FROM STDIN; --ok
COPY 4
-- Check COPY FROM as user with permissions.
SET SESSION AUTHORIZATION regress_rls_bob;
SET
SET row_security TO OFF;
SET
COPY copy_t FROM STDIN; --fail - would be affected by RLS.
psql:sql/rowsecurity.sql:1288: ERROR:  query would be affected by row-level security policy for table "copy_t"
SET row_security TO ON;
SET
COPY copy_t FROM STDIN; --fail - COPY FROM not supported by RLS.
psql:sql/rowsecurity.sql:1290: ERROR:  COPY FROM not supported with row-level security
HINT:  Use INSERT statements instead.
-- Check COPY FROM as user with permissions and BYPASSRLS
SET SESSION AUTHORIZATION regress_rls_exempt_user;
SET
SET row_security TO ON;
SET
COPY copy_t FROM STDIN; --ok
COPY 4
-- Check COPY FROM as user without permissions.
SET SESSION AUTHORIZATION regress_rls_carol;
SET
SET row_security TO OFF;
SET
COPY copy_t FROM STDIN; --fail - permission denied.
psql:sql/rowsecurity.sql:1305: ERROR:  permission denied for table copy_t
SET row_security TO ON;
SET
COPY copy_t FROM STDIN; --fail - permission denied.
psql:sql/rowsecurity.sql:1307: ERROR:  permission denied for table copy_t
RESET SESSION AUTHORIZATION;
RESET
DROP TABLE copy_t;
DROP TABLE
DROP TABLE copy_rel_to CASCADE;
DROP TABLE
-- Check WHERE CURRENT OF
SET SESSION AUTHORIZATION regress_rls_alice;
SET
CREATE TABLE current_check (currentid int, payload text, rlsuser text);
CREATE TABLE
GRANT ALL ON current_check TO PUBLIC;
GRANT
INSERT INTO current_check VALUES
    (1, 'abc', 'regress_rls_bob'),
    (2, 'bcd', 'regress_rls_bob'),
    (3, 'cde', 'regress_rls_bob'),
    (4, 'def', 'regress_rls_bob');
INSERT 0 4
CREATE POLICY p1 ON current_check FOR SELECT USING (currentid % 2 = 0);
CREATE POLICY
CREATE POLICY p2 ON current_check FOR DELETE USING (currentid = 4 AND rlsuser = current_user);
CREATE POLICY
CREATE POLICY p3 ON current_check FOR UPDATE USING (currentid = 4) WITH CHECK (rlsuser = current_user);
CREATE POLICY
ALTER TABLE current_check ENABLE ROW LEVEL SECURITY;
ALTER TABLE
SET SESSION AUTHORIZATION regress_rls_bob;
SET
-- Can SELECT even rows
SELECT * FROM current_check;
 currentid | payload |     rlsuser     
-----------+---------+-----------------
         2 | bcd     | regress_rls_bob
         4 | def     | regress_rls_bob
(2 rows)

--
-- check pg_stats view filtering
--
SET row_security TO ON;
SET
SET SESSION AUTHORIZATION regress_rls_alice;
SET
ANALYZE current_check;
ANALYZE
-- Stats visible
SELECT row_security_active('current_check');
 row_security_active 
---------------------
 f
(1 row)

SELECT attname, most_common_vals FROM pg_stats
  WHERE tablename = 'current_check'
  ORDER BY 1;
 attname | most_common_vals 
---------+------------------
(0 rows)

SET SESSION AUTHORIZATION regress_rls_bob;
SET
-- Stats not visible
SELECT row_security_active('current_check');
 row_security_active 
---------------------
 t
(1 row)

SELECT attname, most_common_vals FROM pg_stats
  WHERE tablename = 'current_check'
  ORDER BY 1;
 attname | most_common_vals 
---------+------------------
(0 rows)

--
-- Non-target relations are only subject to SELECT policies
--
SET SESSION AUTHORIZATION regress_rls_alice;
SET
CREATE TABLE r1 (a  int primary key );
CREATE TABLE
CREATE TABLE r2(a int primary key );
CREATE TABLE
INSERT INTO r1 VALUES (10), (20);
INSERT 0 2
INSERT INTO r2 VALUES (10), (20);
INSERT 0 2
GRANT ALL ON r1, r2 TO regress_rls_bob;
GRANT
CREATE POLICY p1 ON r1 USING (true);
CREATE POLICY
ALTER TABLE r1 ENABLE ROW LEVEL SECURITY;
ALTER TABLE
CREATE POLICY p1 ON r2 FOR SELECT USING (true);
CREATE POLICY
CREATE POLICY p2 ON r2 FOR INSERT WITH CHECK (false);
CREATE POLICY
CREATE POLICY p3 ON r2 FOR UPDATE USING (false);
CREATE POLICY
CREATE POLICY p4 ON r2 FOR DELETE USING (false);
CREATE POLICY
ALTER TABLE r2 ENABLE ROW LEVEL SECURITY;
ALTER TABLE
SET SESSION AUTHORIZATION regress_rls_bob;
SET
SELECT * FROM r1;
 a  
----
 10
 20
(2 rows)

SELECT * FROM r2;
 a  
----
 10
 20
(2 rows)

-- r2 is read-only
INSERT INTO r2 VALUES (2); -- Not allowed
psql:sql/rowsecurity.sql:1381: ERROR:  new row violates row-level security policy for table "r2"
-- No error (unable to see any rows to update)
UPDATE r2 SET a = 2 RETURNING *; -- Updates nothing
 a 
---
(0 rows)

UPDATE 0
DELETE FROM r2 RETURNING *; -- Deletes nothing
 a 
---
(0 rows)

DELETE 0
-- r2 can be used as a non-target relation in DML
INSERT INTO r1 SELECT a + 1 FROM r2 RETURNING *; -- OK
 a  
----
 11
 21
(2 rows)

INSERT 0 2
UPDATE r1 SET a = r2.a + 2 FROM r2 WHERE r1.a = r2.a RETURNING *; -- OK
 a  | a  
----+----
 12 | 10
 22 | 20
(2 rows)

UPDATE 2
DELETE FROM r1 USING r2 WHERE r1.a = r2.a + 2 RETURNING *; -- OK
psql:sql/rowsecurity.sql:1389: ERROR:  No other tables than the update target table are allowed when updating a remote relation.
SELECT * FROM r1;
 a  
----
 11
 12
 21
 22
(4 rows)

SELECT * FROM r2;
 a  
----
 10
 20
(2 rows)

SET SESSION AUTHORIZATION regress_rls_alice;
SET
DROP TABLE r1;
DROP TABLE
DROP TABLE r2;
DROP TABLE
--
-- FORCE ROW LEVEL SECURITY applies RLS to owners too
--
SET SESSION AUTHORIZATION regress_rls_alice;
SET
SET row_security = on;
SET
CREATE TABLE r1 (a int primary key);
CREATE TABLE
INSERT INTO r1 VALUES (10), (20);
INSERT 0 2
CREATE POLICY p1 ON r1 USING (false);
CREATE POLICY
ALTER TABLE r1 ENABLE ROW LEVEL SECURITY;
ALTER TABLE
ALTER TABLE r1 FORCE ROW LEVEL SECURITY;
ALTER TABLE
-- No error, but no rows
TABLE r1;
 a 
---
(0 rows)

-- RLS error
INSERT INTO r1 VALUES (1);
psql:sql/rowsecurity.sql:1413: ERROR:  new row violates row-level security policy for table "r1"
-- No error (unable to see any rows to update)
UPDATE r1 SET a = 1;
UPDATE 0
TABLE r1;
 a 
---
(0 rows)

-- No error (unable to see any rows to delete)
DELETE FROM r1;
DELETE 0
TABLE r1;
 a 
---
(0 rows)

SET row_security = off;
SET
-- these all fail, would be affected by RLS
TABLE r1;
psql:sql/rowsecurity.sql:1425: ERROR:  query would be affected by row-level security policy for table "r1"
HINT:  To disable the policy for the table's owner, use ALTER TABLE NO FORCE ROW LEVEL SECURITY.
UPDATE r1 SET a = 1;
psql:sql/rowsecurity.sql:1426: ERROR:  query would be affected by row-level security policy for table "r1"
HINT:  To disable the policy for the table's owner, use ALTER TABLE NO FORCE ROW LEVEL SECURITY.
DELETE FROM r1;
psql:sql/rowsecurity.sql:1427: ERROR:  query would be affected by row-level security policy for table "r1"
HINT:  To disable the policy for the table's owner, use ALTER TABLE NO FORCE ROW LEVEL SECURITY.
DROP TABLE r1;
DROP TABLE
--
-- FORCE ROW LEVEL SECURITY does not break RI
--
SET SESSION AUTHORIZATION regress_rls_alice;
SET
SET row_security = on;
SET
CREATE TABLE r1 (a int PRIMARY KEY);
CREATE TABLE
CREATE TABLE r2 (a int);
CREATE TABLE
INSERT INTO r1 VALUES (10), (20);
INSERT 0 2
INSERT INTO r2 VALUES (10), (20);
INSERT 0 2
-- Create policies on r2 which prevent the
-- owner from seeing any rows, but RI should
-- still see them.
CREATE POLICY p1 ON r2 USING (false);
CREATE POLICY
ALTER TABLE r2 ENABLE ROW LEVEL SECURITY;
ALTER TABLE
ALTER TABLE r2 FORCE ROW LEVEL SECURITY;
ALTER TABLE
-- Errors due to rows in r2
DELETE FROM r1;
DELETE 2
-- Reset r2 to no-RLS
DROP POLICY p1 ON r2;
DROP POLICY
ALTER TABLE r2 NO FORCE ROW LEVEL SECURITY;
ALTER TABLE
ALTER TABLE r2 DISABLE ROW LEVEL SECURITY;
ALTER TABLE
-- clean out r2 for INSERT test below
DELETE FROM r2;
DELETE 2
-- Change r1 to not allow rows to be seen
CREATE POLICY p1 ON r1 USING (false);
CREATE POLICY
ALTER TABLE r1 ENABLE ROW LEVEL SECURITY;
ALTER TABLE
ALTER TABLE r1 FORCE ROW LEVEL SECURITY;
ALTER TABLE
-- No rows seen
TABLE r1;
 a 
---
(0 rows)

-- No error, RI still sees that row exists in r1
INSERT INTO r2 VALUES (10);
INSERT 0 1
DROP TABLE r2;
DROP TABLE
DROP TABLE r1;
DROP TABLE
-- Ensure cascaded DELETE works
CREATE TABLE r1 (a int PRIMARY KEY);
CREATE TABLE
CREATE TABLE r2 (a int);
CREATE TABLE
INSERT INTO r1 VALUES (10), (20);
INSERT 0 2
INSERT INTO r2 VALUES (10), (20);
INSERT 0 2
-- Create policies on r2 which prevent the
-- owner from seeing any rows, but RI should
-- still see them.
CREATE POLICY p1 ON r2 USING (false);
CREATE POLICY
ALTER TABLE r2 ENABLE ROW LEVEL SECURITY;
ALTER TABLE
ALTER TABLE r2 FORCE ROW LEVEL SECURITY;
ALTER TABLE
-- Deletes all records from both
DELETE FROM r1;
DELETE 2
-- Remove FORCE from r2
ALTER TABLE r2 NO FORCE ROW LEVEL SECURITY;
ALTER TABLE
-- As owner, we now bypass RLS
-- verify no rows in r2 now
TABLE r2;
 a  
----
 10
 20
(2 rows)

DROP TABLE r2;
DROP TABLE
DROP TABLE r1;
DROP TABLE
-- Ensure cascaded UPDATE works
CREATE TABLE r1 (a int PRIMARY KEY);
CREATE TABLE
CREATE TABLE r2 (a int);
CREATE TABLE
INSERT INTO r1 VALUES (10), (20);
INSERT 0 2
INSERT INTO r2 VALUES (10), (20);
INSERT 0 2
-- Create policies on r2 which prevent the
-- owner from seeing any rows, but RI should
-- still see them.
CREATE POLICY p1 ON r2 USING (false);
CREATE POLICY
ALTER TABLE r2 ENABLE ROW LEVEL SECURITY;
ALTER TABLE
ALTER TABLE r2 FORCE ROW LEVEL SECURITY;
ALTER TABLE
-- Updates records in both
UPDATE r1 SET a = a+5;
UPDATE 2
-- Remove FORCE from r2
ALTER TABLE r2 NO FORCE ROW LEVEL SECURITY;
ALTER TABLE
-- As owner, we now bypass RLS
-- verify records in r2 updated
TABLE r2;
 a  
----
 10
 20
(2 rows)

DROP TABLE r2;
DROP TABLE
DROP TABLE r1;
DROP TABLE
--
-- Test INSERT+RETURNING applies SELECT policies as
-- WithCheckOptions (meaning an error is thrown)
--
SET SESSION AUTHORIZATION regress_rls_alice;
SET
SET row_security = on;
SET
CREATE TABLE r1 (a int primary key );
CREATE TABLE
CREATE POLICY p1 ON r1 FOR SELECT USING (false);
CREATE POLICY
CREATE POLICY p2 ON r1 FOR INSERT WITH CHECK (true);
CREATE POLICY
ALTER TABLE r1 ENABLE ROW LEVEL SECURITY;
ALTER TABLE
ALTER TABLE r1 FORCE ROW LEVEL SECURITY;
ALTER TABLE
-- Works fine
INSERT INTO r1 VALUES (10), (20);
INSERT 0 2
-- No error, but no rows
TABLE r1;
 a 
---
(0 rows)

SET row_security = off;
SET
-- fail, would be affected by RLS
TABLE r1;
psql:sql/rowsecurity.sql:1540: ERROR:  query would be affected by row-level security policy for table "r1"
HINT:  To disable the policy for the table's owner, use ALTER TABLE NO FORCE ROW LEVEL SECURITY.
SET row_security = on;
SET
-- Error
INSERT INTO r1 VALUES (10), (20) RETURNING *;
psql:sql/rowsecurity.sql:1545: ERROR:  new row violates row-level security policy for table "r1"
DROP TABLE r1;
DROP TABLE
--
-- Test UPDATE+RETURNING applies SELECT policies as
-- WithCheckOptions (meaning an error is thrown)
--
SET SESSION AUTHORIZATION regress_rls_alice;
SET
SET row_security = on;
SET
CREATE TABLE r1 (a int PRIMARY KEY);
CREATE TABLE
CREATE POLICY p1 ON r1 FOR SELECT USING (a < 20);
CREATE POLICY
CREATE POLICY p2 ON r1 FOR UPDATE USING (a < 20) WITH CHECK (true);
CREATE POLICY
CREATE POLICY p3 ON r1 FOR INSERT WITH CHECK (true);
CREATE POLICY
INSERT INTO r1 VALUES (10);
INSERT 0 1
ALTER TABLE r1 ENABLE ROW LEVEL SECURITY;
ALTER TABLE
ALTER TABLE r1 FORCE ROW LEVEL SECURITY;
ALTER TABLE
-- Works fine
UPDATE r1 SET a = 30;
UPDATE 1
-- Show updated rows
ALTER TABLE r1 NO FORCE ROW LEVEL SECURITY;
ALTER TABLE
TABLE r1;
 a  
----
 30
(1 row)

-- reset value in r1 for test with RETURNING
UPDATE r1 SET a = 10;
UPDATE 1
-- Verify row reset
TABLE r1;
 a  
----
 10
(1 row)

ALTER TABLE r1 FORCE ROW LEVEL SECURITY;
ALTER TABLE
-- Error
UPDATE r1 SET a = 30 RETURNING *;
psql:sql/rowsecurity.sql:1577: ERROR:  Kunlun-db: MySQL storage node (1, 1) returned error: 1644, new row violates check constraint.
-- UPDATE path of INSERT ... ON CONFLICT DO UPDATE should also error out
INSERT INTO r1 VALUES (10)
    ON CONFLICT (a) DO UPDATE SET a = 30 RETURNING *;
psql:sql/rowsecurity.sql:1581: ERROR:  Kunlun-db: MySQL storage node (1, 1) returned error: 1644, new row violates check constraint.
-- Should still error out without RETURNING (use of arbiter always requires
-- SELECT permissions)
INSERT INTO r1 VALUES (10)
    ON CONFLICT (a) DO UPDATE SET a = 30;
psql:sql/rowsecurity.sql:1586: ERROR:  Kunlun-db: MySQL storage node (1, 1) returned error: 1644, new row violates check constraint.
INSERT INTO r1 VALUES (10)
    ON CONFLICT ON CONSTRAINT r1_pkey DO UPDATE SET a = 30;
psql:sql/rowsecurity.sql:1588: ERROR:  Kunlun-db: MySQL storage node (1, 1) returned error: 1644, new row violates check constraint.
	
DROP TABLE r1;
DROP TABLE
-- Check dependency handling
RESET SESSION AUTHORIZATION;
RESET
CREATE TABLE dep1 (c1 int);
CREATE TABLE
CREATE TABLE dep2 (c1 int);
CREATE TABLE
CREATE POLICY dep_p1 ON dep1 TO regress_rls_bob USING (c1 > (select max(dep2.c1) from dep2));
CREATE POLICY
ALTER POLICY dep_p1 ON dep1 TO regress_rls_bob,regress_rls_carol;
ALTER POLICY
-- Should return one
SELECT count(*) = 1 FROM pg_depend
				   WHERE objid = (SELECT oid FROM pg_policy WHERE polname = 'dep_p1')
					 AND refobjid = (SELECT oid FROM pg_class WHERE relname = 'dep2');
 ?column? 
----------
 t
(1 row)

ALTER POLICY dep_p1 ON dep1 USING (true);
ALTER POLICY
-- Should return one
SELECT count(*) = 1 FROM pg_shdepend
				   WHERE objid = (SELECT oid FROM pg_policy WHERE polname = 'dep_p1')
					 AND refobjid = (SELECT oid FROM pg_authid WHERE rolname = 'regress_rls_bob');
 ?column? 
----------
 t
(1 row)

-- Should return one
SELECT count(*) = 1 FROM pg_shdepend
				   WHERE objid = (SELECT oid FROM pg_policy WHERE polname = 'dep_p1')
					 AND refobjid = (SELECT oid FROM pg_authid WHERE rolname = 'regress_rls_carol');
 ?column? 
----------
 t
(1 row)

-- Should return zero
SELECT count(*) = 0 FROM pg_depend
				   WHERE objid = (SELECT oid FROM pg_policy WHERE polname = 'dep_p1')
					 AND refobjid = (SELECT oid FROM pg_class WHERE relname = 'dep2');
 ?column? 
----------
 t
(1 row)

-- DROP OWNED BY testing
RESET SESSION AUTHORIZATION;
RESET
CREATE ROLE regress_rls_dob_role1;
CREATE ROLE
CREATE ROLE regress_rls_dob_role2;
CREATE ROLE
CREATE TABLE dob_t1 (c1 int);
CREATE TABLE
CREATE TABLE dob_t2 (c1 int) PARTITION BY RANGE (c1);
CREATE TABLE
CREATE POLICY p1 ON dob_t1 TO regress_rls_dob_role1 USING (true);
CREATE POLICY
DROP OWNED BY regress_rls_dob_role1;
psql:sql/rowsecurity.sql:1633: ERROR:  Statement 'DROP OWNED' is not supported in Kunlun.
DROP POLICY p1 ON dob_t1; -- should fail, already gone
DROP POLICY
CREATE POLICY p1 ON dob_t1 TO regress_rls_dob_role1,regress_rls_dob_role2 USING (true);
CREATE POLICY
DROP OWNED BY regress_rls_dob_role1;
psql:sql/rowsecurity.sql:1637: ERROR:  Statement 'DROP OWNED' is not supported in Kunlun.
DROP POLICY p1 ON dob_t1; -- should succeed
DROP POLICY
CREATE POLICY p1 ON dob_t2 TO regress_rls_dob_role1,regress_rls_dob_role2 USING (true);
CREATE POLICY
DROP OWNED BY regress_rls_dob_role1;
psql:sql/rowsecurity.sql:1641: ERROR:  Statement 'DROP OWNED' is not supported in Kunlun.
DROP POLICY p1 ON dob_t2; -- should succeed
DROP POLICY
DROP USER regress_rls_dob_role1;
DROP ROLE
DROP USER regress_rls_dob_role2;
DROP ROLE
-- Bug #15708: view + table with RLS should check policies as view owner
CREATE TABLE ref_tbl (a int);
CREATE TABLE
INSERT INTO ref_tbl VALUES (1);
INSERT 0 1
CREATE TABLE rls_tbl (a int);
CREATE TABLE
INSERT INTO rls_tbl VALUES (10);
INSERT 0 1
ALTER TABLE rls_tbl ENABLE ROW LEVEL SECURITY;
ALTER TABLE
CREATE POLICY p1 ON rls_tbl USING (EXISTS (SELECT 1 FROM ref_tbl));
CREATE POLICY
GRANT SELECT ON ref_tbl TO regress_rls_bob;
GRANT
GRANT SELECT ON rls_tbl TO regress_rls_bob;
GRANT
CREATE VIEW rls_view AS SELECT * FROM rls_tbl;
CREATE VIEW
ALTER VIEW rls_view OWNER TO regress_rls_bob;
ALTER VIEW
GRANT SELECT ON rls_view TO regress_rls_alice;
GRANT
SET SESSION AUTHORIZATION regress_rls_alice;
SET
SELECT * FROM ref_tbl; -- Permission denied
psql:sql/rowsecurity.sql:1664: ERROR:  permission denied for table ref_tbl
SELECT * FROM rls_tbl; -- Permission denied
psql:sql/rowsecurity.sql:1665: ERROR:  permission denied for table rls_tbl
SELECT * FROM rls_view; -- OK
 a  
----
 10
(1 row)

RESET SESSION AUTHORIZATION;
RESET
DROP VIEW rls_view;
DROP VIEW
DROP TABLE rls_tbl;
DROP TABLE
DROP TABLE ref_tbl;
DROP TABLE
-- Leaky operator test
CREATE TABLE rls_tbl (a int);
CREATE TABLE
INSERT INTO rls_tbl SELECT x/10 FROM generate_series(1, 100) x;
INSERT 0 100
ANALYZE rls_tbl;
ANALYZE
ALTER TABLE rls_tbl ENABLE ROW LEVEL SECURITY;
ALTER TABLE
GRANT SELECT ON rls_tbl TO regress_rls_alice;
GRANT
SET SESSION AUTHORIZATION regress_rls_alice;
SET
CREATE FUNCTION op_leak(int, int) RETURNS bool
    AS 'BEGIN RAISE NOTICE ''op_leak => %, %'', $1, $2; RETURN $1 < $2; END'
    LANGUAGE plpgsql;
CREATE FUNCTION
CREATE OPERATOR <<< (procedure = op_leak, leftarg = int, rightarg = int,
                     restrict = scalarltsel);
CREATE OPERATOR
SELECT * FROM rls_tbl WHERE a <<< 1000;
 a 
---
(0 rows)

DROP OPERATOR <<< (int, int);
DROP OPERATOR
DROP FUNCTION op_leak(int, int);
DROP FUNCTION
RESET SESSION AUTHORIZATION;
RESET
DROP TABLE rls_tbl;
DROP TABLE
--
-- Clean up objects
--
RESET SESSION AUTHORIZATION;
RESET
drop table regress_rls_schema.t1 cascade;
DROP TABLE
drop table regress_rls_schema.blog;
psql:sql/rowsecurity.sql:1698: ERROR:  table "blog" does not exist
drop table regress_rls_schema.x1;
DROP TABLE
drop table regress_rls_schema.y1;
DROP TABLE
drop table regress_rls_schema.z1;
DROP TABLE
drop table regress_rls_schema.y2;
DROP TABLE
drop table regress_rls_schema.z2;
DROP TABLE
drop table regress_rls_schema.b1 cascade;
psql:sql/rowsecurity.sql:1704: NOTICE:  drop cascades to view bv1
DROP TABLE
drop table regress_rls_schema.s1 cascade;
psql:sql/rowsecurity.sql:1705: NOTICE:  drop cascades to policy p2 on table s2
DROP TABLE
drop table regress_rls_schema.s2 cascade;
psql:sql/rowsecurity.sql:1706: NOTICE:  drop cascades to view v2
DROP TABLE
drop table regress_rls_schema.rec1 cascade;
psql:sql/rowsecurity.sql:1707: NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to view rec1v
drop cascades to policy r2 on table rec2
DROP TABLE
drop table regress_rls_schema.rec2 cascade;
psql:sql/rowsecurity.sql:1708: NOTICE:  drop cascades to view rec2v
DROP TABLE
drop table regress_rls_schema.part_document cascade;
DROP TABLE
drop table regress_rls_schema.uaccount cascade;
DROP TABLE
drop table regress_rls_schema.document cascade;
DROP TABLE
drop table regress_rls_schema.category cascade;
DROP TABLE
drop table regress_rls_schema.dependent cascade;
DROP TABLE
drop table regress_rls_schema.current_check;
DROP TABLE
drop table regress_rls_schema.rls_tbl cascade;
psql:sql/rowsecurity.sql:1715: ERROR:  table "rls_tbl" does not exist
drop function regress_rls_schema.op_leak(integer,integer) cascade;
psql:sql/rowsecurity.sql:1716: ERROR:  function regress_rls_schema.op_leak(integer, integer) does not exist
DROP USER regress_rls_alice;
DROP ROLE
drop table regress_rls_schema.dep1 cascade;
DROP TABLE
drop table regress_rls_schema.t2 cascade;
DROP TABLE
DROP USER regress_rls_bob;
DROP ROLE
DROP USER regress_rls_carol;
DROP ROLE
DROP USER regress_rls_dave;
DROP ROLE
DROP USER regress_rls_exempt_user;
DROP ROLE
DROP ROLE regress_rls_group1;
DROP ROLE
DROP ROLE regress_rls_group2;
DROP ROLE
drop table regress_rls_schema.dob_t1 cascade;
DROP TABLE
drop table regress_rls_schema.dob_t2 cascade;
DROP TABLE
drop table regress_rls_schema.dep2 cascade;
DROP TABLE
\set VERBOSITY terse \\ -- suppress cascade details
DROP SCHEMA regress_rls_schema CASCADE;
psql:sql/rowsecurity.sql:1733: NOTICE:  drop cascades to function f_leak(text)
DROP SCHEMA
\set VERBOSITY default
-- Arrange to have a few policies left over, for testing
-- pg_dump/pg_restore
CREATE SCHEMA regress_rls_schema;
CREATE SCHEMA
CREATE TABLE rls_tbl (c1 int);
CREATE TABLE
CREATE TABLE rls_tbl_force (c1 int);
CREATE TABLE
drop table rls_tbl;
DROP TABLE
drop table rls_tbl_force;
DROP TABLE
drop schema regress_rls_schema;
DROP SCHEMA
-- Arrange to have a few policies left over, for testing
-- pg_dump/pg_restore
					   
CREATE SCHEMA regress_rls_schema;
CREATE SCHEMA
					 
					   
CREATE TABLE rls_tbl (c1 int);
CREATE TABLE
ALTER TABLE rls_tbl ENABLE ROW LEVEL SECURITY;
ALTER TABLE
CREATE POLICY p1 ON rls_tbl USING (c1 > 5);
CREATE POLICY
CREATE POLICY p2 ON rls_tbl FOR SELECT USING (c1 <= 3);
CREATE POLICY
CREATE POLICY p3 ON rls_tbl FOR UPDATE USING (c1 <= 3) WITH CHECK (c1 > 5);
CREATE POLICY
CREATE POLICY p4 ON rls_tbl FOR DELETE USING (c1 <= 3);
CREATE POLICY
					   
CREATE TABLE rls_tbl_force (c1 int);
CREATE TABLE
ALTER TABLE rls_tbl_force ENABLE ROW LEVEL SECURITY;
ALTER TABLE
ALTER TABLE rls_tbl_force FORCE ROW LEVEL SECURITY;
ALTER TABLE
CREATE POLICY p1 ON rls_tbl_force USING (c1 = 5) WITH CHECK (c1 < 5);
CREATE POLICY
CREATE POLICY p2 ON rls_tbl_force FOR SELECT USING (c1 = 8);
CREATE POLICY
CREATE POLICY p3 ON rls_tbl_force FOR UPDATE USING (c1 = 8) WITH CHECK (c1 >= 5);
CREATE POLICY
CREATE POLICY p4 ON rls_tbl_force FOR DELETE USING (c1 = 8);
CREATE POLICY
						 
					 
