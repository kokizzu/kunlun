--
-- Hash partitioning.
--
-- Use hand-rolled hash functions and operator classes to get predictable
-- result on different matchines.  See the definitions of
-- part_part_test_int4_ops and part_test_text_ops in insert.sql.
drop table if exists mchash;
psql:sql/hash_part.sql:9: NOTICE:  table "mchash" does not exist, skipping
DROP TABLE
CREATE TABLE mchash (a int, b text, c jsonb)
  PARTITION BY HASH (a part_test_int4_ops, b part_test_text_ops);
CREATE TABLE
CREATE TABLE mchash1
  PARTITION OF mchash FOR VALUES WITH (MODULUS 4, REMAINDER 0);
CREATE TABLE
-- invalid OID, no such table
SELECT satisfies_hash_partition(0, 4, 0, NULL);
 satisfies_hash_partition 
--------------------------
 
(1 row)

-- not partitioned
SELECT satisfies_hash_partition('tenk1'::regclass, 4, 0, NULL);
psql:sql/hash_part.sql:19: ERROR:  "tenk1" is not a hash partitioned table
-- partition rather than the parent
SELECT satisfies_hash_partition('mchash1'::regclass, 4, 0, NULL);
psql:sql/hash_part.sql:22: ERROR:  "mchash1" is not a hash partitioned table
-- invalid modulus
SELECT satisfies_hash_partition('mchash'::regclass, 0, 0, NULL);
psql:sql/hash_part.sql:25: ERROR:  modulus for hash partition must be a positive integer
-- remainder too small
SELECT satisfies_hash_partition('mchash'::regclass, 1, -1, NULL);
psql:sql/hash_part.sql:28: ERROR:  remainder for hash partition must be a non-negative integer
-- remainder too large
SELECT satisfies_hash_partition('mchash'::regclass, 1, 1, NULL);
psql:sql/hash_part.sql:31: ERROR:  remainder for hash partition must be less than modulus
-- modulus is null
SELECT satisfies_hash_partition('mchash'::regclass, NULL, 0, NULL);
 satisfies_hash_partition 
--------------------------
 
(1 row)

-- remainder is null
SELECT satisfies_hash_partition('mchash'::regclass, 4, NULL, NULL);
 satisfies_hash_partition 
--------------------------
 
(1 row)

-- too many arguments
SELECT satisfies_hash_partition('mchash'::regclass, 4, 0, NULL::int, NULL::text, NULL::json);
psql:sql/hash_part.sql:40: ERROR:  number of partitioning columns (2) does not match number of partition keys provided (3)
-- too few arguments
SELECT satisfies_hash_partition('mchash'::regclass, 3, 1, NULL::int);
psql:sql/hash_part.sql:43: ERROR:  number of partitioning columns (2) does not match number of partition keys provided (1)
-- wrong argument type
SELECT satisfies_hash_partition('mchash'::regclass, 2, 1, NULL::int, NULL::int);
psql:sql/hash_part.sql:46: ERROR:  column 2 of the partition key has type "text", but supplied value is of type "integer"
-- ok, should be false
SELECT satisfies_hash_partition('mchash'::regclass, 4, 0, 0, ''::text);
 satisfies_hash_partition 
--------------------------
 f
(1 row)

-- ok, should be true
SELECT satisfies_hash_partition('mchash'::regclass, 4, 0, 2, ''::text);
 satisfies_hash_partition 
--------------------------
 t
(1 row)

-- argument via variadic syntax, should fail because not all partitioning
-- columns are of the correct type
SELECT satisfies_hash_partition('mchash'::regclass, 2, 1,
								variadic array[1,2]::int[]);
psql:sql/hash_part.sql:57: ERROR:  column 2 of the partition key has type "text", but supplied value is of type "integer"
-- multiple partitioning columns of the same type
drop table if exists mcinthash;
psql:sql/hash_part.sql:60: NOTICE:  table "mcinthash" does not exist, skipping
DROP TABLE
CREATE TABLE mcinthash (a int, b int, c jsonb)
  PARTITION BY HASH (a part_test_int4_ops, b part_test_int4_ops);
CREATE TABLE
-- now variadic should work, should be false
SELECT satisfies_hash_partition('mcinthash'::regclass, 4, 0,
								variadic array[0, 0]);
 satisfies_hash_partition 
--------------------------
 f
(1 row)

-- should be true
SELECT satisfies_hash_partition('mcinthash'::regclass, 4, 0,
								variadic array[0, 1]);
 satisfies_hash_partition 
--------------------------
 t
(1 row)

-- wrong length
SELECT satisfies_hash_partition('mcinthash'::regclass, 4, 0,
								variadic array[]::int[]);
psql:sql/hash_part.sql:74: ERROR:  number of partitioning columns (2) does not match number of partition keys provided (0)
-- wrong type
SELECT satisfies_hash_partition('mcinthash'::regclass, 4, 0,
								variadic array[now(), now()]);
psql:sql/hash_part.sql:78: ERROR:  column 1 of the partition key has type "integer", but supplied value is of type "timestamp with time zone"
-- cleanup
DROP TABLE mchash;
DROP TABLE
DROP TABLE mcinthash;
DROP TABLE
