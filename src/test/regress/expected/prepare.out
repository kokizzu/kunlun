-- Regression tests for prepareable statements. We query the content
-- of the pg_prepared_statements view as prepared statements are
-- created and removed.
SELECT name, statement, parameter_types FROM pg_prepared_statements;
 name | statement | parameter_types 
------+-----------+-----------------
(0 rows)

PREPARE q1 AS SELECT 1 AS a;
PREPARE
EXECUTE q1;
 a 
---
 1
(1 row)

SELECT name, statement, parameter_types FROM pg_prepared_statements;
 name |          statement           | parameter_types 
------+------------------------------+-----------------
 q1   | PREPARE q1 AS SELECT 1 AS a; | {}
(1 row)

-- should fail
PREPARE q1 AS SELECT 2;
psql:sql/prepare.sql:13: ERROR:  prepared statement "q1" already exists
-- should succeed
DEALLOCATE q1;
DEALLOCATE
PREPARE q1 AS SELECT 2;
PREPARE
EXECUTE q1;
 ?column? 
----------
        2
(1 row)

PREPARE q2 AS SELECT 2 AS b;
PREPARE
SELECT name, statement, parameter_types FROM pg_prepared_statements;
 name |          statement           | parameter_types 
------+------------------------------+-----------------
 q1   | PREPARE q1 AS SELECT 2;      | {}
 q2   | PREPARE q2 AS SELECT 2 AS b; | {}
(2 rows)

-- sql92 syntax
DEALLOCATE PREPARE q1;
DEALLOCATE
SELECT name, statement, parameter_types FROM pg_prepared_statements;
 name |          statement           | parameter_types 
------+------------------------------+-----------------
 q2   | PREPARE q2 AS SELECT 2 AS b; | {}
(1 row)

DEALLOCATE PREPARE q2;
DEALLOCATE
-- the view should return the empty set again
SELECT name, statement, parameter_types FROM pg_prepared_statements;
 name | statement | parameter_types 
------+-----------+-----------------
(0 rows)

-- parameterized queries
PREPARE q2(text) AS
	SELECT datname, datistemplate, datallowconn
	FROM pg_database WHERE datname = $1;
PREPARE
EXECUTE q2('postgres');
 datname  | datistemplate | datallowconn 
----------+---------------+--------------
 postgres | f             | t
(1 row)

PREPARE q3(text, int, float, boolean, oid, smallint) AS
	SELECT * FROM tenk1 WHERE string4 = $1 AND (four = $2 OR
	ten = $3::bigint OR true = $4 OR oid = $5 OR odd = $6::int)
	ORDER BY unique1;
psql:sql/prepare.sql:42: ERROR:  column "oid" does not exist
LINE 3:  ten = $3::bigint OR true = $4 OR oid = $5 OR odd = $6::int)
                                          ^
HINT:  Perhaps you meant to reference the column "tenk1.odd".
EXECUTE q3('AAAAxx', 5::smallint, 10.5::float, false, 500::oid, 4::bigint);
psql:sql/prepare.sql:44: ERROR:  prepared statement "q3" does not exist
-- too few params
EXECUTE q3('bool');
psql:sql/prepare.sql:47: ERROR:  prepared statement "q3" does not exist
-- too many params
EXECUTE q3('bytea', 5::smallint, 10.5::float, false, 500::oid, 4::bigint, true);
psql:sql/prepare.sql:50: ERROR:  prepared statement "q3" does not exist
-- wrong param types
EXECUTE q3(5::smallint, 10.5::float, false, 500::oid, 4::bigint, 'bytea');
psql:sql/prepare.sql:53: ERROR:  prepared statement "q3" does not exist
-- invalid type
PREPARE q4(nonexistenttype) AS SELECT $1;
psql:sql/prepare.sql:56: ERROR:  type "nonexistenttype" does not exist
LINE 1: PREPARE q4(nonexistenttype) AS SELECT $1;
                   ^
-- unknown or unspecified parameter types: should succeed
PREPARE q6 AS
    SELECT * FROM tenk1 WHERE unique1 = $1 AND stringu1 = $2;
PREPARE
PREPARE q7(unknown) AS
    SELECT * FROM road WHERE thepath = $1;
psql:sql/prepare.sql:62: ERROR:  relation "road" does not exist
LINE 2:     SELECT * FROM road WHERE thepath = $1;
                          ^
SELECT name, statement, parameter_types FROM pg_prepared_statements
    ORDER BY name;
 name |                           statement                           | parameter_types 
------+---------------------------------------------------------------+-----------------
 q2   | PREPARE q2(text) AS                                          +| {text}
      |         SELECT datname, datistemplate, datallowconn          +| 
      |         FROM pg_database WHERE datname = $1;                  | 
 q6   | PREPARE q6 AS                                                +| {integer,name}
      |     SELECT * FROM tenk1 WHERE unique1 = $1 AND stringu1 = $2; | 
(2 rows)

-- test DEALLOCATE ALL;
DEALLOCATE ALL;
DEALLOCATE ALL
SELECT name, statement, parameter_types FROM pg_prepared_statements
    ORDER BY name;
 name | statement | parameter_types 
------+-----------+-----------------
(0 rows)

